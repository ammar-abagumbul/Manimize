{
  "doc_id": "8c80ba14e684e4d84917fdb6a4e2af4f",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.line.Arrow.html",
  "title": "Arrow - Manim Community v0.19.0",
  "content": "Arrow[¶](#arrow \"Link to this heading\")\n=======================================\nQualified name: `manim.mobject.geometry.line.Arrow`\n*class* Arrow(*\\*args*, *stroke\\_width\\=6*, *buff\\=0\\.25*, *max\\_tip\\_length\\_to\\_length\\_ratio\\=0\\.25*, *max\\_stroke\\_width\\_to\\_length\\_ratio\\=5*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow)[¶](#manim.mobject.geometry.line.Arrow \"Link to this definition\")\nBases: [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")\nAn arrow.\nParameters:\n* **args** (*Any*) – Arguments to be passed to [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\").\n* **stroke\\_width** (*float*) – The thickness of the arrow. Influenced by `max_stroke_width_to_length_ratio`.\n* **buff** (*float*) – The distance of the arrow from its start and end points.\n* **max\\_tip\\_length\\_to\\_length\\_ratio** (*float*) – `tip_length` scales with the length of the arrow. Increasing this ratio raises the max value of `tip_length`.\n* **max\\_stroke\\_width\\_to\\_length\\_ratio** (*float*) – `stroke_width` scales with the length of the arrow. Increasing this ratio ratios the max value of `stroke_width`.\n* **kwargs** (*Any*) – Additional arguments to be passed to [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\").\nSee also\n`ArrowTip`\n`CurvedArrow`\nExamples\nExample: ArrowExample [¶](#arrowexample)\n![../_images/ArrowExample-1.png](../_images/ArrowExample-1.png)\n```\nfrom manim import *\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(start=RIGHT, end=LEFT, color=GOLD)\n        arrow_2 = Arrow(start=RIGHT, end=LEFT, color=GOLD, tip_shape=ArrowSquareTip).shift(DOWN)\n        g1 = Group(arrow_1, arrow_2)\n        # the effect of buff\n        square = Square(color=MAROON_A)\n        arrow_3 = Arrow(start=LEFT, end=RIGHT)\n        arrow_4 = Arrow(start=LEFT, end=RIGHT, buff=0).next_to(arrow_1, UP)\n        g2 = Group(arrow_3, arrow_4, square)\n        # a shorter arrow has a shorter tip and smaller stroke width\n        arrow_5 = Arrow(start=ORIGIN, end=config.top).shift(LEFT * 4)\n        arrow_6 = Arrow(start=config.top + DOWN, end=config.top).shift(LEFT * 3)\n        g3 = Group(arrow_5, arrow_6)\n        self.add(Group(g1, g2, g3).arrange(buff=2))\n```\n```\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(start=RIGHT, end=LEFT, color=GOLD)\n        arrow_2 = Arrow(start=RIGHT, end=LEFT, color=GOLD, tip_shape=ArrowSquareTip).shift(DOWN)\n        g1 = Group(arrow_1, arrow_2)\n        # the effect of buff\n        square = Square(color=MAROON_A)\n        arrow_3 = Arrow(start=LEFT, end=RIGHT)\n        arrow_4 = Arrow(start=LEFT, end=RIGHT, buff=0).next_to(arrow_1, UP)\n        g2 = Group(arrow_3, arrow_4, square)\n        # a shorter arrow has a shorter tip and smaller stroke width\n        arrow_5 = Arrow(start=ORIGIN, end=config.top).shift(LEFT * 4)\n        arrow_6 = Arrow(start=config.top + DOWN, end=config.top).shift(LEFT * 3)\n        g3 = Group(arrow_5, arrow_6)\n        self.add(Group(g1, g2, g3).arrange(buff=2))\n```\nExample: ArrowExample [¶](#arrowexample)\n![../_images/ArrowExample-2.png](../_images/ArrowExample-2.png)\n```\nfrom manim import *\nclass ArrowExample(Scene):\n    def construct(self):\n        left_group = VGroup()\n        # As buff increases, the size of the arrow decreases.\n        for buff in np.arange(0, 2.2, 0.45):\n            left_group += Arrow(buff=buff, start=2 * LEFT, end=2 * RIGHT)\n        # Required to arrange arrows.\n        left_group.arrange(DOWN)\n        left_group.move_to(4 * LEFT)\n        middle_group = VGroup()\n        # As max_stroke_width_to_length_ratio gets bigger,\n        # the width of stroke increases.\n        for i in np.arange(0, 5, 0.5):\n            middle_group += Arrow(max_stroke_width_to_length_ratio=i)\n        middle_group.arrange(DOWN)\n        UR_group = VGroup()\n        # As max_tip_length_to_length_ratio increases,\n        # the length of the tip increases.\n        for i in np.arange(0, 0.3, 0.1):\n            UR_group += Arrow(max_tip_length_to_length_ratio=i)\n        UR_group.arrange(DOWN)\n        UR_group.move_to(4 * RIGHT + 2 * UP)\n        DR_group = VGroup()\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareFilledTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleFilledTip)\n        DR_group.arrange(DOWN)\n        DR_group.move_to(4 * RIGHT + 2 * DOWN)\n        self.add(left_group, middle_group, UR_group, DR_group)\n```\n```\nclass ArrowExample(Scene):\n    def construct(self):\n        left_group = VGroup()\n        # As buff increases, the size of the arrow decreases.\n        for buff in np.arange(0, 2.2, 0.45):\n            left_group += Arrow(buff=buff, start=2 * LEFT, end=2 * RIGHT)\n        # Required to arrange arrows.\n        left_group.arrange(DOWN)\n        left_group.move_to(4 * LEFT)\n        middle_group = VGroup()\n        # As max_stroke_width_to_length_ratio gets bigger,\n        # the width of stroke increases.\n        for i in np.arange(0, 5, 0.5):\n            middle_group += Arrow(max_stroke_width_to_length_ratio=i)\n        middle_group.arrange(DOWN)\n        UR_group = VGroup()\n        # As max_tip_length_to_length_ratio increases,\n        # the length of the tip increases.\n        for i in np.arange(0, 0.3, 0.1):\n            UR_group += Arrow(max_tip_length_to_length_ratio=i)\n        UR_group.arrange(DOWN)\n        UR_group.move_to(4 * RIGHT + 2 * UP)\n        DR_group = VGroup()\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=BLUE, tip_shape=ArrowSquareFilledTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleTip)\n        DR_group += Arrow(start=LEFT, end=RIGHT, color=YELLOW, tip_shape=ArrowCircleFilledTip)\n        DR_group.arrange(DOWN)\n        DR_group.move_to(4 * RIGHT + 2 * DOWN)\n        self.add(left_group, middle_group, UR_group, DR_group)\n```\nMethods\n| [`get_default_tip_length`](#manim.mobject.geometry.line.Arrow.get_default_tip_length \"manim.mobject.geometry.line.Arrow.get_default_tip_length\") | Returns the default tip\\_length of the arrow. |\n| --- | --- |\n| [`get_normal_vector`](#manim.mobject.geometry.line.Arrow.get_normal_vector \"manim.mobject.geometry.line.Arrow.get_normal_vector\") | Returns the normal of a vector. |\n| [`reset_normal_vector`](#manim.mobject.geometry.line.Arrow.reset_normal_vector \"manim.mobject.geometry.line.Arrow.reset_normal_vector\") | Resets the normal of a vector |\n| [`scale`](#manim.mobject.geometry.line.Arrow.scale \"manim.mobject.geometry.line.Arrow.scale\") | Scale an arrow, but keep stroke width and arrow tip size fixed. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*args*, *stroke\\_width\\=6*, *buff\\=0\\.25*, *max\\_tip\\_length\\_to\\_length\\_ratio\\=0\\.25*, *max\\_stroke\\_width\\_to\\_length\\_ratio\\=5*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.line.Arrow._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **args** (*Any*)\n* **stroke\\_width** (*float*)\n* **buff** (*float*)\n* **max\\_tip\\_length\\_to\\_length\\_ratio** (*float*)\n* **max\\_stroke\\_width\\_to\\_length\\_ratio** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone\n\\_set\\_stroke\\_width\\_from\\_length()[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow._set_stroke_width_from_length)[¶](#manim.mobject.geometry.line.Arrow._set_stroke_width_from_length \"Link to this definition\")\nSets stroke width based on length.\nReturn type:\nSelf\nget\\_default\\_tip\\_length()[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow.get_default_tip_length)[¶](#manim.mobject.geometry.line.Arrow.get_default_tip_length \"Link to this definition\")\nReturns the default tip\\_length of the arrow.\nExamples\n```\n>>> Arrow().get_default_tip_length()\n0.35\n```\nReturn type:\nfloat\nget\\_normal\\_vector()[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow.get_normal_vector)[¶](#manim.mobject.geometry.line.Arrow.get_normal_vector \"Link to this definition\")\nReturns the normal of a vector.\nExamples\n```\n>>> np.round(Arrow().get_normal_vector()) + 0. # add 0. to avoid negative 0 in output\narray([ 0.,  0., -1.])\n```\nReturn type:\n[*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")\nreset\\_normal\\_vector()[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow.reset_normal_vector)[¶](#manim.mobject.geometry.line.Arrow.reset_normal_vector \"Link to this definition\")\nResets the normal of a vector\nReturn type:\nSelf\nscale(*factor*, *scale\\_tips\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Arrow.scale)[¶](#manim.mobject.geometry.line.Arrow.scale \"Link to this definition\")\nScale an arrow, but keep stroke width and arrow tip size fixed.\nSee also\n[`scale()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.scale \"manim.mobject.mobject.Mobject.scale\")\nExamples\n```\n>>> arrow = Arrow(np.array([-1, -1, 0]), np.array([1, 1, 0]), buff=0)\n>>> scaled_arrow = arrow.scale(2)\n>>> np.round(scaled_arrow.get_start_and_end(), 8) + 0\narray([[-2., -2.,  0.],\n       [ 2.,  2.,  0.]])\n>>> arrow.tip.length == scaled_arrow.tip.length\nTrue\n```\nManually scaling the object using the default method\n[`scale()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.scale \"manim.mobject.mobject.Mobject.scale\") does not have the same properties:\n```\n>>> new_arrow = Arrow(np.array([-1, -1, 0]), np.array([1, 1, 0]), buff=0)\n>>> another_scaled_arrow = VMobject.scale(new_arrow, 2)\n>>> another_scaled_arrow.tip.length == arrow.tip.length\nFalse\n```\nParameters:\n* **factor** (*float*)\n* **scale\\_tips** (*bool*)\n* **kwargs** (*Any*)\nReturn type:\nSelf",
  "scraped_at": "2025-06-24T17:50:04.016968",
  "content_length": 10570,
  "domain": "docs.manim.community",
  "word_count": 946,
  "inspection_status": "approved",
  "filename": "Arrow - Manim Community v0.19.0_20250624_175004.json",
  "saved_at": "2025-06-24T17:50:04.017043",
  "approved_at": "2025-06-25T17:18:58.436419"
}