{
  "doc_id": "863a7757d95d299d5927c47a72c4a448",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.svg.brace.BraceBetweenPoints.html",
  "title": "BraceBetweenPoints - Manim Community v0.19.0",
  "content": "BraceBetweenPoints[¶](#bracebetweenpoints \"Link to this heading\")\n=================================================================\nQualified name: `manim.mobject.svg.brace.BraceBetweenPoints`\n*class* BraceBetweenPoints(*point\\_1*, *point\\_2*, *direction\\=array(\\[0\\., 0\\., 0\\.])*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/svg/brace.html#BraceBetweenPoints)[¶](#manim.mobject.svg.brace.BraceBetweenPoints \"Link to this definition\")\nBases: [`Brace`](manim.mobject.svg.brace.Brace.html#manim.mobject.svg.brace.Brace \"manim.mobject.svg.brace.Brace\")\nSimilar to Brace, but instead of taking a mobject it uses 2\npoints to place the brace.\nA fitting direction for the brace is\ncomputed, but it still can be manually overridden.\nIf the points go from left to right, the brace is drawn from below.\nSwapping the points places the brace on the opposite side.\nParameters:\n* **point\\_1** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*) – The first point.\n* **point\\_2** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*) – The second point.\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\") *\\|* *None*) – The direction from which the brace faces towards the points.\nExamples\nExample: BraceBPExample [¶](#bracebpexample)\n```\nfrom manim import *\nclass BraceBPExample(Scene):\n    def construct(self):\n        p1 = [0,0,0]\n        p2 = [1,2,0]\n        brace = BraceBetweenPoints(p1,p2)\n        self.play(Create(NumberPlane()))\n        self.play(Create(brace))\n        self.wait(2)\n```\n```\nclass BraceBPExample(Scene):\n    def construct(self):\n        p1 = [0,0,0]\n        p2 = [1,2,0]\n        brace = BraceBetweenPoints(p1,p2)\n        self.play(Create(NumberPlane()))\n        self.play(Create(brace))\n        self.wait(2)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*point\\_1*, *point\\_2*, *direction\\=array(\\[0\\., 0\\., 0\\.])*, *\\*\\*kwargs*)[¶](#manim.mobject.svg.brace.BraceBetweenPoints._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **point\\_1** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*)\n* **point\\_2** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\") *\\|* *None*)",
  "scraped_at": "2025-06-24T17:56:27.253926",
  "content_length": 2907,
  "domain": "docs.manim.community",
  "word_count": 281,
  "inspection_status": "approved",
  "filename": "BraceBetweenPoints - Manim Community v0.19.0_20250624_175627.json",
  "saved_at": "2025-06-24T17:56:27.254014",
  "approved_at": "2025-06-25T17:18:58.398806"
}