{
  "doc_id": "3c25cb3daddfddc068bfd4d642da8f02",
  "url": "https://docs.manim.community/en/latest/reference/manim.camera.camera.Camera.html",
  "title": "Camera - Manim Community v0.19.0",
  "content": "Camera[¶](#camera \"Link to this heading\")\n=========================================\nQualified name: `manim.camera.camera.Camera`\n*class* Camera(*background\\_image\\=None*, *frame\\_center\\=array(\\[0\\., 0\\., 0\\.])*, *image\\_mode\\='RGBA'*, *n\\_channels\\=4*, *pixel\\_array\\_dtype\\='uint8'*, *cairo\\_line\\_width\\_multiple\\=0\\.01*, *use\\_z\\_index\\=True*, *background\\=None*, *pixel\\_height\\=None*, *pixel\\_width\\=None*, *frame\\_height\\=None*, *frame\\_width\\=None*, *frame\\_rate\\=None*, *background\\_color\\=None*, *background\\_opacity\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/camera/camera.html#Camera)[¶](#manim.camera.camera.Camera \"Link to this definition\")\nBases: `object`\nBase camera class.\nThis is the object which takes care of what exactly is displayed\non screen at any given moment.\nParameters:\n* **background\\_image** (*str* *\\|* *None*) – The path to an image that should be the background image.\nIf not set, the background is filled with `self.background_color`\n* **background** (*np.ndarray* *\\|* *None*) – What `background` is set to. By default, `None`.\n* **pixel\\_height** (*int* *\\|* *None*) – The height of the scene in pixels.\n* **pixel\\_width** (*int* *\\|* *None*) – The width of the scene in pixels.\n* **kwargs** – Additional arguments (`background_color`, `background_opacity`)\nto be set.\n* **frame\\_center** (*np.ndarray*)\n* **image\\_mode** (*str*)\n* **n\\_channels** (*int*)\n* **pixel\\_array\\_dtype** (*str*)\n* **cairo\\_line\\_width\\_multiple** (*float*)\n* **use\\_z\\_index** (*bool*)\n* **frame\\_height** (*float* *\\|* *None*)\n* **frame\\_width** (*float* *\\|* *None*)\n* **frame\\_rate** (*float* *\\|* *None*)\n* **background\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **background\\_opacity** (*float* *\\|* *None*)\nMethods\n| [`adjust_out_of_range_points`](#manim.camera.camera.Camera.adjust_out_of_range_points \"manim.camera.camera.Camera.adjust_out_of_range_points\") | If any of the points in the passed array are out of the viable range, they are adjusted suitably. |\n| --- | --- |\n| [`adjusted_thickness`](#manim.camera.camera.Camera.adjusted_thickness \"manim.camera.camera.Camera.adjusted_thickness\") | Computes the adjusted stroke width for a zoomed camera. |\n| [`apply_fill`](#manim.camera.camera.Camera.apply_fill \"manim.camera.camera.Camera.apply_fill\") | Fills the cairo context |\n| [`apply_stroke`](#manim.camera.camera.Camera.apply_stroke \"manim.camera.camera.Camera.apply_stroke\") | Applies a stroke to the VMobject in the cairo context. |\n| [`cache_cairo_context`](#manim.camera.camera.Camera.cache_cairo_context \"manim.camera.camera.Camera.cache_cairo_context\") | Caches the passed Pixel array into a Cairo Context |\n| [`capture_mobject`](#manim.camera.camera.Camera.capture_mobject \"manim.camera.camera.Camera.capture_mobject\") | Capture mobjects by storing it in `pixel_array`. |\n| [`capture_mobjects`](#manim.camera.camera.Camera.capture_mobjects \"manim.camera.camera.Camera.capture_mobjects\") | Capture mobjects by printing them on `pixel_array`. |\n| [`convert_pixel_array`](#manim.camera.camera.Camera.convert_pixel_array \"manim.camera.camera.Camera.convert_pixel_array\") | Converts a pixel array from values that have floats in then to proper RGB values. |\n| [`display_image_mobject`](#manim.camera.camera.Camera.display_image_mobject \"manim.camera.camera.Camera.display_image_mobject\") | Displays an ImageMobject by changing the pixel\\_array suitably. |\n| [`display_multiple_background_colored_vmobjects`](#manim.camera.camera.Camera.display_multiple_background_colored_vmobjects \"manim.camera.camera.Camera.display_multiple_background_colored_vmobjects\") | Displays multiple vmobjects that have the same color as the background. |\n| [`display_multiple_image_mobjects`](#manim.camera.camera.Camera.display_multiple_image_mobjects \"manim.camera.camera.Camera.display_multiple_image_mobjects\") | Displays multiple image mobjects by modifying the passed pixel\\_array. |\n| [`display_multiple_non_background_colored_vmobjects`](#manim.camera.camera.Camera.display_multiple_non_background_colored_vmobjects \"manim.camera.camera.Camera.display_multiple_non_background_colored_vmobjects\") | Displays multiple VMobjects in the cairo context, as long as they don't have background colors. |\n| [`display_multiple_point_cloud_mobjects`](#manim.camera.camera.Camera.display_multiple_point_cloud_mobjects \"manim.camera.camera.Camera.display_multiple_point_cloud_mobjects\") | Displays multiple PMobjects by modifying the passed pixel array. |\n| [`display_multiple_vectorized_mobjects`](#manim.camera.camera.Camera.display_multiple_vectorized_mobjects \"manim.camera.camera.Camera.display_multiple_vectorized_mobjects\") | Displays multiple VMobjects in the pixel\\_array |\n| [`display_point_cloud`](#manim.camera.camera.Camera.display_point_cloud \"manim.camera.camera.Camera.display_point_cloud\") | Displays a PMobject by modifying the pixel array suitably. |\n| [`display_vectorized`](#manim.camera.camera.Camera.display_vectorized \"manim.camera.camera.Camera.display_vectorized\") | Displays a VMobject in the cairo context |\n| [`get_background_colored_vmobject_displayer`](#manim.camera.camera.Camera.get_background_colored_vmobject_displayer \"manim.camera.camera.Camera.get_background_colored_vmobject_displayer\") | Returns the background\\_colored\\_vmobject\\_displayer if it exists or makes one and returns it if not. |\n| [`get_cached_cairo_context`](#manim.camera.camera.Camera.get_cached_cairo_context \"manim.camera.camera.Camera.get_cached_cairo_context\") | Returns the cached cairo context of the passed pixel array if it exists, and None if it doesn't. |\n| [`get_cairo_context`](#manim.camera.camera.Camera.get_cairo_context \"manim.camera.camera.Camera.get_cairo_context\") | Returns the cairo context for a pixel array after caching it to self.pixel\\_array\\_to\\_cairo\\_context If that array has already been cached, it returns the cached version instead. |\n| [`get_coords_of_all_pixels`](#manim.camera.camera.Camera.get_coords_of_all_pixels \"manim.camera.camera.Camera.get_coords_of_all_pixels\") | Returns the cartesian coordinates of each pixel. |\n| [`get_fill_rgbas`](#manim.camera.camera.Camera.get_fill_rgbas \"manim.camera.camera.Camera.get_fill_rgbas\") | Returns the RGBA array of the fill of the passed VMobject |\n| [`get_image`](#manim.camera.camera.Camera.get_image \"manim.camera.camera.Camera.get_image\") | Returns an image from the passed pixel array, or from the current frame if the passed pixel array is none. |\n| [`get_mobjects_to_display`](#manim.camera.camera.Camera.get_mobjects_to_display \"manim.camera.camera.Camera.get_mobjects_to_display\") | Used to get the list of mobjects to display with the camera. |\n| [`get_stroke_rgbas`](#manim.camera.camera.Camera.get_stroke_rgbas \"manim.camera.camera.Camera.get_stroke_rgbas\") | Gets the RGBA array for the stroke of the passed VMobject. |\n| [`get_thickening_nudges`](#manim.camera.camera.Camera.get_thickening_nudges \"manim.camera.camera.Camera.get_thickening_nudges\") | Determine a list of vectors used to nudge two\\-dimensional pixel coordinates. |\n| [`init_background`](#manim.camera.camera.Camera.init_background \"manim.camera.camera.Camera.init_background\") | Initialize the background. |\n| [`is_in_frame`](#manim.camera.camera.Camera.is_in_frame \"manim.camera.camera.Camera.is_in_frame\") | Checks whether the passed mobject is in frame or not. |\n| [`make_background_from_func`](#manim.camera.camera.Camera.make_background_from_func \"manim.camera.camera.Camera.make_background_from_func\") | Makes a pixel array for the background by using coords\\_to\\_colors\\_func to determine each pixel's color. |\n| [`on_screen_pixels`](#manim.camera.camera.Camera.on_screen_pixels \"manim.camera.camera.Camera.on_screen_pixels\") | Returns array of pixels that are on the screen from a given array of pixel\\_coordinates |\n| [`overlay_PIL_image`](#manim.camera.camera.Camera.overlay_PIL_image \"manim.camera.camera.Camera.overlay_PIL_image\") | Overlays a PIL image on the passed pixel array. |\n| [`overlay_rgba_array`](#manim.camera.camera.Camera.overlay_rgba_array \"manim.camera.camera.Camera.overlay_rgba_array\") | Overlays an RGBA array on top of the given Pixel array. |\n| `points_to_pixel_coords` |  |\n| [`reset`](#manim.camera.camera.Camera.reset \"manim.camera.camera.Camera.reset\") | Resets the camera's pixel array to that of the background |\n| [`reset_pixel_shape`](#manim.camera.camera.Camera.reset_pixel_shape \"manim.camera.camera.Camera.reset_pixel_shape\") | This method resets the height and width of a single pixel to the passed new\\_height and new\\_width. |\n| [`resize_frame_shape`](#manim.camera.camera.Camera.resize_frame_shape \"manim.camera.camera.Camera.resize_frame_shape\") | Changes frame\\_shape to match the aspect ratio of the pixels, where fixed\\_dimension determines whether frame\\_height or frame\\_width remains fixed while the other changes accordingly. |\n| [`set_background`](#manim.camera.camera.Camera.set_background \"manim.camera.camera.Camera.set_background\") | Sets the background to the passed pixel\\_array after converting to valid RGB values. |\n| [`set_background_from_func`](#manim.camera.camera.Camera.set_background_from_func \"manim.camera.camera.Camera.set_background_from_func\") | Sets the background to a pixel array using coords\\_to\\_colors\\_func to determine each pixel's color. |\n| [`set_cairo_context_color`](#manim.camera.camera.Camera.set_cairo_context_color \"manim.camera.camera.Camera.set_cairo_context_color\") | Sets the color of the cairo context |\n| [`set_cairo_context_path`](#manim.camera.camera.Camera.set_cairo_context_path \"manim.camera.camera.Camera.set_cairo_context_path\") | Sets a path for the cairo context with the vmobject passed |\n| `set_frame_to_background` |  |\n| [`set_pixel_array`](#manim.camera.camera.Camera.set_pixel_array \"manim.camera.camera.Camera.set_pixel_array\") | Sets the pixel array of the camera to the passed pixel array. |\n| [`thickened_coordinates`](#manim.camera.camera.Camera.thickened_coordinates \"manim.camera.camera.Camera.thickened_coordinates\") | Returns thickened coordinates for a passed array of pixel coords and a thickness to thicken by. |\n| `transform_points_pre_display` |  |\n| [`type_or_raise`](#manim.camera.camera.Camera.type_or_raise \"manim.camera.camera.Camera.type_or_raise\") | Return the type of mobject, if it is a type that can be rendered. |\nAttributes\n| `background_color` |  |\n| --- | --- |\n| `background_opacity` |  |\nadjust\\_out\\_of\\_range\\_points(*points*)[\\[source]](../_modules/manim/camera/camera.html#Camera.adjust_out_of_range_points)[¶](#manim.camera.camera.Camera.adjust_out_of_range_points \"Link to this definition\")\nIf any of the points in the passed array are out of\nthe viable range, they are adjusted suitably.\nParameters:\n**points** (*ndarray*) – The points to adjust\nReturns:\nThe adjusted points.\nReturn type:\nnp.array\nadjusted\\_thickness(*thickness*)[\\[source]](../_modules/manim/camera/camera.html#Camera.adjusted_thickness)[¶](#manim.camera.camera.Camera.adjusted_thickness \"Link to this definition\")\nComputes the adjusted stroke width for a zoomed camera.\nParameters:\n**thickness** (*float*) – The stroke width of a mobject.\nReturns:\nThe adjusted stroke width that reflects zooming in with\nthe camera.\nReturn type:\nfloat\napply\\_fill(*ctx*, *vmobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.apply_fill)[¶](#manim.camera.camera.Camera.apply_fill \"Link to this definition\")\nFills the cairo context\nParameters:\n* **ctx** (*Context*) – The cairo context\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject\nReturns:\nThe camera object.\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\napply\\_stroke(*ctx*, *vmobject*, *background\\=False*)[\\[source]](../_modules/manim/camera/camera.html#Camera.apply_stroke)[¶](#manim.camera.camera.Camera.apply_stroke \"Link to this definition\")\nApplies a stroke to the VMobject in the cairo context.\nParameters:\n* **ctx** (*Context*) – The cairo context\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject\n* **background** (*bool*) – Whether or not to consider the background when applying this\nstroke width, by default False\nReturns:\nThe camera object with the stroke applied.\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\ncache\\_cairo\\_context(*pixel\\_array*, *ctx*)[\\[source]](../_modules/manim/camera/camera.html#Camera.cache_cairo_context)[¶](#manim.camera.camera.Camera.cache_cairo_context \"Link to this definition\")\nCaches the passed Pixel array into a Cairo Context\nParameters:\n* **pixel\\_array** (*ndarray*) – The pixel array to cache\n* **ctx** (*Context*) – The context to cache it into.\ncapture\\_mobject(*mobject*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/camera/camera.html#Camera.capture_mobject)[¶](#manim.camera.camera.Camera.capture_mobject \"Link to this definition\")\nCapture mobjects by storing it in `pixel_array`.\nThis is a single\\-mobject version of [`capture_mobjects()`](#manim.camera.camera.Camera.capture_mobjects \"manim.camera.camera.Camera.capture_mobjects\").\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – Mobject to capture.\n* **kwargs** (*Any*) – Keyword arguments to be passed to [`get_mobjects_to_display()`](#manim.camera.camera.Camera.get_mobjects_to_display \"manim.camera.camera.Camera.get_mobjects_to_display\").\ncapture\\_mobjects(*mobjects*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/camera/camera.html#Camera.capture_mobjects)[¶](#manim.camera.camera.Camera.capture_mobjects \"Link to this definition\")\nCapture mobjects by printing them on `pixel_array`.\nThis is the essential function that converts the contents of a Scene\ninto an array, which is then converted to an image or video.\nParameters:\n* **mobjects** (*Iterable**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – Mobjects to capture.\n* **kwargs** – Keyword arguments to be passed to [`get_mobjects_to_display()`](#manim.camera.camera.Camera.get_mobjects_to_display \"manim.camera.camera.Camera.get_mobjects_to_display\").\nNotes\nFor a list of classes that can currently be rendered, see `display_funcs()`.\nconvert\\_pixel\\_array(*pixel\\_array*, *convert\\_from\\_floats\\=False*)[\\[source]](../_modules/manim/camera/camera.html#Camera.convert_pixel_array)[¶](#manim.camera.camera.Camera.convert_pixel_array \"Link to this definition\")\nConverts a pixel array from values that have floats in then\nto proper RGB values.\nParameters:\n* **pixel\\_array** (*ndarray* *\\|* *list* *\\|* *tuple*) – Pixel array to convert.\n* **convert\\_from\\_floats** (*bool*) – Whether or not to convert float values to ints, by default False\nReturns:\nThe new, converted pixel array.\nReturn type:\nnp.array\ndisplay\\_image\\_mobject(*image\\_mobject*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_image_mobject)[¶](#manim.camera.camera.Camera.display_image_mobject \"Link to this definition\")\nDisplays an ImageMobject by changing the pixel\\_array suitably.\nParameters:\n* **image\\_mobject** ([*AbstractImageMobject*](manim.mobject.types.image_mobject.AbstractImageMobject.html#manim.mobject.types.image_mobject.AbstractImageMobject \"manim.mobject.types.image_mobject.AbstractImageMobject\")) – The imageMobject to display\n* **pixel\\_array** (*ndarray*) – The Pixel array to put the imagemobject in.\ndisplay\\_multiple\\_background\\_colored\\_vmobjects(*cvmobjects*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_multiple_background_colored_vmobjects)[¶](#manim.camera.camera.Camera.display_multiple_background_colored_vmobjects \"Link to this definition\")\nDisplays multiple vmobjects that have the same color as the background.\nParameters:\n* **cvmobjects** (*list*) – List of Colored VMobjects\n* **pixel\\_array** (*ndarray*) – The pixel array.\nReturns:\nThe camera object.\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\ndisplay\\_multiple\\_image\\_mobjects(*image\\_mobjects*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_multiple_image_mobjects)[¶](#manim.camera.camera.Camera.display_multiple_image_mobjects \"Link to this definition\")\nDisplays multiple image mobjects by modifying the passed pixel\\_array.\nParameters:\n* **image\\_mobjects** (*list*) – list of ImageMobjects\n* **pixel\\_array** (*ndarray*) – The pixel array to modify.\ndisplay\\_multiple\\_non\\_background\\_colored\\_vmobjects(*vmobjects*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_multiple_non_background_colored_vmobjects)[¶](#manim.camera.camera.Camera.display_multiple_non_background_colored_vmobjects \"Link to this definition\")\nDisplays multiple VMobjects in the cairo context, as long as they don’t have\nbackground colors.\nParameters:\n* **vmobjects** (*list*) – list of the VMobjects\n* **pixel\\_array** (*ndarray*) – The Pixel array to add the VMobjects to.\ndisplay\\_multiple\\_point\\_cloud\\_mobjects(*pmobjects*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_multiple_point_cloud_mobjects)[¶](#manim.camera.camera.Camera.display_multiple_point_cloud_mobjects \"Link to this definition\")\nDisplays multiple PMobjects by modifying the passed pixel array.\nParameters:\n* **pmobjects** (*list*) – List of PMobjects\n* **pixel\\_array** (*ndarray*) – The pixel array to modify.\ndisplay\\_multiple\\_vectorized\\_mobjects(*vmobjects*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_multiple_vectorized_mobjects)[¶](#manim.camera.camera.Camera.display_multiple_vectorized_mobjects \"Link to this definition\")\nDisplays multiple VMobjects in the pixel\\_array\nParameters:\n* **vmobjects** (*list*) – list of VMobjects to display\n* **pixel\\_array** (*ndarray*) – The pixel array\ndisplay\\_point\\_cloud(*pmobject*, *points*, *rgbas*, *thickness*, *pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_point_cloud)[¶](#manim.camera.camera.Camera.display_point_cloud \"Link to this definition\")\nDisplays a PMobject by modifying the pixel array suitably.\nTODO: Write a description for the rgbas argument.\nParameters:\n* **pmobject** ([*PMobject*](manim.mobject.types.point_cloud_mobject.PMobject.html#manim.mobject.types.point_cloud_mobject.PMobject \"manim.mobject.types.point_cloud_mobject.PMobject\")) – Point Cloud Mobject\n* **points** (*list*) – The points to display in the point cloud mobject\n* **rgbas** (*ndarray*)\n* **thickness** (*float*) – The thickness of each point of the PMobject\n* **pixel\\_array** (*ndarray*) – The pixel array to modify.\ndisplay\\_vectorized(*vmobject*, *ctx*)[\\[source]](../_modules/manim/camera/camera.html#Camera.display_vectorized)[¶](#manim.camera.camera.Camera.display_vectorized \"Link to this definition\")\nDisplays a VMobject in the cairo context\nParameters:\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The Vectorized Mobject to display\n* **ctx** (*Context*) – The cairo context to use.\nReturns:\nThe camera object\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\nget\\_background\\_colored\\_vmobject\\_displayer()[\\[source]](../_modules/manim/camera/camera.html#Camera.get_background_colored_vmobject_displayer)[¶](#manim.camera.camera.Camera.get_background_colored_vmobject_displayer \"Link to this definition\")\nReturns the background\\_colored\\_vmobject\\_displayer\nif it exists or makes one and returns it if not.\nReturns:\nObject that displays VMobjects that have the same color\nas the background.\nReturn type:\nBackGroundColoredVMobjectDisplayer\nget\\_cached\\_cairo\\_context(*pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_cached_cairo_context)[¶](#manim.camera.camera.Camera.get_cached_cairo_context \"Link to this definition\")\nReturns the cached cairo context of the passed\npixel array if it exists, and None if it doesn’t.\nParameters:\n**pixel\\_array** (*ndarray*) – The pixel array to check.\nReturns:\nThe cached cairo context.\nReturn type:\ncairo.Context\nget\\_cairo\\_context(*pixel\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_cairo_context)[¶](#manim.camera.camera.Camera.get_cairo_context \"Link to this definition\")\nReturns the cairo context for a pixel array after\ncaching it to self.pixel\\_array\\_to\\_cairo\\_context\nIf that array has already been cached, it returns the\ncached version instead.\nParameters:\n**pixel\\_array** (*ndarray*) – The Pixel array to get the cairo context of.\nReturns:\nThe cairo context of the pixel array.\nReturn type:\ncairo.Context\nget\\_coords\\_of\\_all\\_pixels()[\\[source]](../_modules/manim/camera/camera.html#Camera.get_coords_of_all_pixels)[¶](#manim.camera.camera.Camera.get_coords_of_all_pixels \"Link to this definition\")\nReturns the cartesian coordinates of each pixel.\nReturns:\nThe array of cartesian coordinates.\nReturn type:\nnp.ndarray\nget\\_fill\\_rgbas(*vmobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_fill_rgbas)[¶](#manim.camera.camera.Camera.get_fill_rgbas \"Link to this definition\")\nReturns the RGBA array of the fill of the passed VMobject\nParameters:\n**vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject\nReturns:\nThe RGBA Array of the fill of the VMobject\nReturn type:\nnp.array\nget\\_image(*pixel\\_array\\=None*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_image)[¶](#manim.camera.camera.Camera.get_image \"Link to this definition\")\nReturns an image from the passed\npixel array, or from the current frame\nif the passed pixel array is none.\nParameters:\n**pixel\\_array** (*ndarray* *\\|* *list* *\\|* *tuple* *\\|* *None*) – The pixel array from which to get an image, by default None\nReturns:\nThe PIL image of the array.\nReturn type:\nPIL.Image\nget\\_mobjects\\_to\\_display(*mobjects*, *include\\_submobjects\\=True*, *excluded\\_mobjects\\=None*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_mobjects_to_display)[¶](#manim.camera.camera.Camera.get_mobjects_to_display \"Link to this definition\")\nUsed to get the list of mobjects to display\nwith the camera.\nParameters:\n* **mobjects** (*Iterable**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The Mobjects\n* **include\\_submobjects** (*bool*) – Whether or not to include the submobjects of mobjects, by default True\n* **excluded\\_mobjects** (*list* *\\|* *None*) – Any mobjects to exclude, by default None\nReturns:\nlist of mobjects\nReturn type:\nlist\nget\\_stroke\\_rgbas(*vmobject*, *background\\=False*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_stroke_rgbas)[¶](#manim.camera.camera.Camera.get_stroke_rgbas \"Link to this definition\")\nGets the RGBA array for the stroke of the passed\nVMobject.\nParameters:\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject\n* **background** (*bool*) – Whether or not to consider the background when getting the stroke\nRGBAs, by default False\nReturns:\nThe RGBA array of the stroke.\nReturn type:\nnp.ndarray\nget\\_thickening\\_nudges(*thickness*)[\\[source]](../_modules/manim/camera/camera.html#Camera.get_thickening_nudges)[¶](#manim.camera.camera.Camera.get_thickening_nudges \"Link to this definition\")\nDetermine a list of vectors used to nudge\ntwo\\-dimensional pixel coordinates.\nParameters:\n**thickness** (*float*)\nReturn type:\nnp.array\ninit\\_background()[\\[source]](../_modules/manim/camera/camera.html#Camera.init_background)[¶](#manim.camera.camera.Camera.init_background \"Link to this definition\")\nInitialize the background.\nIf self.background\\_image is the path of an image\nthe image is set as background; else, the default\nbackground color fills the background.\nis\\_in\\_frame(*mobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.is_in_frame)[¶](#manim.camera.camera.Camera.is_in_frame \"Link to this definition\")\nChecks whether the passed mobject is in\nframe or not.\nParameters:\n**mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject for which the checking needs to be done.\nReturns:\nTrue if in frame, False otherwise.\nReturn type:\nbool\nmake\\_background\\_from\\_func(*coords\\_to\\_colors\\_func*)[\\[source]](../_modules/manim/camera/camera.html#Camera.make_background_from_func)[¶](#manim.camera.camera.Camera.make_background_from_func \"Link to this definition\")\nMakes a pixel array for the background by using coords\\_to\\_colors\\_func to determine each pixel’s color. Each input\npixel’s color. Each input to coords\\_to\\_colors\\_func is an (x, y) pair in space (in ordinary space coordinates; not\npixel coordinates), and each output is expected to be an RGBA array of 4 floats.\nParameters:\n**coords\\_to\\_colors\\_func** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function whose input is an (x,y) pair of coordinates and\nwhose return values must be the colors for that point\nReturns:\nThe pixel array which can then be passed to set\\_background.\nReturn type:\nnp.array\non\\_screen\\_pixels(*pixel\\_coords*)[\\[source]](../_modules/manim/camera/camera.html#Camera.on_screen_pixels)[¶](#manim.camera.camera.Camera.on_screen_pixels \"Link to this definition\")\nReturns array of pixels that are on the screen from a given\narray of pixel\\_coordinates\nParameters:\n**pixel\\_coords** (*ndarray*) – The pixel coords to check.\nReturns:\nThe pixel coords on screen.\nReturn type:\nnp.array\noverlay\\_PIL\\_image(*pixel\\_array*, *image*)[\\[source]](../_modules/manim/camera/camera.html#Camera.overlay_PIL_image)[¶](#manim.camera.camera.Camera.overlay_PIL_image \"Link to this definition\")\nOverlays a PIL image on the passed pixel array.\nParameters:\n* **pixel\\_array** (*ndarray*) – The Pixel array\n* **image** (*\\<module 'PIL.Image' from '/home/docs/checkouts/readthedocs.org/user\\_builds/manimce/envs/latest/lib/python3\\.13/site\\-packages/PIL/Image.py'\\>*) – The Image to overlay.\noverlay\\_rgba\\_array(*pixel\\_array*, *new\\_array*)[\\[source]](../_modules/manim/camera/camera.html#Camera.overlay_rgba_array)[¶](#manim.camera.camera.Camera.overlay_rgba_array \"Link to this definition\")\nOverlays an RGBA array on top of the given Pixel array.\nParameters:\n* **pixel\\_array** (*ndarray*) – The original pixel array to modify.\n* **new\\_array** (*ndarray*) – The new pixel array to overlay.\nreset()[\\[source]](../_modules/manim/camera/camera.html#Camera.reset)[¶](#manim.camera.camera.Camera.reset \"Link to this definition\")\nResets the camera’s pixel array\nto that of the background\nReturns:\nThe camera object after setting the pixel array.\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\nreset\\_pixel\\_shape(*new\\_height*, *new\\_width*)[\\[source]](../_modules/manim/camera/camera.html#Camera.reset_pixel_shape)[¶](#manim.camera.camera.Camera.reset_pixel_shape \"Link to this definition\")\nThis method resets the height and width\nof a single pixel to the passed new\\_height and new\\_width.\nParameters:\n* **new\\_height** (*float*) – The new height of the entire scene in pixels\n* **new\\_width** (*float*) – The new width of the entire scene in pixels\nresize\\_frame\\_shape(*fixed\\_dimension\\=0*)[\\[source]](../_modules/manim/camera/camera.html#Camera.resize_frame_shape)[¶](#manim.camera.camera.Camera.resize_frame_shape \"Link to this definition\")\nChanges frame\\_shape to match the aspect ratio\nof the pixels, where fixed\\_dimension determines\nwhether frame\\_height or frame\\_width\nremains fixed while the other changes accordingly.\nParameters:\n**fixed\\_dimension** (*int*) – If 0, height is scaled with respect to width\nelse, width is scaled with respect to height.\nset\\_background(*pixel\\_array*, *convert\\_from\\_floats\\=False*)[\\[source]](../_modules/manim/camera/camera.html#Camera.set_background)[¶](#manim.camera.camera.Camera.set_background \"Link to this definition\")\nSets the background to the passed pixel\\_array after converting\nto valid RGB values.\nParameters:\n* **pixel\\_array** (*ndarray* *\\|* *list* *\\|* *tuple*) – The pixel array to set the background to.\n* **convert\\_from\\_floats** (*bool*) – Whether or not to convert floats values to proper RGB valid ones, by default False\nset\\_background\\_from\\_func(*coords\\_to\\_colors\\_func*)[\\[source]](../_modules/manim/camera/camera.html#Camera.set_background_from_func)[¶](#manim.camera.camera.Camera.set_background_from_func \"Link to this definition\")\nSets the background to a pixel array using coords\\_to\\_colors\\_func to determine each pixel’s color. Each input\npixel’s color. Each input to coords\\_to\\_colors\\_func is an (x, y) pair in space (in ordinary space coordinates; not\npixel coordinates), and each output is expected to be an RGBA array of 4 floats.\nParameters:\n**coords\\_to\\_colors\\_func** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function whose input is an (x,y) pair of coordinates and\nwhose return values must be the colors for that point\nset\\_cairo\\_context\\_color(*ctx*, *rgbas*, *vmobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.set_cairo_context_color)[¶](#manim.camera.camera.Camera.set_cairo_context_color \"Link to this definition\")\nSets the color of the cairo context\nParameters:\n* **ctx** (*Context*) – The cairo context\n* **rgbas** (*ndarray*) – The RGBA array with which to color the context.\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject with which to set the color.\nReturns:\nThe camera object\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\nset\\_cairo\\_context\\_path(*ctx*, *vmobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.set_cairo_context_path)[¶](#manim.camera.camera.Camera.set_cairo_context_path \"Link to this definition\")\nSets a path for the cairo context with the vmobject passed\nParameters:\n* **ctx** (*Context*) – The cairo context\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject\nReturns:\nCamera object after setting cairo\\_context\\_path\nReturn type:\n[Camera](#manim.camera.camera.Camera \"manim.camera.camera.Camera\")\nset\\_pixel\\_array(*pixel\\_array*, *convert\\_from\\_floats\\=False*)[\\[source]](../_modules/manim/camera/camera.html#Camera.set_pixel_array)[¶](#manim.camera.camera.Camera.set_pixel_array \"Link to this definition\")\nSets the pixel array of the camera to the passed pixel array.\nParameters:\n* **pixel\\_array** (*ndarray* *\\|* *list* *\\|* *tuple*) – The pixel array to convert and then set as the camera’s pixel array.\n* **convert\\_from\\_floats** (*bool*) – Whether or not to convert float values to proper RGB values, by default False\nthickened\\_coordinates(*pixel\\_coords*, *thickness*)[\\[source]](../_modules/manim/camera/camera.html#Camera.thickened_coordinates)[¶](#manim.camera.camera.Camera.thickened_coordinates \"Link to this definition\")\nReturns thickened coordinates for a passed array of pixel coords and\na thickness to thicken by.\nParameters:\n* **pixel\\_coords** (*ndarray*) – Pixel coordinates\n* **thickness** (*float*) – Thickness\nReturns:\nArray of thickened pixel coords.\nReturn type:\nnp.array\ntype\\_or\\_raise(*mobject*)[\\[source]](../_modules/manim/camera/camera.html#Camera.type_or_raise)[¶](#manim.camera.camera.Camera.type_or_raise \"Link to this definition\")\nReturn the type of mobject, if it is a type that can be rendered.\nIf mobject is an instance of a class that inherits from a class that\ncan be rendered, return the super class. For example, an instance of a\nSquare is also an instance of VMobject, and these can be rendered.\nTherefore, type\\_or\\_raise(Square()) returns True.\nParameters:\n**mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The object to take the type of.\nNotes\nFor a list of classes that can currently be rendered, see `display_funcs()`.\nReturns:\nThe type of mobjects, if it can be rendered.\nReturn type:\nType\\[[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nRaises:\n**TypeError** – When mobject is not an instance of a class that can be rendered.\nParameters:\n**mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))",
  "scraped_at": "2025-06-24T17:44:42.702280",
  "content_length": 33098,
  "domain": "docs.manim.community",
  "word_count": 2844,
  "inspection_status": "approved",
  "filename": "Camera - Manim Community v0.19.0_20250624_174442.json",
  "saved_at": "2025-06-24T17:44:42.702416",
  "approved_at": "2025-06-25T17:18:58.367162"
}