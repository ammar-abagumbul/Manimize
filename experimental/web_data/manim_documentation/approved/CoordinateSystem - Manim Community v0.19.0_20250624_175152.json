{
  "doc_id": "ad2f62e1d522c2b373cfb5647a6bd386",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.coordinate_systems.CoordinateSystem.html",
  "title": "CoordinateSystem - Manim Community v0.19.0",
  "content": "CoordinateSystem[¶](#coordinatesystem \"Link to this heading\")\n=============================================================\nQualified name: `manim.mobject.graphing.coordinate\\_systems.CoordinateSystem`\n*class* CoordinateSystem(*x\\_range\\=None*, *y\\_range\\=None*, *x\\_length\\=None*, *y\\_length\\=None*, *dimension\\=2*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem \"Link to this definition\")\nBases: `object`\nAbstract base class for Axes and NumberPlane.\nExamples\nExample: CoordSysExample [¶](#coordsysexample)\n![../_images/CoordSysExample-1.png](../_images/CoordSysExample-1.png)\n```\nfrom manim import *\nclass CoordSysExample(Scene):\n    def construct(self):\n        # the location of the ticks depends on the x_range and y_range.\n        grid = Axes(\n            x_range=[0, 1, 0.05],  # step size determines num_decimal_places.\n            y_range=[0, 1, 0.05],\n            x_length=9,\n            y_length=5.5,\n            axis_config={\n                \"numbers_to_include\": np.arange(0, 1 + 0.1, 0.1),\n                \"font_size\": 24,\n            },\n            tips=False,\n        )\n        # Labels for the x-axis and y-axis.\n        y_label = grid.get_y_axis_label(\"y\", edge=LEFT, direction=LEFT, buff=0.4)\n        x_label = grid.get_x_axis_label(\"x\")\n        grid_labels = VGroup(x_label, y_label)\n        graphs = VGroup()\n        for n in np.arange(1, 20 + 0.5, 0.5):\n            graphs += grid.plot(lambda x: x ** n, color=WHITE)\n            graphs += grid.plot(\n                lambda x: x ** (1 / n), color=WHITE, use_smoothing=False\n            )\n        # Extra lines and labels for point (1,1)\n        graphs += grid.get_horizontal_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += grid.get_vertical_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += Dot(point=grid @ (1, 1, 0), color=YELLOW)\n        graphs += Tex(\"(1,1)\").scale(0.75).next_to(grid @ (1, 1, 0))\n        title = Title(\n            # spaces between braces to prevent SyntaxError\n            r\"Graphs of $y=x^{ {1}\\over{n} }$ and $y=x^n (n=1,2,3,...,20)$\",\n            include_underline=False,\n            font_size=40,\n        )\n        self.add(title, graphs, grid, grid_labels)\n```\n```\nclass CoordSysExample(Scene):\n    def construct(self):\n        # the location of the ticks depends on the x_range and y_range.\n        grid = Axes(\n            x_range=[0, 1, 0.05],  # step size determines num_decimal_places.\n            y_range=[0, 1, 0.05],\n            x_length=9,\n            y_length=5.5,\n            axis_config={\n                \"numbers_to_include\": np.arange(0, 1 + 0.1, 0.1),\n                \"font_size\": 24,\n            },\n            tips=False,\n        )\n        # Labels for the x-axis and y-axis.\n        y_label = grid.get_y_axis_label(\"y\", edge=LEFT, direction=LEFT, buff=0.4)\n        x_label = grid.get_x_axis_label(\"x\")\n        grid_labels = VGroup(x_label, y_label)\n        graphs = VGroup()\n        for n in np.arange(1, 20 + 0.5, 0.5):\n            graphs += grid.plot(lambda x: x ** n, color=WHITE)\n            graphs += grid.plot(\n                lambda x: x ** (1 / n), color=WHITE, use_smoothing=False\n            )\n        # Extra lines and labels for point (1,1)\n        graphs += grid.get_horizontal_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += grid.get_vertical_line(grid @ (1, 1, 0), color=BLUE)\n        graphs += Dot(point=grid @ (1, 1, 0), color=YELLOW)\n        graphs += Tex(\"(1,1)\").scale(0.75).next_to(grid @ (1, 1, 0))\n        title = Title(\n            # spaces between braces to prevent SyntaxError\n            r\"Graphs of $y=x^{ {1}\\over{n} }$ and $y=x^n (n=1,2,3,...,20)$\",\n            include_underline=False,\n            font_size=40,\n        )\n        self.add(title, graphs, grid, grid_labels)\n```\nMethods\n| [`add_coordinates`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.add_coordinates \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.add_coordinates\") | Adds labels to the axes. |\n| --- | --- |\n| [`angle_of_tangent`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.angle_of_tangent \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.angle_of_tangent\") | Returns the angle to the x\\-axis of the tangent to the plotted curve at a particular x\\-value. |\n| [`c2p`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.c2p \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.c2p\") | Abbreviation for `coords_to_point()` |\n| `coords_to_point` |  |\n| [`get_T_label`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_T_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_T_label\") | Creates a labelled triangle marker with a vertical line from the x\\-axis to a curve at a given x\\-value. |\n| [`get_area`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_area \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_area\") | Returns a [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\") representing the area under the graph passed. |\n| `get_axes` |  |\n| `get_axis` |  |\n| `get_axis_labels` |  |\n| [`get_graph_label`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_graph_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_graph_label\") | Creates a properly positioned label for the passed graph, with an optional dot. |\n| [`get_horizontal_line`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line\") | A horizontal line from the y\\-axis to a given point in the scene. |\n| [`get_line_from_axis_to_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point\") | Returns a straight line from a given axis to a point in the scene. |\n| [`get_lines_to_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_lines_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_lines_to_point\") | Generate both horizontal and vertical lines from the axis to a point. |\n| [`get_origin`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_origin \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_origin\") | Gets the origin of [`Axes`](manim.mobject.graphing.coordinate_systems.Axes.html#manim.mobject.graphing.coordinate_systems.Axes \"manim.mobject.graphing.coordinate_systems.Axes\"). |\n| [`get_riemann_rectangles`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_riemann_rectangles \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_riemann_rectangles\") | Generates a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the Riemann Rectangles for a given curve. |\n| [`get_secant_slope_group`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_secant_slope_group \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_secant_slope_group\") | Creates two lines representing dx and df, the labels for dx and df, and |\n| [`get_vertical_line`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line\") | A vertical line from the x\\-axis to a given point in the scene. |\n| [`get_vertical_lines_to_graph`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_lines_to_graph \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_lines_to_graph\") | Obtains multiple lines from the x\\-axis to the curve. |\n| `get_x_axis` |  |\n| [`get_x_axis_label`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label\") | Generate an x\\-axis label. |\n| `get_x_unit_size` |  |\n| `get_y_axis` |  |\n| [`get_y_axis_label`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label\") | Generate a y\\-axis label. |\n| `get_y_unit_size` |  |\n| `get_z_axis` |  |\n| [`i2gc`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gc \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gc\") | Alias for [`input_to_graph_coords()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords\"). |\n| [`i2gp`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gp \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gp\") | Alias for [`input_to_graph_point()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point\"). |\n| [`input_to_graph_coords`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords\") | Returns a tuple of the axis relative coordinates of the point on the graph based on the x\\-value given. |\n| [`input_to_graph_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point\") | Returns the coordinates of the point on a `graph` corresponding to an `x` value. |\n| [`p2c`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.p2c \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.p2c\") | Abbreviation for `point_to_coords()` |\n| [`plot`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot\") | Generates a curve based on a function. |\n| [`plot_antiderivative_graph`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_antiderivative_graph \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_antiderivative_graph\") | Plots an antiderivative graph. |\n| [`plot_derivative_graph`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_derivative_graph \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_derivative_graph\") | Returns the curve of the derivative of the passed graph. |\n| [`plot_implicit_curve`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_implicit_curve \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_implicit_curve\") | Creates the curves of an implicit function. |\n| [`plot_parametric_curve`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_parametric_curve \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_parametric_curve\") | A parametric curve. |\n| [`plot_polar_graph`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_polar_graph \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_polar_graph\") | A polar graph. |\n| [`plot_surface`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_surface \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_surface\") | Generates a surface based on a function. |\n| `point_to_coords` |  |\n| [`point_to_polar`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar\") | Gets polar coordinates from a point. |\n| [`polar_to_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point\") | Gets a point from polar coordinates. |\n| [`pr2pt`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.pr2pt \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.pr2pt\") | Abbreviation for [`polar_to_point()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point\") |\n| [`pt2pr`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.pt2pr \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.pt2pr\") | Abbreviation for [`point_to_polar()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar\") |\n| [`slope_of_tangent`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.slope_of_tangent \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.slope_of_tangent\") | Returns the slope of the tangent to the plotted curve at a particular x\\-value. |\nParameters:\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*)\n* **y\\_range** (*Sequence**\\[**float**]* *\\|* *None*)\n* **x\\_length** (*float* *\\|* *None*)\n* **y\\_length** (*float* *\\|* *None*)\n* **dimension** (*int*)\n\\_get\\_axis\\_label(*label*, *axis*, *edge*, *direction*, *buff\\=0\\.1*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem._get_axis_label)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem._get_axis_label \"Link to this definition\")\nGets the label for an axis.\nParameters:\n* **label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **axis** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The axis to which the label will be added.\n* **edge** (*Sequence**\\[**float**]*) – The edge of the axes to which the label will be added. `RIGHT` adds to the right side of the axis\n* **direction** (*Sequence**\\[**float**]*) – Allows for further positioning of the label.\n* **buff** (*float*) – The distance of the label from the line.\nReturns:\nThe positioned label along the given axis.\nReturn type:\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nadd\\_coordinates(*\\*axes\\_numbers*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.add_coordinates)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.add_coordinates \"Link to this definition\")\nAdds labels to the axes. Use `Axes.coordinate_labels` to\naccess the coordinates after creation.\nParameters:\n* **axes\\_numbers** (*Iterable**\\[**float**]* *\\|* *None* *\\|* *dict**\\[**float**,* *str* *\\|* *float* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The numbers to be added to the axes. Use `None` to represent an axis with default labels.\n* **kwargs** (*Any*)\nReturn type:\n*Self*\nExamples\n```\nax = ThreeDAxes()\nx_labels = range(-4, 5)\nz_labels = range(-4, 4, 2)\nax.add_coordinates(\n    x_labels, None, z_labels\n)  # default y labels, custom x & z labels\nax.add_coordinates(x_labels)  # only x labels\n```\nYou can also specifically control the position and value of the labels using a dict.\n```\nax = Axes(x_range=[0, 7])\nx_pos = [x for x in range(1, 8)]\n# strings are automatically converted into a Tex mobject.\nx_vals = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n]\nx_dict = dict(zip(x_pos, x_vals))\nax.add_coordinates(x_dict)\n```\nangle\\_of\\_tangent(*x*, *graph*, *dx\\=1e\\-08*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.angle_of_tangent)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.angle_of_tangent \"Link to this definition\")\nReturns the angle to the x\\-axis of the tangent\nto the plotted curve at a particular x\\-value.\nParameters:\n* **x** (*float*) – The x\\-value at which the tangent must touch the curve.\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") for which to calculate the tangent.\n* **dx** (*float*) – The change in x used to determine the angle of the tangent to the curve.\nReturns:\nThe angle of the tangent to the curve.\nReturn type:\n`float`\nExamples\n```\nax = Axes()\ncurve = ax.plot(lambda x: x**2)\nax.angle_of_tangent(x=3, graph=curve)\n# 1.4056476493802699\n```\nc2p(*\\*coords*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.c2p)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.c2p \"Link to this definition\")\nAbbreviation for `coords_to_point()`\nParameters:\n**coords** (*float* *\\|* *Sequence**\\[**float**]* *\\|* *Sequence**\\[**Sequence**\\[**float**]**]* *\\|* *ndarray*)\nReturn type:\n*ndarray*\nget\\_T\\_label(*x\\_val*, *graph*, *label\\=None*, *label\\_color\\=None*, *triangle\\_size\\=0\\.25*, *triangle\\_color\\=ManimColor('\\#FFFFFF')*, *line\\_func\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *line\\_color\\=ManimColor('\\#FFFF00')*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_T_label)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_T_label \"Link to this definition\")\nCreates a labelled triangle marker with a vertical line from the x\\-axis\nto a curve at a given x\\-value.\nParameters:\n* **x\\_val** (*float*) – The position along the curve at which the label, line and triangle will be constructed.\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") for which to construct the label.\n* **label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*) – The label of the vertical line and triangle.\n* **label\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the label.\n* **triangle\\_size** (*float*) – The size of the triangle.\n* **triangle\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the triangle.\n* **line\\_func** (*type**\\[*[*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")*]*) – The function used to construct the vertical line.\n* **line\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the vertical line.\nReturns:\nA [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the label, triangle and vertical line mobjects.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: TLabelExample [¶](#tlabelexample)\n![../_images/TLabelExample-1.png](../_images/TLabelExample-1.png)\n```\nfrom manim import *\nclass TLabelExample(Scene):\n    def construct(self):\n        # defines the axes and linear function\n        axes = Axes(x_range=[-1, 10], y_range=[-1, 10], x_length=9, y_length=6)\n        func = axes.plot(lambda x: x, color=BLUE)\n        # creates the T_label\n        t_label = axes.get_T_label(x_val=4, graph=func, label=Tex(\"x-value\"))\n        self.add(axes, func, t_label)\n```\n```\nclass TLabelExample(Scene):\n    def construct(self):\n        # defines the axes and linear function\n        axes = Axes(x_range=[-1, 10], y_range=[-1, 10], x_length=9, y_length=6)\n        func = axes.plot(lambda x: x, color=BLUE)\n        # creates the T_label\n        t_label = axes.get_T_label(x_val=4, graph=func, label=Tex(\"x-value\"))\n        self.add(axes, func, t_label)\n```\nget\\_area(*graph*, *x\\_range\\=None*, *color\\=(ManimColor('\\#58C4DD'), ManimColor('\\#83C167'))*, *opacity\\=0\\.3*, *bounded\\_graph\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_area)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_area \"Link to this definition\")\nReturns a [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\") representing the area under the graph passed.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The graph/curve for which the area needs to be gotten.\n* **x\\_range** (*tuple**\\[**float**,* *float**]* *\\|* *None*) – The range of the minimum and maximum x\\-values of the area. `x_range = [x_min, x_max]`.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *Iterable**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]*) – The color of the area. Creates a gradient if a list of colors is provided.\n* **opacity** (*float*) – The opacity of the area.\n* **bounded\\_graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – If a secondary `graph` is specified, encloses the area between the two curves.\n* **kwargs** (*Any*) – Additional parameters passed to [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\").\nReturns:\nThe [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\") representing the area.\nReturn type:\n[`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\")\nRaises:\n**ValueError** – When x\\_ranges do not match (either area x\\_range, graph’s x\\_range or bounded\\_graph’s x\\_range).\nExamples\nExample: GetAreaExample [¶](#getareaexample)\n![../_images/GetAreaExample-1.png](../_images/GetAreaExample-1.png)\n```\nfrom manim import *\nclass GetAreaExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        curve = ax.plot(lambda x: 2 * np.sin(x), color=DARK_BLUE)\n        area = ax.get_area(\n            curve,\n            x_range=(PI / 2, 3 * PI / 2),\n            color=(GREEN_B, GREEN_D),\n            opacity=1,\n        )\n        self.add(ax, curve, area)\n```\n```\nclass GetAreaExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        curve = ax.plot(lambda x: 2 * np.sin(x), color=DARK_BLUE)\n        area = ax.get_area(\n            curve,\n            x_range=(PI / 2, 3 * PI / 2),\n            color=(GREEN_B, GREEN_D),\n            opacity=1,\n        )\n        self.add(ax, curve, area)\n```\nget\\_graph\\_label(*graph*, *label\\='f(x)'*, *x\\_val\\=None*, *direction\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0\\.25*, *color\\=None*, *dot\\=False*, *dot\\_config\\=None*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_graph_label)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_graph_label \"Link to this definition\")\nCreates a properly positioned label for the passed graph, with an optional dot.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The curve.\n* **label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label for the function’s curve. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **x\\_val** (*float* *\\|* *None*) – The x\\_value along the curve that positions the label.\n* **direction** (*Sequence**\\[**float**]*) – The cartesian position, relative to the curve that the label will be at –\\> `LEFT`, `RIGHT`.\n* **buff** (*float*) – The distance between the curve and the label.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the label. Defaults to the color of the curve.\n* **dot** (*bool*) – Whether to add a dot at the point on the graph.\n* **dot\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – Additional parameters to be passed to [`Dot`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\").\nReturns:\nThe positioned label and [`Dot`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\"), if applicable.\nReturn type:\n`Mobject`\nExamples\nExample: GetGraphLabelExample [¶](#getgraphlabelexample)\n![../_images/GetGraphLabelExample-1.png](../_images/GetGraphLabelExample-1.png)\n```\nfrom manim import *\nclass GetGraphLabelExample(Scene):\n    def construct(self):\n        ax = Axes()\n        sin = ax.plot(lambda x: np.sin(x), color=PURPLE_B)\n        label = ax.get_graph_label(\n            graph=sin,\n            label= MathTex(r\"\\frac{\\pi}{2}\"),\n            x_val=PI / 2,\n            dot=True,\n            direction=UR,\n        )\n        self.add(ax, sin, label)\n```\n```\nclass GetGraphLabelExample(Scene):\n    def construct(self):\n        ax = Axes()\n        sin = ax.plot(lambda x: np.sin(x), color=PURPLE_B)\n        label = ax.get_graph_label(\n            graph=sin,\n            label= MathTex(r\"\\frac{\\pi}{2}\"),\n            x_val=PI / 2,\n            dot=True,\n            direction=UR,\n        )\n        self.add(ax, sin, label)\n```\nget\\_horizontal\\_line(*point*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_horizontal_line)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line \"Link to this definition\")\nA horizontal line from the y\\-axis to a given point in the scene.\nParameters:\n* **point** (*Sequence**\\[**float**]*) – The point to which the horizontal line will be drawn.\n* **kwargs** – Additional parameters to be passed to [`get_line_from_axis_to_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point\").\nReturns:\nA horizontal line from the y\\-axis to the point.\nReturn type:\n`Line`\nExamples\nExample: GetHorizontalLineExample [¶](#gethorizontallineexample)\n![../_images/GetHorizontalLineExample-1.png](../_images/GetHorizontalLineExample-1.png)\n```\nfrom manim import *\nclass GetHorizontalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax @ (-4, 1.5)\n        dot = Dot(point)\n        line = ax.get_horizontal_line(point, line_func=Line)\n        self.add(ax, line, dot)\n```\n```\nclass GetHorizontalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax @ (-4, 1.5)\n        dot = Dot(point)\n        line = ax.get_horizontal_line(point, line_func=Line)\n        self.add(ax, line, dot)\n```\nget\\_line\\_from\\_axis\\_to\\_point(*index: int*, *point: Sequence\\[float]*, *line\\_config: dict \\| None \\= None*, *color: [ParsableManimColor](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") \\| None \\= None*, *stroke\\_width: float \\= 2*) → [DashedLine](manim.mobject.geometry.line.DashedLine.html#manim.mobject.geometry.line.DashedLine \"manim.mobject.geometry.line.DashedLine\")[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_line_from_axis_to_point)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point \"Link to this definition\")\nget\\_line\\_from\\_axis\\_to\\_point(*index: int*, *point: Sequence\\[float]*, *line\\_func: type\\[[LineType](manim.mobject.graphing.coordinate_systems.html#manim.mobject.graphing.coordinate_systems.LineType \"manim.mobject.graphing.coordinate_systems.LineType\")]*, *line\\_config: dict \\| None \\= None*, *color: [ParsableManimColor](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") \\| None \\= None*, *stroke\\_width: float \\= 2*) → [LineType](manim.mobject.graphing.coordinate_systems.html#manim.mobject.graphing.coordinate_systems.LineType \"manim.mobject.graphing.coordinate_systems.LineType\")\nReturns a straight line from a given axis to a point in the scene.\nParameters:\n* **index** – Specifies the axis from which to draw the line. 0 \\= x\\_axis, 1 \\= y\\_axis\n* **point** – The point to which the line will be drawn.\n* **line\\_func** – The function of the [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\") mobject used to construct the line.\n* **line\\_config** – Optional arguments to passed to `line_func`.\n* **color** – The color of the line.\n* **stroke\\_width** – The stroke width of the line.\nReturns:\nThe line from an axis to a point.\nReturn type:\n[`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")\nSee also\n[`get_vertical_line()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line\")\n[`get_horizontal_line()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line\")\nget\\_lines\\_to\\_point(*point*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_lines_to_point)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_lines_to_point \"Link to this definition\")\nGenerate both horizontal and vertical lines from the axis to a point.\nParameters:\n* **point** (*Sequence**\\[**float**]*) – A point on the scene.\n* **kwargs** – Additional parameters to be passed to [`get_line_from_axis_to_point()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point\")\nReturns:\nA [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the horizontal and vertical lines.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nSee also\n[`get_vertical_line()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line\")\n[`get_horizontal_line()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_horizontal_line\")\nExamples\nExample: GetLinesToPointExample [¶](#getlinestopointexample)\n![../_images/GetLinesToPointExample-1.png](../_images/GetLinesToPointExample-1.png)\n```\nfrom manim import *\nclass GetLinesToPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        circ = Circle(radius=0.5).move_to([-4, -1.5, 0])\n        lines_1 = ax.get_lines_to_point(circ.get_right(), color=GREEN_B)\n        lines_2 = ax.get_lines_to_point(circ.get_corner(DL), color=BLUE_B)\n        self.add(ax, lines_1, lines_2, circ)\n```\n```\nclass GetLinesToPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        circ = Circle(radius=0.5).move_to([-4, -1.5, 0])\n        lines_1 = ax.get_lines_to_point(circ.get_right(), color=GREEN_B)\n        lines_2 = ax.get_lines_to_point(circ.get_corner(DL), color=BLUE_B)\n        self.add(ax, lines_1, lines_2, circ)\n```\nget\\_origin()[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_origin)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_origin \"Link to this definition\")\nGets the origin of [`Axes`](manim.mobject.graphing.coordinate_systems.Axes.html#manim.mobject.graphing.coordinate_systems.Axes \"manim.mobject.graphing.coordinate_systems.Axes\").\nReturns:\nThe center point.\nReturn type:\nnp.ndarray\nget\\_riemann\\_rectangles(*graph*, *x\\_range\\=None*, *dx\\=0\\.1*, *input\\_sample\\_type\\='left'*, *stroke\\_width\\=1*, *stroke\\_color\\=ManimColor('\\#000000')*, *fill\\_opacity\\=1*, *color\\=(ManimColor('\\#58C4DD'), ManimColor('\\#83C167'))*, *show\\_signed\\_area\\=True*, *bounded\\_graph\\=None*, *blend\\=False*, *width\\_scale\\_factor\\=1\\.001*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_riemann_rectangles)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_riemann_rectangles \"Link to this definition\")\nGenerates a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the Riemann Rectangles for a given curve.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The graph whose area will be approximated by Riemann rectangles.\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The minimum and maximum x\\-values of the rectangles. `x_range = [x_min, x_max]`.\n* **dx** (*float* *\\|* *None*) – The change in x\\-value that separates each rectangle.\n* **input\\_sample\\_type** (*str*) – Can be any of `\"left\"`, `\"right\"` or `\"center\"`. Refers to where\nthe sample point for the height of each Riemann Rectangle\nwill be inside the segments of the partition.\n* **stroke\\_width** (*float*) – The stroke\\_width of the border of the rectangles.\n* **stroke\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the border of the rectangle.\n* **fill\\_opacity** (*float*) – The opacity of the rectangles.\n* **color** (*Iterable**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]* *\\|* [*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The colors of the rectangles. Creates a balanced gradient if multiple colors are passed.\n* **show\\_signed\\_area** (*bool*) – Indicates negative area when the curve dips below the x\\-axis by inverting its color.\n* **blend** (*bool*) – Sets the `stroke_color` to `fill_color`, blending the rectangles without clear separation.\n* **bounded\\_graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – If a secondary graph is specified, encloses the area between the two curves.\n* **width\\_scale\\_factor** (*float*) – The factor by which the width of the rectangles is scaled.\nReturns:\nA [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing the Riemann Rectangles.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetRiemannRectanglesExample [¶](#getriemannrectanglesexample)\n![../_images/GetRiemannRectanglesExample-1.png](../_images/GetRiemannRectanglesExample-1.png)\n```\nfrom manim import *\nclass GetRiemannRectanglesExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-2, 10])\n        quadratic = ax.plot(lambda x: 0.5 * x ** 2 - 0.5)\n        # the rectangles are constructed from their top right corner.\n        # passing an iterable to `color` produces a gradient\n        rects_right = ax.get_riemann_rectangles(\n            quadratic,\n            x_range=[-4, -3],\n            dx=0.25,\n            color=(TEAL, BLUE_B, DARK_BLUE),\n            input_sample_type=\"right\",\n        )\n        # the colour of rectangles below the x-axis is inverted\n        # due to show_signed_area\n        rects_left = ax.get_riemann_rectangles(\n            quadratic, x_range=[-1.5, 1.5], dx=0.15, color=YELLOW\n        )\n        bounding_line = ax.plot(\n            lambda x: 1.5 * x, color=BLUE_B, x_range=[3.3, 6]\n        )\n        bounded_rects = ax.get_riemann_rectangles(\n            bounding_line,\n            bounded_graph=quadratic,\n            dx=0.15,\n            x_range=[4, 5],\n            show_signed_area=False,\n            color=(MAROON_A, RED_B, PURPLE_D),\n        )\n        self.add(\n            ax, bounding_line, quadratic, rects_right, rects_left, bounded_rects\n        )\n```\n```\nclass GetRiemannRectanglesExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-2, 10])\n        quadratic = ax.plot(lambda x: 0.5 * x ** 2 - 0.5)\n        # the rectangles are constructed from their top right corner.\n        # passing an iterable to `color` produces a gradient\n        rects_right = ax.get_riemann_rectangles(\n            quadratic,\n            x_range=[-4, -3],\n            dx=0.25,\n            color=(TEAL, BLUE_B, DARK_BLUE),\n            input_sample_type=\"right\",\n        )\n        # the colour of rectangles below the x-axis is inverted\n        # due to show_signed_area\n        rects_left = ax.get_riemann_rectangles(\n            quadratic, x_range=[-1.5, 1.5], dx=0.15, color=YELLOW\n        )\n        bounding_line = ax.plot(\n            lambda x: 1.5 * x, color=BLUE_B, x_range=[3.3, 6]\n        )\n        bounded_rects = ax.get_riemann_rectangles(\n            bounding_line,\n            bounded_graph=quadratic,\n            dx=0.15,\n            x_range=[4, 5],\n            show_signed_area=False,\n            color=(MAROON_A, RED_B, PURPLE_D),\n        )\n        self.add(\n            ax, bounding_line, quadratic, rects_right, rects_left, bounded_rects\n        )\n```\nget\\_secant\\_slope\\_group(*x*, *graph*, *dx\\=None*, *dx\\_line\\_color\\=ManimColor('\\#FFFF00')*, *dy\\_line\\_color\\=None*, *dx\\_label\\=None*, *dy\\_label\\=None*, *include\\_secant\\_line\\=True*, *secant\\_line\\_color\\=ManimColor('\\#83C167')*, *secant\\_line\\_length\\=10*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_secant_slope_group)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_secant_slope_group \"Link to this definition\")\nCreates two lines representing dx and df, the labels for dx and df, andthe secant to the curve at a particular x\\-value.\nParameters:\n* **x** (*float*) – The x\\-value at which the secant intersects the graph for the first time.\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The curve for which the secant will be found.\n* **dx** (*float* *\\|* *None*) – The change in x after which the secant exits.\n* **dx\\_line\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the line that indicates the change in x.\n* **dy\\_line\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the line that indicates the change in y. Defaults to the color of `graph`.\n* **dx\\_label** (*float* *\\|* *str* *\\|* *None*) – The label for the dx line. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **dy\\_label** (*float* *\\|* *str* *\\|* *None*) – The label for the dy line. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **include\\_secant\\_line** (*bool*) – Whether to include the secant line in the graph,\nor just the df/dx lines and labels.\n* **secant\\_line\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the secant line.\n* **secant\\_line\\_length** (*float*) – The length of the secant line.\nReturns:\nA group containing the elements: dx\\_line, df\\_line, and\nif applicable also `dx_label`, `df_label`, secant\\_line.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetSecantSlopeGroupExample [¶](#getsecantslopegroupexample)\n![../_images/GetSecantSlopeGroupExample-1.png](../_images/GetSecantSlopeGroupExample-1.png)\n```\nfrom manim import *\nclass GetSecantSlopeGroupExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-1, 7])\n        graph = ax.plot(lambda x: 1 / 4 * x ** 2, color=BLUE)\n        slopes = ax.get_secant_slope_group(\n            x=2.0,\n            graph=graph,\n            dx=1.0,\n            dx_label=Tex(\"dx = 1.0\"),\n            dy_label=\"dy\",\n            dx_line_color=GREEN_B,\n            secant_line_length=4,\n            secant_line_color=RED_D,\n        )\n        self.add(ax, graph, slopes)\n```\n```\nclass GetSecantSlopeGroupExample(Scene):\n    def construct(self):\n        ax = Axes(y_range=[-1, 7])\n        graph = ax.plot(lambda x: 1 / 4 * x ** 2, color=BLUE)\n        slopes = ax.get_secant_slope_group(\n            x=2.0,\n            graph=graph,\n            dx=1.0,\n            dx_label=Tex(\"dx = 1.0\"),\n            dy_label=\"dy\",\n            dx_line_color=GREEN_B,\n            secant_line_length=4,\n            secant_line_color=RED_D,\n        )\n        self.add(ax, graph, slopes)\n```\nget\\_vertical\\_line(*point*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_vertical_line)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line \"Link to this definition\")\nA vertical line from the x\\-axis to a given point in the scene.\nParameters:\n* **point** (*Sequence**\\[**float**]*) – The point to which the vertical line will be drawn.\n* **kwargs** (*Any*) – Additional parameters to be passed to [`get_line_from_axis_to_point`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_line_from_axis_to_point\").\nReturns:\nA vertical line from the x\\-axis to the point.\nReturn type:\n`Line`\nExamples\nExample: GetVerticalLineExample [¶](#getverticallineexample)\n![../_images/GetVerticalLineExample-1.png](../_images/GetVerticalLineExample-1.png)\n```\nfrom manim import *\nclass GetVerticalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax.coords_to_point(-3.5, 2)\n        dot = Dot(point)\n        line = ax.get_vertical_line(point, line_config={\"dashed_ratio\": 0.85})\n        self.add(ax, line, dot)\n```\n```\nclass GetVerticalLineExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        point = ax.coords_to_point(-3.5, 2)\n        dot = Dot(point)\n        line = ax.get_vertical_line(point, line_config={\"dashed_ratio\": 0.85})\n        self.add(ax, line, dot)\n```\nget\\_vertical\\_lines\\_to\\_graph(*graph*, *x\\_range\\=None*, *num\\_lines\\=20*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_vertical_lines_to_graph)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_lines_to_graph \"Link to this definition\")\nObtains multiple lines from the x\\-axis to the curve.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The graph along which the lines are placed.\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – A list containing the lower and and upper bounds of the lines: `x_range = [x_min, x_max]`.\n* **num\\_lines** (*int*) – The number of evenly spaced lines.\n* **kwargs** (*Any*) – Additional arguments to be passed to [`get_vertical_line()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_vertical_line\").\nReturns:\nThe [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the evenly spaced lines.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetVerticalLinesToGraph [¶](#getverticallinestograph)\n![../_images/GetVerticalLinesToGraph-1.png](../_images/GetVerticalLinesToGraph-1.png)\n```\nfrom manim import *\nclass GetVerticalLinesToGraph(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 8.0, 1],\n            y_range=[-1, 1, 0.2],\n            axis_config={\"font_size\": 24},\n        ).add_coordinates()\n        curve = ax.plot(lambda x: np.sin(x) / np.e ** 2 * x)\n        lines = ax.get_vertical_lines_to_graph(\n            curve, x_range=[0, 4], num_lines=30, color=BLUE\n        )\n        self.add(ax, curve, lines)\n```\n```\nclass GetVerticalLinesToGraph(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 8.0, 1],\n            y_range=[-1, 1, 0.2],\n            axis_config={\"font_size\": 24},\n        ).add_coordinates()\n        curve = ax.plot(lambda x: np.sin(x) / np.e ** 2 * x)\n        lines = ax.get_vertical_lines_to_graph(\n            curve, x_range=[0, 4], num_lines=30, color=BLUE\n        )\n        self.add(ax, curve, lines)\n```\nget\\_x\\_axis\\_label(*label*, *edge\\=array(\\[1\\., 1\\., 0\\.])*, *direction\\=array(\\[1\\., 1\\., 0\\.])*, *buff\\=0\\.1*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_x_axis_label)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label \"Link to this definition\")\nGenerate an x\\-axis label.\nParameters:\n* **label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **edge** (*Sequence**\\[**float**]*) – The edge of the x\\-axis to which the label will be added, by default `UR`.\n* **direction** (*Sequence**\\[**float**]*) – Allows for further positioning of the label from an edge, by default `UR`.\n* **buff** (*float*) – The distance of the label from the line.\nReturns:\nThe positioned label.\nReturn type:\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\nExample: GetXAxisLabelExample [¶](#getxaxislabelexample)\n![../_images/GetXAxisLabelExample-1.png](../_images/GetXAxisLabelExample-1.png)\n```\nfrom manim import *\nclass GetXAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        x_label = ax.get_x_axis_label(\n            Tex(\"$x$-values\").scale(0.65), edge=DOWN, direction=DOWN, buff=0.5\n        )\n        self.add(ax, x_label)\n```\n```\nclass GetXAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        x_label = ax.get_x_axis_label(\n            Tex(\"$x$-values\").scale(0.65), edge=DOWN, direction=DOWN, buff=0.5\n        )\n        self.add(ax, x_label)\n```\nget\\_y\\_axis\\_label(*label*, *edge\\=array(\\[1\\., 1\\., 0\\.])*, *direction\\=array(\\[1\\., 0\\.5, 0\\.])*, *buff\\=0\\.1*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.get_y_axis_label)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label \"Link to this definition\")\nGenerate a y\\-axis label.\nParameters:\n* **label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **edge** (*Sequence**\\[**float**]*) – The edge of the y\\-axis to which the label will be added, by default `UR`.\n* **direction** (*Sequence**\\[**float**]*) – Allows for further positioning of the label from an edge, by default `UR`\n* **buff** (*float*) – The distance of the label from the line.\nReturns:\nThe positioned label.\nReturn type:\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\nExample: GetYAxisLabelExample [¶](#getyaxislabelexample)\n![../_images/GetYAxisLabelExample-1.png](../_images/GetYAxisLabelExample-1.png)\n```\nfrom manim import *\nclass GetYAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        y_label = ax.get_y_axis_label(\n            Tex(\"$y$-values\").scale(0.65).rotate(90 * DEGREES),\n            edge=LEFT,\n            direction=LEFT,\n            buff=0.3,\n        )\n        self.add(ax, y_label)\n```\n```\nclass GetYAxisLabelExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=(0, 8), y_range=(0, 5), x_length=8, y_length=5)\n        y_label = ax.get_y_axis_label(\n            Tex(\"$y$-values\").scale(0.65).rotate(90 * DEGREES),\n            edge=LEFT,\n            direction=LEFT,\n            buff=0.3,\n        )\n        self.add(ax, y_label)\n```\ni2gc(*x*, *graph*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.i2gc)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gc \"Link to this definition\")\nAlias for [`input_to_graph_coords()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords\").\nParameters:\n* **x** (*float*)\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\"))\nReturn type:\ntuple\\[float, float]\ni2gp(*x*, *graph*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.i2gp)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.i2gp \"Link to this definition\")\nAlias for [`input_to_graph_point()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point\").\nParameters:\n* **x** (*float*)\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\"))\nReturn type:\n*ndarray*\ninput\\_to\\_graph\\_coords(*x*, *graph*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.input_to_graph_coords)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_coords \"Link to this definition\")\nReturns a tuple of the axis relative coordinates of the point\non the graph based on the x\\-value given.\nExamples\n```\n>>> from manim import Axes\n>>> ax = Axes()\n>>> parabola = ax.plot(lambda x: x**2)\n>>> ax.input_to_graph_coords(x=3, graph=parabola)\n(3, 9)\n```\nParameters:\n* **x** (*float*)\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\"))\nReturn type:\ntuple\\[float, float]\ninput\\_to\\_graph\\_point(*x*, *graph*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.input_to_graph_point)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.input_to_graph_point \"Link to this definition\")\nReturns the coordinates of the point on a `graph` corresponding to an `x` value.\nParameters:\n* **x** (*float*) – The x\\-value of a point on the `graph`.\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") on which the point lies.\nReturns:\nThe coordinates of the point on the `graph` corresponding to the `x` value.\nReturn type:\n`np.ndarray`\nRaises:\n**ValueError** – When the target x is not in the range of the line graph.\nExamples\nExample: InputToGraphPointExample [¶](#inputtographpointexample)\n![../_images/InputToGraphPointExample-1.png](../_images/InputToGraphPointExample-1.png)\n```\nfrom manim import *\nclass InputToGraphPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        curve = ax.plot(lambda x : np.cos(x))\n        # move a square to PI on the cosine curve.\n        position = ax.input_to_graph_point(x=PI, graph=curve)\n        sq = Square(side_length=1, color=YELLOW).move_to(position)\n        self.add(ax, curve, sq)\n```\n```\nclass InputToGraphPointExample(Scene):\n    def construct(self):\n        ax = Axes()\n        curve = ax.plot(lambda x : np.cos(x))\n        # move a square to PI on the cosine curve.\n        position = ax.input_to_graph_point(x=PI, graph=curve)\n        sq = Square(side_length=1, color=YELLOW).move_to(position)\n        self.add(ax, curve, sq)\n```\np2c(*point*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.p2c)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.p2c \"Link to this definition\")\nAbbreviation for `point_to_coords()`\nParameters:\n**point** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\nplot(*function*, *x\\_range\\=None*, *use\\_vectorized\\=False*, *colorscale\\=None*, *colorscale\\_axis\\=1*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot \"Link to this definition\")\nGenerates a curve based on a function.\nParameters:\n* **function** (*Callable**\\[**\\[**float**]**,* *float**]*) – The function used to construct the [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The range of the curve along the axes. `x_range = [x_min, x_max, x_step]`.\n* **use\\_vectorized** (*bool*) – Whether to pass in the generated t value array to the function. Only use this if your function supports it.\nOutput should be a numpy array of shape `[y_0, y_1, ...]`\n* **colorscale** ([*Union*](manim.mobject.geometry.boolean_ops.Union.html#manim.mobject.geometry.boolean_ops.Union \"manim.mobject.geometry.boolean_ops.Union\")*\\[**Iterable**\\[**Color**]**,* *Iterable**\\[**Color**,* *float**]**]* *\\|* *None*) – Colors of the function. Optional parameter used when coloring a function by values. Passing a list of colors\nand a colorscale\\_axis will color the function by y\\-value. Passing a list of tuples in the form `(color, pivot)`\nallows user\\-defined pivots where the color transitions.\n* **colorscale\\_axis** (*int*) – Defines the axis on which the colorscale is applied (0 \\= x, 1 \\= y), default is y\\-axis (1\\).\n* **kwargs** (*Any*) – Additional parameters to be passed to [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\nReturns:\nThe plotted curve.\nReturn type:\n[`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nWarning\nThis method may not produce accurate graphs since Manim currently relies on interpolation between\nevenly\\-spaced samples of the curve, instead of intelligent plotting.\nSee the example below for some solutions to this problem.\nExamples\nExample: PlotExample [¶](#plotexample)\n![../_images/PlotExample-1.png](../_images/PlotExample-1.png)\n```\nfrom manim import *\nclass PlotExample(Scene):\n    def construct(self):\n        # construct the axes\n        ax_1 = Axes(\n            x_range=[0.001, 6],\n            y_range=[-8, 2],\n            x_length=5,\n            y_length=3,\n            tips=False,\n        )\n        ax_2 = ax_1.copy()\n        ax_3 = ax_1.copy()\n        # position the axes\n        ax_1.to_corner(UL)\n        ax_2.to_corner(UR)\n        ax_3.to_edge(DOWN)\n        axes = VGroup(ax_1, ax_2, ax_3)\n        # create the logarithmic curves\n        def log_func(x):\n            return np.log(x)\n        # a curve without adjustments; poor interpolation.\n        curve_1 = ax_1.plot(log_func, color=PURE_RED)\n        # disabling interpolation makes the graph look choppy as not enough\n        # inputs are available\n        curve_2 = ax_2.plot(log_func, use_smoothing=False, color=ORANGE)\n        # taking more inputs of the curve by specifying a step for the\n        # x_range yields expected results, but increases rendering time.\n        curve_3 = ax_3.plot(\n            log_func, x_range=(0.001, 6, 0.001), color=PURE_GREEN\n        )\n        curves = VGroup(curve_1, curve_2, curve_3)\n        self.add(axes, curves)\n```\n```\nclass PlotExample(Scene):\n    def construct(self):\n        # construct the axes\n        ax_1 = Axes(\n            x_range=[0.001, 6],\n            y_range=[-8, 2],\n            x_length=5,\n            y_length=3,\n            tips=False,\n        )\n        ax_2 = ax_1.copy()\n        ax_3 = ax_1.copy()\n        # position the axes\n        ax_1.to_corner(UL)\n        ax_2.to_corner(UR)\n        ax_3.to_edge(DOWN)\n        axes = VGroup(ax_1, ax_2, ax_3)\n        # create the logarithmic curves\n        def log_func(x):\n            return np.log(x)\n        # a curve without adjustments; poor interpolation.\n        curve_1 = ax_1.plot(log_func, color=PURE_RED)\n        # disabling interpolation makes the graph look choppy as not enough\n        # inputs are available\n        curve_2 = ax_2.plot(log_func, use_smoothing=False, color=ORANGE)\n        # taking more inputs of the curve by specifying a step for the\n        # x_range yields expected results, but increases rendering time.\n        curve_3 = ax_3.plot(\n            log_func, x_range=(0.001, 6, 0.001), color=PURE_GREEN\n        )\n        curves = VGroup(curve_1, curve_2, curve_3)\n        self.add(axes, curves)\n```\nplot\\_antiderivative\\_graph(*graph*, *y\\_intercept\\=0*, *samples\\=50*, *use\\_vectorized\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_antiderivative_graph)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_antiderivative_graph \"Link to this definition\")\nPlots an antiderivative graph.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The graph for which the antiderivative will be found.\n* **y\\_intercept** (*float*) – The y\\-value at which the graph intercepts the y\\-axis.\n* **samples** (*int*) – The number of points to take the area under the graph.\n* **use\\_vectorized** (*bool*) – Whether to use the vectorized version of the antiderivative. This means\nto pass in the generated t value array to the function. Only use this if your function supports it.\nOutput should be a numpy array of shape `[y_0, y_1, ...]`\n* **kwargs** (*Any*) – Any valid keyword argument of [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\nReturns:\nThe curve of the antiderivative.\nReturn type:\n[`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nNote\nThis graph is plotted from the values of area under the reference graph.\nThe result might not be ideal if the reference graph contains uncalculatable\nareas from x\\=0\\.\nExamples\nExample: AntiderivativeExample [¶](#antiderivativeexample)\n![../_images/AntiderivativeExample-1.png](../_images/AntiderivativeExample-1.png)\n```\nfrom manim import *\nclass AntiderivativeExample(Scene):\n    def construct(self):\n        ax = Axes()\n        graph1 = ax.plot(\n            lambda x: (x ** 2 - 2) / 3,\n            color=RED,\n        )\n        graph2 = ax.plot_antiderivative_graph(graph1, color=BLUE)\n        self.add(ax, graph1, graph2)\n```\n```\nclass AntiderivativeExample(Scene):\n    def construct(self):\n        ax = Axes()\n        graph1 = ax.plot(\n            lambda x: (x ** 2 - 2) / 3,\n            color=RED,\n        )\n        graph2 = ax.plot_antiderivative_graph(graph1, color=BLUE)\n        self.add(ax, graph1, graph2)\n```\nplot\\_derivative\\_graph(*graph*, *color\\=ManimColor('\\#83C167')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_derivative_graph)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_derivative_graph \"Link to this definition\")\nReturns the curve of the derivative of the passed graph.\nParameters:\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The graph for which the derivative will be found.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the derivative curve.\n* **kwargs** – Any valid keyword argument of [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\nReturns:\nThe curve of the derivative.\nReturn type:\n[`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nExamples\nExample: DerivativeGraphExample [¶](#derivativegraphexample)\n![../_images/DerivativeGraphExample-1.png](../_images/DerivativeGraphExample-1.png)\n```\nfrom manim import *\nclass DerivativeGraphExample(Scene):\n    def construct(self):\n        ax = NumberPlane(y_range=[-1, 7], background_line_style={\"stroke_opacity\": 0.4})\n        curve_1 = ax.plot(lambda x: x ** 2, color=PURPLE_B)\n        curve_2 = ax.plot_derivative_graph(curve_1)\n        curves = VGroup(curve_1, curve_2)\n        label_1 = ax.get_graph_label(curve_1, \"x^2\", x_val=-2, direction=DL)\n        label_2 = ax.get_graph_label(curve_2, \"2x\", x_val=3, direction=RIGHT)\n        labels = VGroup(label_1, label_2)\n        self.add(ax, curves, labels)\n```\n```\nclass DerivativeGraphExample(Scene):\n    def construct(self):\n        ax = NumberPlane(y_range=[-1, 7], background_line_style={\"stroke_opacity\": 0.4})\n        curve_1 = ax.plot(lambda x: x ** 2, color=PURPLE_B)\n        curve_2 = ax.plot_derivative_graph(curve_1)\n        curves = VGroup(curve_1, curve_2)\n        label_1 = ax.get_graph_label(curve_1, \"x^2\", x_val=-2, direction=DL)\n        label_2 = ax.get_graph_label(curve_2, \"2x\", x_val=3, direction=RIGHT)\n        labels = VGroup(label_1, label_2)\n        self.add(ax, curves, labels)\n```\nplot\\_implicit\\_curve(*func*, *min\\_depth\\=5*, *max\\_quads\\=1500*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_implicit_curve)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_implicit_curve \"Link to this definition\")\nCreates the curves of an implicit function.\nParameters:\n* **func** (*Callable**\\[**\\[**float**,* *float**]**,* *float**]*) – The function to graph, in the form of f(x, y) \\= 0\\.\n* **min\\_depth** (*int*) – The minimum depth of the function to calculate.\n* **max\\_quads** (*int*) – The maximum number of quads to use.\n* **kwargs** (*Any*) – Additional parameters to pass into `ImplicitFunction`.\nReturn type:\n[*ImplicitFunction*](manim.mobject.graphing.functions.ImplicitFunction.html#manim.mobject.graphing.functions.ImplicitFunction \"manim.mobject.graphing.functions.ImplicitFunction\")\nExamples\nExample: ImplicitExample [¶](#implicitexample)\n![../_images/ImplicitExample-1.png](../_images/ImplicitExample-1.png)\n```\nfrom manim import *\nclass ImplicitExample(Scene):\n    def construct(self):\n        ax = Axes()\n        a = ax.plot_implicit_curve(\n            lambda x, y: y * (x - y) ** 2 - 4 * x - 8, color=BLUE\n        )\n        self.add(ax, a)\n```\n```\nclass ImplicitExample(Scene):\n    def construct(self):\n        ax = Axes()\n        a = ax.plot_implicit_curve(\n            lambda x, y: y * (x - y) ** 2 - 4 * x - 8, color=BLUE\n        )\n        self.add(ax, a)\n```\nplot\\_parametric\\_curve(*function*, *use\\_vectorized\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_parametric_curve)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_parametric_curve \"Link to this definition\")\nA parametric curve.\nParameters:\n* **function** (*Callable**\\[**\\[**float**]**,* *ndarray**]*) – A parametric function mapping a number to a point in the\ncoordinate system.\n* **use\\_vectorized** (*bool*) – Whether to pass in the generated t value array to the function. Only use this if your function supports it.\n* **kwargs** (*Any*) – Any further keyword arguments are passed to [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\nReturn type:\n[*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nExample\nExample: ParametricCurveExample [¶](#parametriccurveexample)\n![../_images/ParametricCurveExample-1.png](../_images/ParametricCurveExample-1.png)\n```\nfrom manim import *\nclass ParametricCurveExample(Scene):\n    def construct(self):\n        ax = Axes()\n        cardioid = ax.plot_parametric_curve(\n            lambda t: np.array(\n                [\n                    np.exp(1) * np.cos(t) * (1 - np.cos(t)),\n                    np.exp(1) * np.sin(t) * (1 - np.cos(t)),\n                    0,\n                ]\n            ),\n            t_range=[0, 2 * PI],\n            color=\"#0FF1CE\",\n        )\n        self.add(ax, cardioid)\n```\n```\nclass ParametricCurveExample(Scene):\n    def construct(self):\n        ax = Axes()\n        cardioid = ax.plot_parametric_curve(\n            lambda t: np.array(\n                [\n                    np.exp(1) * np.cos(t) * (1 - np.cos(t)),\n                    np.exp(1) * np.sin(t) * (1 - np.cos(t)),\n                    0,\n                ]\n            ),\n            t_range=[0, 2 * PI],\n            color=\"#0FF1CE\",\n        )\n        self.add(ax, cardioid)\n```\nplot\\_polar\\_graph(*r\\_func*, *theta\\_range\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_polar_graph)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_polar_graph \"Link to this definition\")\nA polar graph.\nParameters:\n* **r\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*) – The function r of theta.\n* **theta\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The range of theta as `theta_range = [theta_min, theta_max, theta_step]`.\n* **kwargs** (*Any*) – Additional parameters passed to [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\").\nReturn type:\n[*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nExamples\nExample: PolarGraphExample [¶](#polargraphexample)\n![../_images/PolarGraphExample-1.png](../_images/PolarGraphExample-1.png)\n```\nfrom manim import *\nclass PolarGraphExample(Scene):\n    def construct(self):\n        plane = PolarPlane()\n        r = lambda theta: 2 * np.sin(theta * 5)\n        graph = plane.plot_polar_graph(r, [0, 2 * PI], color=ORANGE)\n        self.add(plane, graph)\n```\n```\nclass PolarGraphExample(Scene):\n    def construct(self):\n        plane = PolarPlane()\n        r = lambda theta: 2 * np.sin(theta * 5)\n        graph = plane.plot_polar_graph(r, [0, 2 * PI], color=ORANGE)\n        self.add(plane, graph)\n```\nReferences: [`PolarPlane`](manim.mobject.graphing.coordinate_systems.PolarPlane.html#manim.mobject.graphing.coordinate_systems.PolarPlane \"manim.mobject.graphing.coordinate_systems.PolarPlane\")\nplot\\_surface(*function*, *u\\_range\\=None*, *v\\_range\\=None*, *colorscale\\=None*, *colorscale\\_axis\\=2*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.plot_surface)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.plot_surface \"Link to this definition\")\nGenerates a surface based on a function.\nParameters:\n* **function** (*Callable**\\[**\\[**float**]**,* *float**]*) – The function used to construct the [`Surface`](manim.mobject.three_d.three_dimensions.Surface.html#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\").\n* **u\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The range of the `u` variable: `(u_min, u_max)`.\n* **v\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The range of the `v` variable: `(v_min, v_max)`.\n* **colorscale** (*Sequence**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**]* *\\|* *Sequence**\\[**tuple**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**,* *float**]**]* *\\|* *None*) – Colors of the surface. Passing a list of colors will color the surface by z\\-value.\nPassing a list of tuples in the form `(color, pivot)` allows user\\-defined pivots\nwhere the color transitions.\n* **colorscale\\_axis** (*int*) – Defines the axis on which the colorscale is applied (0 \\= x, 1 \\= y, 2 \\= z), default\nis z\\-axis (2\\).\n* **kwargs** (*Any*) – Additional parameters to be passed to [`Surface`](manim.mobject.three_d.three_dimensions.Surface.html#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\").\nReturns:\nThe plotted surface.\nReturn type:\n[`Surface`](manim.mobject.three_d.three_dimensions.Surface.html#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\")\nExamples\nExample: PlotSurfaceExample [¶](#plotsurfaceexample)\n![../_images/PlotSurfaceExample-1.png](../_images/PlotSurfaceExample-1.png)\n```\nfrom manim import *\nclass PlotSurfaceExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 16\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-60 * DEGREES)\n        axes = ThreeDAxes(x_range=(-3, 3, 1), y_range=(-3, 3, 1), z_range=(-5, 5, 1))\n        def param_trig(u, v):\n            x = u\n            y = v\n            z = 2 * np.sin(x) + 2 * np.cos(y)\n            return z\n        trig_plane = axes.plot_surface(\n            param_trig,\n            resolution=(resolution_fa, resolution_fa),\n            u_range = (-3, 3),\n            v_range = (-3, 3),\n            colorscale = [BLUE, GREEN, YELLOW, ORANGE, RED],\n            )\n        self.add(axes, trig_plane)\n```\n```\nclass PlotSurfaceExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 16\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-60 * DEGREES)\n        axes = ThreeDAxes(x_range=(-3, 3, 1), y_range=(-3, 3, 1), z_range=(-5, 5, 1))\n        def param_trig(u, v):\n            x = u\n            y = v\n            z = 2 * np.sin(x) + 2 * np.cos(y)\n            return z\n        trig_plane = axes.plot_surface(\n            param_trig,\n            resolution=(resolution_fa, resolution_fa),\n            u_range = (-3, 3),\n            v_range = (-3, 3),\n            colorscale = [BLUE, GREEN, YELLOW, ORANGE, RED],\n            )\n        self.add(axes, trig_plane)\n```\npoint\\_to\\_polar(*point*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.point_to_polar)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar \"Link to this definition\")\nGets polar coordinates from a point.\nParameters:\n**point** ([*Point2DLike*](manim.typing.html#manim.typing.Point2DLike \"manim.typing.Point2DLike\")) – The point.\nReturns:\nThe coordinate radius (\\\\(r\\\\)) and the coordinate azimuth (\\\\(\\\\theta\\\\)).\nReturn type:\nTuple\\[`float`, `float`]\npolar\\_to\\_point(*radius*, *azimuth*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.polar_to_point)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point \"Link to this definition\")\nGets a point from polar coordinates.\nParameters:\n* **radius** (*float*) – The coordinate radius (\\\\(r\\\\)).\n* **azimuth** (*float*) – The coordinate azimuth (\\\\(\\\\theta\\\\)).\nReturns:\nThe point.\nReturn type:\nnumpy.ndarray\nExamples\nExample: PolarToPointExample [¶](#polartopointexample)\n![../_images/PolarToPointExample-1.png](../_images/PolarToPointExample-1.png)\n```\nfrom manim import *\nclass PolarToPointExample(Scene):\n    def construct(self):\n        polarplane_pi = PolarPlane(azimuth_units=\"PI radians\", size=6)\n        polartopoint_vector = Vector(polarplane_pi.polar_to_point(3, PI/4))\n        self.add(polarplane_pi)\n        self.add(polartopoint_vector)\n```\n```\nclass PolarToPointExample(Scene):\n    def construct(self):\n        polarplane_pi = PolarPlane(azimuth_units=\"PI radians\", size=6)\n        polartopoint_vector = Vector(polarplane_pi.polar_to_point(3, PI/4))\n        self.add(polarplane_pi)\n        self.add(polartopoint_vector)\n```\nReferences: [`PolarPlane`](manim.mobject.graphing.coordinate_systems.PolarPlane.html#manim.mobject.graphing.coordinate_systems.PolarPlane \"manim.mobject.graphing.coordinate_systems.PolarPlane\") [`Vector`](manim.mobject.geometry.line.Vector.html#manim.mobject.geometry.line.Vector \"manim.mobject.geometry.line.Vector\")\npr2pt(*radius*, *azimuth*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.pr2pt)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.pr2pt \"Link to this definition\")\nAbbreviation for [`polar_to_point()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.polar_to_point\")\nParameters:\n* **radius** (*float*)\n* **azimuth** (*float*)\nReturn type:\n*ndarray*\npt2pr(*point*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.pt2pr)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.pt2pr \"Link to this definition\")\nAbbreviation for [`point_to_polar()`](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.point_to_polar\")\nParameters:\n**point** (*ndarray*)\nReturn type:\ntuple\\[float, float]\nslope\\_of\\_tangent(*x*, *graph*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#CoordinateSystem.slope_of_tangent)[¶](#manim.mobject.graphing.coordinate_systems.CoordinateSystem.slope_of_tangent \"Link to this definition\")\nReturns the slope of the tangent to the plotted curve\nat a particular x\\-value.\nParameters:\n* **x** (*float*) – The x\\-value at which the tangent must touch the curve.\n* **graph** ([*ParametricFunction*](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")) – The [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") for which to calculate the tangent.\n* **kwargs** (*Any*)\nReturns:\nThe slope of the tangent with the x axis.\nReturn type:\n`float`\nExamples\n```\nax = Axes()\ncurve = ax.plot(lambda x: x**2)\nax.slope_of_tangent(x=-2, graph=curve)\n# -3.5000000259052038\n```",
  "scraped_at": "2025-06-24T17:51:52.930603",
  "content_length": 78470,
  "domain": "docs.manim.community",
  "word_count": 5839,
  "inspection_status": "approved",
  "filename": "CoordinateSystem - Manim Community v0.19.0_20250624_175152.json",
  "saved_at": "2025-06-24T17:51:52.930916",
  "approved_at": "2025-06-25T17:18:58.429297"
}