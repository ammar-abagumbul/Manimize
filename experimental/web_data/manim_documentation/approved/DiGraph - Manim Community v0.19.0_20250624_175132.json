{
  "doc_id": "432413f058b784bb48dc0d0614a98ee9",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graph.DiGraph.html",
  "title": "DiGraph - Manim Community v0.19.0",
  "content": "DiGraph[¶](#digraph \"Link to this heading\")\n===========================================\nQualified name: `manim.mobject.graph.DiGraph`\n*class* DiGraph(*vertices*, *edges*, *labels\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *layout\\='spring'*, *layout\\_scale\\=2*, *layout\\_config\\=None*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobjects\\=None*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *partitions\\=None*, *root\\_vertex\\=None*, *edge\\_config\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#DiGraph)[¶](#manim.mobject.graph.DiGraph \"Link to this definition\")\nBases: [`GenericGraph`](manim.mobject.graph.GenericGraph.html#manim.mobject.graph.GenericGraph \"manim.mobject.graph.GenericGraph\")\nA directed graph.\nNote\nIn contrast to undirected graphs, the order in which vertices in a given\nedge are specified is relevant here.\nSee also\n[`GenericGraph`](manim.mobject.graph.GenericGraph.html#manim.mobject.graph.GenericGraph \"manim.mobject.graph.GenericGraph\")\nParameters:\n* **vertices** (*Sequence**\\[**Hashable**]*) – A list of vertices. Must be hashable elements.\n* **edges** (*Sequence**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*) – A list of edges, specified as tuples `(u, v)` where both `u`\nand `v` are vertices. The edge is directed from `u` to `v`.\n* **labels** (*bool* *\\|* *dict*) – Controls whether or not vertices are labeled. If `False` (the default),\nthe vertices are not labeled; if `True` they are labeled using their\nnames (as specified in `vertices`) via [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\"). Alternatively,\ncustom labels can be specified by passing a dictionary whose keys are\nthe vertices, and whose values are the corresponding vertex labels\n(rendered via, e.g., [`Text`](manim.mobject.text.text_mobject.Text.html#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\") or [`Tex`](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\")).\n* **label\\_fill\\_color** (*str*) – Sets the fill color of the default labels generated when `labels`\nis set to `True`. Has no effect for other values of `labels`.\n* **layout** (*LayoutName* *\\|* *dict**\\[**Hashable**,* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")*]* *\\|* [*LayoutFunction*](manim.mobject.graph.LayoutFunction.html#manim.mobject.graph.LayoutFunction \"manim.mobject.graph.LayoutFunction\")) – Either one of `\"spring\"` (the default), `\"circular\"`, `\"kamada_kawai\"`,\n`\"planar\"`, `\"random\"`, `\"shell\"`, `\"spectral\"`, `\"spiral\"`, `\"tree\"`, and `\"partite\"`\nfor automatic vertex positioning using `networkx`\n(see [their documentation](https://networkx.org/documentation/stable/reference/drawing.html#module-networkx.drawing.layout)\nfor more details), or a dictionary specifying a coordinate (value)\nfor each vertex (key) for manual positioning.\n* **layout\\_config** (*dict* *\\|* *None*) – Only for automatically generated layouts. A dictionary whose entries\nare passed as keyword arguments to the automatic layout algorithm\nspecified via `layout` of `networkx`.\nThe `tree` layout also accepts a special parameter `vertex_spacing`\npassed as a keyword argument inside the `layout_config` dictionary.\nPassing a tuple `(space_x, space_y)` as this argument overrides\nthe value of `layout_scale` and ensures that vertices are arranged\nin a way such that the centers of siblings in the same layer are\nat least `space_x` units apart horizontally, and neighboring layers\nare spaced `space_y` units vertically.\n* **layout\\_scale** (*float* *\\|* *tuple**\\[**float**,* *float**,* *float**]*) – The scale of automatically generated layouts: the vertices will\nbe arranged such that the coordinates are located within the\ninterval `[-scale, scale]`. Some layouts accept a tuple `(scale_x, scale_y)`\ncausing the first coordinate to be in the interval `[-scale_x, scale_x]`,\nand the second in `[-scale_y, scale_y]`. Default: 2\\.\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying vertices in the scene.\n* **vertex\\_config** (*dict* *\\|* *None*) – Either a dictionary containing keyword arguments to be passed to\nthe class specified via `vertex_type`, or a dictionary whose keys\nare the vertices, and whose values are dictionaries containing keyword\narguments for the mobject related to the corresponding vertex.\n* **vertex\\_mobjects** (*dict* *\\|* *None*) – A dictionary whose keys are the vertices, and whose values are\nmobjects to be used as vertices. Passing vertices here overrides\nall other configuration options for a vertex.\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying edges in the scene.\n* **edge\\_config** (*dict* *\\|* *None*) – Either a dictionary containing keyword arguments to be passed\nto the class specified via `edge_type`, or a dictionary whose\nkeys are the edges, and whose values are dictionaries containing\nkeyword arguments for the mobject related to the corresponding edge.\nYou can further customize the tip by adding a `tip_config` dictionary\nfor global styling, or by adding the dict to a specific `edge_config`.\n* **partitions** (*Sequence**\\[**Sequence**\\[**Hashable**]**]* *\\|* *None*)\n* **root\\_vertex** (*Hashable* *\\|* *None*)\nExamples\nExample: MovingDiGraph [¶](#movingdigraph)\n```\nfrom manim import *\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = DiGraph(vertices, edges)\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()\n```\n```\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = DiGraph(vertices, edges)\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()\n```\nYou can customize the edges and arrow tips globally or locally.\nExample: CustomDiGraph [¶](#customdigraph)\n```\nfrom manim import *\nclass CustomDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\n                \"tip_shape\": ArrowSquareTip,\n                \"tip_length\": 0.15,\n            },\n            (3, 4): {\n                \"color\": RED,\n                \"tip_config\": {\"tip_length\": 0.25, \"tip_width\": 0.25}\n            },\n        }\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n        self.play(Create(g))\n        self.wait()\n```\n```\nclass CustomDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\n                \"tip_shape\": ArrowSquareTip,\n                \"tip_length\": 0.15,\n            },\n            (3, 4): {\n                \"color\": RED,\n                \"tip_config\": {\"tip_length\": 0.25, \"tip_width\": 0.25}\n            },\n        }\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n        self.play(Create(g))\n        self.wait()\n```\nSince this implementation respects the labels boundary you can also use\nit for an undirected moving graph with labels.\nExample: UndirectedMovingDiGraph [¶](#undirectedmovingdigraph)\n```\nfrom manim import *\nclass UndirectedMovingDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\"tip_length\": 0, \"tip_width\": 0},\n            (3, 4): {\"color\": RED},\n        }\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n        self.play(Create(g))\n        self.wait()\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([-1.5, -1.5, -1]),\n            g[4].animate.move_to([1, -2, -1]),\n        )\n        self.wait()\n```\n```\nclass UndirectedMovingDiGraph(Scene):\n    def construct(self):\n        vertices = [i for i in range(5)]\n        edges = [\n            (0, 1),\n            (1, 2),\n            (3, 2),\n            (3, 4),\n        ]\n        edge_config = {\n            \"stroke_width\": 2,\n            \"tip_config\": {\"tip_length\": 0, \"tip_width\": 0},\n            (3, 4): {\"color\": RED},\n        }\n        g = DiGraph(\n            vertices,\n            edges,\n            labels=True,\n            layout=\"circular\",\n            edge_config=edge_config,\n        ).scale(1.4)\n        self.play(Create(g))\n        self.wait()\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([-1.5, -1.5, -1]),\n            g[4].animate.move_to([1, -2, -1]),\n        )\n        self.wait()\n```\nMethods\n| [`update_edges`](#manim.mobject.graph.DiGraph.update_edges \"manim.mobject.graph.DiGraph.update_edges\") | Updates the edges to stick at their corresponding vertices. |\n| --- | --- |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n*static* \\_empty\\_networkx\\_graph()[\\[source]](../_modules/manim/mobject/graph.html#DiGraph._empty_networkx_graph)[¶](#manim.mobject.graph.DiGraph._empty_networkx_graph \"Link to this definition\")\nReturn an empty networkx graph for the given graph type.\nReturn type:\n*DiGraph*\n\\_original\\_\\_init\\_\\_(*vertices*, *edges*, *labels\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *layout\\='spring'*, *layout\\_scale\\=2*, *layout\\_config\\=None*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobjects\\=None*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *partitions\\=None*, *root\\_vertex\\=None*, *edge\\_config\\=None*)[¶](#manim.mobject.graph.DiGraph._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertices** (*Sequence**\\[**Hashable**]*)\n* **edges** (*Sequence**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*)\n* **labels** (*bool* *\\|* *dict*)\n* **label\\_fill\\_color** (*str*)\n* **layout** (*Literal**\\[**'circular'**,* *'kamada\\_kawai'**,* *'partite'**,* *'planar'**,* *'random'**,* *'shell'**,* *'spectral'**,* *'spiral'**,* *'spring'**,* *'tree'**]* *\\|* *dict**\\[**\\~collections.abc.Hashable**,* *TypeAliasForwardRef**(**'\\~manim.typing.Point3DLike'**)**]* *\\|* *\\~manim.mobject.graph.LayoutFunction*)\n* **layout\\_scale** (*float* *\\|* *tuple**\\[**float**,* *float**,* *float**]*)\n* **layout\\_config** (*dict* *\\|* *None*)\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\n* **vertex\\_config** (*dict* *\\|* *None*)\n* **vertex\\_mobjects** (*dict* *\\|* *None*)\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\n* **partitions** (*Sequence**\\[**Sequence**\\[**Hashable**]**]* *\\|* *None*)\n* **root\\_vertex** (*Hashable* *\\|* *None*)\n* **edge\\_config** (*dict* *\\|* *None*)\nReturn type:\nNone\n\\_populate\\_edge\\_dict(*edges*, *edge\\_type*)[\\[source]](../_modules/manim/mobject/graph.html#DiGraph._populate_edge_dict)[¶](#manim.mobject.graph.DiGraph._populate_edge_dict \"Link to this definition\")\nHelper method for populating the edges of the graph.\nParameters:\n* **edges** (*list**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*)\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\nupdate\\_edges(*graph*)[\\[source]](../_modules/manim/mobject/graph.html#DiGraph.update_edges)[¶](#manim.mobject.graph.DiGraph.update_edges \"Link to this definition\")\nUpdates the edges to stick at their corresponding vertices.\nArrow tips need to be repositioned since otherwise they can be\ndeformed.",
  "scraped_at": "2025-06-24T17:51:32.181614",
  "content_length": 13486,
  "domain": "docs.manim.community",
  "word_count": 1260,
  "inspection_status": "approved",
  "filename": "DiGraph - Manim Community v0.19.0_20250624_175132.json",
  "saved_at": "2025-06-24T17:51:32.181728",
  "approved_at": "2025-06-25T17:18:58.445329"
}