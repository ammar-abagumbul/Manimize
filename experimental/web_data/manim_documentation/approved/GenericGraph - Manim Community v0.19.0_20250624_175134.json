{
  "doc_id": "b0256117ffb3aa039eacad7082cfc360",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graph.GenericGraph.html",
  "title": "GenericGraph - Manim Community v0.19.0",
  "content": "GenericGraph[¶](#genericgraph \"Link to this heading\")\n=====================================================\nQualified name: `manim.mobject.graph.GenericGraph`\n*class* GenericGraph(*vertices*, *edges*, *labels\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *layout\\='spring'*, *layout\\_scale\\=2*, *layout\\_config\\=None*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobjects\\=None*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *partitions\\=None*, *root\\_vertex\\=None*, *edge\\_config\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph)[¶](#manim.mobject.graph.GenericGraph \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nAbstract base class for graphs (that is, a collection of vertices\nconnected with edges).\nGraphs can be instantiated by passing both a list of (distinct, hashable)\nvertex names, together with list of edges (as tuples of vertex names). See\nthe examples for concrete implementations of this class for details.\nNote\nThis implementation uses updaters to make the edges move with\nthe vertices.\nSee also\n[`Graph`](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\"), [`DiGraph`](manim.mobject.graph.DiGraph.html#manim.mobject.graph.DiGraph \"manim.mobject.graph.DiGraph\")\nParameters:\n* **vertices** (*Sequence**\\[**Hashable**]*) – A list of vertices. Must be hashable elements.\n* **edges** (*Sequence**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*) – A list of edges, specified as tuples `(u, v)` where both `u`\nand `v` are vertices.\n* **labels** (*bool* *\\|* *dict*) – Controls whether or not vertices are labeled. If `False` (the default),\nthe vertices are not labeled; if `True` they are labeled using their\nnames (as specified in `vertices`) via [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\"). Alternatively,\ncustom labels can be specified by passing a dictionary whose keys are\nthe vertices, and whose values are the corresponding vertex labels\n(rendered via, e.g., [`Text`](manim.mobject.text.text_mobject.Text.html#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\") or [`Tex`](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\")).\n* **label\\_fill\\_color** (*str*) – Sets the fill color of the default labels generated when `labels`\nis set to `True`. Has no effect for other values of `labels`.\n* **layout** (*LayoutName* *\\|* *dict**\\[**Hashable**,* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")*]* *\\|* [*LayoutFunction*](manim.mobject.graph.LayoutFunction.html#manim.mobject.graph.LayoutFunction \"manim.mobject.graph.LayoutFunction\")) – Either one of `\"spring\"` (the default), `\"circular\"`, `\"kamada_kawai\"`,\n`\"planar\"`, `\"random\"`, `\"shell\"`, `\"spectral\"`, `\"spiral\"`, `\"tree\"`, and `\"partite\"`\nfor automatic vertex positioning primarily using `networkx`\n(see [their documentation](https://networkx.org/documentation/stable/reference/drawing.html#module-networkx.drawing.layout)\nfor more details), a dictionary specifying a coordinate (value)\nfor each vertex (key) for manual positioning, or a .:class:\\~.LayoutFunction with a user\\-defined automatic layout.\n* **layout\\_config** (*dict* *\\|* *None*) – Only for automatic layouts. A dictionary whose entries\nare passed as keyword arguments to the named layout or automatic layout function\nspecified via `layout`.\nThe `tree` layout also accepts a special parameter `vertex_spacing`\npassed as a keyword argument inside the `layout_config` dictionary.\nPassing a tuple `(space_x, space_y)` as this argument overrides\nthe value of `layout_scale` and ensures that vertices are arranged\nin a way such that the centers of siblings in the same layer are\nat least `space_x` units apart horizontally, and neighboring layers\nare spaced `space_y` units vertically.\n* **layout\\_scale** (*float* *\\|* *tuple**\\[**float**,* *float**,* *float**]*) – The scale of automatically generated layouts: the vertices will\nbe arranged such that the coordinates are located within the\ninterval `[-scale, scale]`. Some layouts accept a tuple `(scale_x, scale_y)`\ncausing the first coordinate to be in the interval `[-scale_x, scale_x]`,\nand the second in `[-scale_y, scale_y]`. Default: 2\\.\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying vertices in the scene.\n* **vertex\\_config** (*dict* *\\|* *None*) – Either a dictionary containing keyword arguments to be passed to\nthe class specified via `vertex_type`, or a dictionary whose keys\nare the vertices, and whose values are dictionaries containing keyword\narguments for the mobject related to the corresponding vertex.\n* **vertex\\_mobjects** (*dict* *\\|* *None*) – A dictionary whose keys are the vertices, and whose values are\nmobjects to be used as vertices. Passing vertices here overrides\nall other configuration options for a vertex.\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying edges in the scene.\nMust be a subclass of [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\") for default updaters to work.\n* **edge\\_config** (*dict* *\\|* *None*) – Either a dictionary containing keyword arguments to be passed\nto the class specified via `edge_type`, or a dictionary whose\nkeys are the edges, and whose values are dictionaries containing\nkeyword arguments for the mobject related to the corresponding edge.\n* **partitions** (*Sequence**\\[**Sequence**\\[**Hashable**]**]* *\\|* *None*)\n* **root\\_vertex** (*Hashable* *\\|* *None*)\nMethods\n| [`add_edges`](#manim.mobject.graph.GenericGraph.add_edges \"manim.mobject.graph.GenericGraph.add_edges\") | Add new edges to the graph. |\n| --- | --- |\n| [`add_vertices`](#manim.mobject.graph.GenericGraph.add_vertices \"manim.mobject.graph.GenericGraph.add_vertices\") | Add a list of vertices to the graph. |\n| [`change_layout`](#manim.mobject.graph.GenericGraph.change_layout \"manim.mobject.graph.GenericGraph.change_layout\") | Change the layout of this graph. |\n| [`from_networkx`](#manim.mobject.graph.GenericGraph.from_networkx \"manim.mobject.graph.GenericGraph.from_networkx\") | Build a [`Graph`](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\") or [`DiGraph`](manim.mobject.graph.DiGraph.html#manim.mobject.graph.DiGraph \"manim.mobject.graph.DiGraph\") from a given `networkx` graph. |\n| [`remove_edges`](#manim.mobject.graph.GenericGraph.remove_edges \"manim.mobject.graph.GenericGraph.remove_edges\") | Remove several edges from the graph. |\n| [`remove_vertices`](#manim.mobject.graph.GenericGraph.remove_vertices \"manim.mobject.graph.GenericGraph.remove_vertices\") | Remove several vertices from the graph. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_add\\_edge(*edge*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *edge\\_config\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._add_edge)[¶](#manim.mobject.graph.GenericGraph._add_edge \"Link to this definition\")\nAdd a new edge to the graph.\nParameters:\n* **edge** (*tuple**\\[**Hashable**,* *Hashable**]*) – The edge (as a tuple of vertex identifiers) to be added. If a non\\-existing\nvertex is passed, a new vertex with default settings will be created. Create\nnew vertices yourself beforehand to customize them.\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying edges in the scene.\n* **edge\\_config** (*dict* *\\|* *None*) – A dictionary containing keyword arguments to be passed\nto the class specified via `edge_type`.\nReturns:\nA group containing all newly added vertices and edges.\nReturn type:\n[Group](manim.mobject.mobject.Group.html#manim.mobject.mobject.Group \"manim.mobject.mobject.Group\")\n\\_add\\_vertex(*vertex*, *position\\=None*, *label\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobject\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._add_vertex)[¶](#manim.mobject.graph.GenericGraph._add_vertex \"Link to this definition\")\nAdd a vertex to the graph.\nParameters:\n* **vertex** (*Hashable*) – A hashable vertex identifier.\n* **position** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*) – The coordinates where the new vertex should be added. If `None`, the center\nof the graph is used.\n* **label** (*bool*) – Controls whether or not the vertex is labeled. If `False` (the default),\nthe vertex is not labeled; if `True` it is labeled using its\nnames (as specified in `vertex`) via [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\"). Alternatively,\nany [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") can be passed to be used as the label.\n* **label\\_fill\\_color** (*str*) – Sets the fill color of the default labels generated when `labels`\nis set to `True`. Has no effect for other values of `label`.\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying vertices in the scene.\n* **vertex\\_config** (*dict* *\\|* *None*) – A dictionary containing keyword arguments to be passed to\nthe class specified via `vertex_type`.\n* **vertex\\_mobject** (*dict* *\\|* *None*) – The mobject to be used as the vertex. Overrides all other\nvertex customization options.\nReturn type:\n[Mobject](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\n*static* \\_empty\\_networkx\\_graph()[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._empty_networkx_graph)[¶](#manim.mobject.graph.GenericGraph._empty_networkx_graph \"Link to this definition\")\nReturn an empty networkx graph for the given graph type.\nReturn type:\n*Graph*\n\\_original\\_\\_init\\_\\_(*vertices*, *edges*, *labels\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *layout\\='spring'*, *layout\\_scale\\=2*, *layout\\_config\\=None*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobjects\\=None*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *partitions\\=None*, *root\\_vertex\\=None*, *edge\\_config\\=None*)[¶](#manim.mobject.graph.GenericGraph._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertices** (*Sequence**\\[**Hashable**]*)\n* **edges** (*Sequence**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*)\n* **labels** (*bool* *\\|* *dict*)\n* **label\\_fill\\_color** (*str*)\n* **layout** (*Literal**\\[**'circular'**,* *'kamada\\_kawai'**,* *'partite'**,* *'planar'**,* *'random'**,* *'shell'**,* *'spectral'**,* *'spiral'**,* *'spring'**,* *'tree'**]* *\\|* *dict**\\[**\\~collections.abc.Hashable**,* *TypeAliasForwardRef**(**'\\~manim.typing.Point3DLike'**)**]* *\\|* *\\~manim.mobject.graph.LayoutFunction*)\n* **layout\\_scale** (*float* *\\|* *tuple**\\[**float**,* *float**,* *float**]*)\n* **layout\\_config** (*dict* *\\|* *None*)\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\n* **vertex\\_config** (*dict* *\\|* *None*)\n* **vertex\\_mobjects** (*dict* *\\|* *None*)\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\n* **partitions** (*Sequence**\\[**Sequence**\\[**Hashable**]**]* *\\|* *None*)\n* **root\\_vertex** (*Hashable* *\\|* *None*)\n* **edge\\_config** (*dict* *\\|* *None*)\nReturn type:\nNone\n\\_populate\\_edge\\_dict(*edges*, *edge\\_type*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._populate_edge_dict)[¶](#manim.mobject.graph.GenericGraph._populate_edge_dict \"Link to this definition\")\nHelper method for populating the edges of the graph.\nParameters:\n* **edges** (*list**\\[**tuple**\\[**Hashable**,* *Hashable**]**]*)\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*)\n\\_remove\\_edge(*edge*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._remove_edge)[¶](#manim.mobject.graph.GenericGraph._remove_edge \"Link to this definition\")\nRemove an edge from the graph.\nParameters:\n**edge** (*tuple**\\[**Hashable**]*) – The edge (i.e., a tuple of vertex identifiers) to be removed from the graph.\nReturns:\nThe removed edge.\nReturn type:\n[Mobject](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\n\\_remove\\_vertex(*vertex*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph._remove_vertex)[¶](#manim.mobject.graph.GenericGraph._remove_vertex \"Link to this definition\")\nRemove a vertex (as well as all incident edges) from the graph.\nParameters:\n**vertex** – The identifier of a vertex to be removed.\nReturns:\nA mobject containing all removed objects.\nReturn type:\n[Group](manim.mobject.mobject.Group.html#manim.mobject.mobject.Group \"manim.mobject.mobject.Group\")\nadd\\_edges(*\\*edges*, *edge\\_type\\=\\<class 'manim.mobject.geometry.line.Line'\\>*, *edge\\_config\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.add_edges)[¶](#manim.mobject.graph.GenericGraph.add_edges \"Link to this definition\")\nAdd new edges to the graph.\nParameters:\n* **edges** (*tuple**\\[**Hashable**,* *Hashable**]*) – Edges (as tuples of vertex identifiers) to be added. If a non\\-existing\nvertex is passed, a new vertex with default settings will be created. Create\nnew vertices yourself beforehand to customize them.\n* **edge\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying edges in the scene.\n* **edge\\_config** (*dict* *\\|* *None*) – A dictionary either containing keyword arguments to be passed\nto the class specified via `edge_type`, or a dictionary\nwhose keys are the edge tuples, and whose values are dictionaries\ncontaining keyword arguments to be passed for the construction\nof the corresponding edge.\n* **kwargs** – Any further keyword arguments are passed to [`add_vertices()`](#manim.mobject.graph.GenericGraph.add_vertices \"manim.mobject.graph.GenericGraph.add_vertices\")\nwhich is used to create new vertices in the passed edges.\nReturns:\nA group containing all newly added vertices and edges.\nReturn type:\n[Group](manim.mobject.mobject.Group.html#manim.mobject.mobject.Group \"manim.mobject.mobject.Group\")\nadd\\_vertices(*\\*vertices*, *positions\\=None*, *labels\\=False*, *label\\_fill\\_color\\=ManimColor('\\#000000')*, *vertex\\_type\\=\\<class 'manim.mobject.geometry.arc.Dot'\\>*, *vertex\\_config\\=None*, *vertex\\_mobjects\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.add_vertices)[¶](#manim.mobject.graph.GenericGraph.add_vertices \"Link to this definition\")\nAdd a list of vertices to the graph.\nParameters:\n* **vertices** (*Hashable*) – Hashable vertex identifiers.\n* **positions** (*dict* *\\|* *None*) – A dictionary specifying the coordinates where the new vertices should be added.\nIf `None`, all vertices are created at the center of the graph.\n* **labels** (*bool*) – Controls whether or not the vertex is labeled. If `False` (the default),\nthe vertex is not labeled; if `True` it is labeled using its\nnames (as specified in `vertex`) via [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\"). Alternatively,\nany [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") can be passed to be used as the label.\n* **label\\_fill\\_color** (*str*) – Sets the fill color of the default labels generated when `labels`\nis set to `True`. Has no effect for other values of `labels`.\n* **vertex\\_type** (*type**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The mobject class used for displaying vertices in the scene.\n* **vertex\\_config** (*dict* *\\|* *None*) – A dictionary containing keyword arguments to be passed to\nthe class specified via `vertex_type`.\n* **vertex\\_mobjects** (*dict* *\\|* *None*) – A dictionary whose keys are the vertex identifiers, and whose\nvalues are mobjects that should be used as vertices. Overrides\nall other vertex customization options.\n* **self** ([*Graph*](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\"))\nchange\\_layout(*layout\\='spring'*, *layout\\_scale\\=2*, *layout\\_config\\=None*, *partitions\\=None*, *root\\_vertex\\=None*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.change_layout)[¶](#manim.mobject.graph.GenericGraph.change_layout \"Link to this definition\")\nChange the layout of this graph.\nSee the documentation of [`Graph`](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\") for details about the\nkeyword arguments.\nExamples\nExample: ChangeGraphLayout [¶](#changegraphlayout)\n```\nfrom manim import *\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()\n```\n```\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()\n```\nParameters:\n* **layout** (*Literal**\\[**'circular'**,* *'kamada\\_kawai'**,* *'partite'**,* *'planar'**,* *'random'**,* *'shell'**,* *'spectral'**,* *'spiral'**,* *'spring'**,* *'tree'**]* *\\|* *dict**\\[**\\~collections.abc.Hashable**,* *TypeAliasForwardRef**(**'\\~manim.typing.Point3DLike'**)**]* *\\|* *\\~manim.mobject.graph.LayoutFunction*)\n* **layout\\_scale** (*float* *\\|* *tuple**\\[**float**,* *float**,* *float**]*)\n* **layout\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n* **partitions** (*list**\\[**list**\\[**Hashable**]**]* *\\|* *None*)\n* **root\\_vertex** (*Hashable* *\\|* *None*)\nReturn type:\n[*Graph*](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\")\n*classmethod* from\\_networkx(*nxgraph*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.from_networkx)[¶](#manim.mobject.graph.GenericGraph.from_networkx \"Link to this definition\")\nBuild a [`Graph`](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\") or [`DiGraph`](manim.mobject.graph.DiGraph.html#manim.mobject.graph.DiGraph \"manim.mobject.graph.DiGraph\") from a\ngiven `networkx` graph.\nParameters:\n* **nxgraph** (*Graph* *\\|* *DiGraph*) – A `networkx` graph or digraph.\n* **\\*\\*kwargs** – Keywords to be passed to the constructor of [`Graph`](manim.mobject.graph.Graph.html#manim.mobject.graph.Graph \"manim.mobject.graph.Graph\").\nExamples\nExample: ImportNetworkxGraph [¶](#importnetworkxgraph)\n```\nfrom manim import *\nimport networkx as nx\nnxgraph = nx.erdos_renyi_graph(14, 0.5)\nclass ImportNetworkxGraph(Scene):\n    def construct(self):\n        G = Graph.from_networkx(nxgraph, layout=\"spring\", layout_scale=3.5)\n        self.play(Create(G))\n        self.play(*[G[v].animate.move_to(5*RIGHT*np.cos(ind/7 * PI) +\n                                         3*UP*np.sin(ind/7 * PI))\n                    for ind, v in enumerate(G.vertices)])\n        self.play(Uncreate(G))\n```\n```\nimport networkx as nx\nnxgraph = nx.erdos_renyi_graph(14, 0.5)\nclass ImportNetworkxGraph(Scene):\n    def construct(self):\n        G = Graph.from_networkx(nxgraph, layout=\"spring\", layout_scale=3.5)\n        self.play(Create(G))\n        self.play(*[G[v].animate.move_to(5*RIGHT*np.cos(ind/7 * PI) +\n                                         3*UP*np.sin(ind/7 * PI))\n                    for ind, v in enumerate(G.vertices)])\n        self.play(Uncreate(G))\n```\nremove\\_edges(*\\*edges*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.remove_edges)[¶](#manim.mobject.graph.GenericGraph.remove_edges \"Link to this definition\")\nRemove several edges from the graph.\nParameters:\n**edges** (*tuple**\\[**Hashable**]*) – Edges to be removed from the graph.\nReturns:\nA group containing all removed edges.\nReturn type:\n[Group](manim.mobject.mobject.Group.html#manim.mobject.mobject.Group \"manim.mobject.mobject.Group\")\nremove\\_vertices(*\\*vertices*)[\\[source]](../_modules/manim/mobject/graph.html#GenericGraph.remove_vertices)[¶](#manim.mobject.graph.GenericGraph.remove_vertices \"Link to this definition\")\nRemove several vertices from the graph.\nParameters:\n**vertices** – Vertices to be removed from the graph.\nExamples\n```\n>>> G = Graph([1, 2, 3], [(1, 2), (2, 3)])\n>>> removed = G.remove_vertices(2, 3); removed\nVGroup(Line, Line, Dot, Dot)\n>>> G\nUndirected graph on 1 vertices and 0 edges\n```",
  "scraped_at": "2025-06-24T17:51:34.749088",
  "content_length": 22248,
  "domain": "docs.manim.community",
  "word_count": 2031,
  "inspection_status": "approved",
  "filename": "GenericGraph - Manim Community v0.19.0_20250624_175134.json",
  "saved_at": "2025-06-24T17:51:34.749257",
  "approved_at": "2025-06-25T17:18:58.457196"
}