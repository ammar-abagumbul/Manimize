{
  "doc_id": "abaa579a678244aeac00973398be817e",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.types.image_mobject.ImageMobject.html",
  "title": "ImageMobject - Manim Community v0.19.0",
  "content": "ImageMobject[¶](#imagemobject \"Link to this heading\")\n=====================================================\nQualified name: `manim.mobject.types.image\\_mobject.ImageMobject`\n*class* ImageMobject(*filename\\_or\\_array*, *scale\\_to\\_resolution\\=1080*, *invert\\=False*, *image\\_mode\\='RGBA'*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject)[¶](#manim.mobject.types.image_mobject.ImageMobject \"Link to this definition\")\nBases: [`AbstractImageMobject`](manim.mobject.types.image_mobject.AbstractImageMobject.html#manim.mobject.types.image_mobject.AbstractImageMobject \"manim.mobject.types.image_mobject.AbstractImageMobject\")\nDisplays an Image from a numpy array or a file.\nParameters:\n* **scale\\_to\\_resolution** (*int*) – At this resolution the image is placed pixel by pixel onto the screen, so it\nwill look the sharpest and best.\nThis is a custom parameter of ImageMobject so that rendering a scene with\ne.g. the `--quality low` or `--quality medium` flag for faster rendering\nwon’t effect the position of the image on the screen.\n* **filename\\_or\\_array** ([*StrPath*](manim.typing.html#manim.typing.StrPath \"manim.typing.StrPath\") *\\|* *npt.NDArray*)\n* **invert** (*bool*)\n* **image\\_mode** (*str*)\n* **kwargs** (*Any*)\nExample\nExample: ImageFromArray [¶](#imagefromarray)\n![../_images/ImageFromArray-1.png](../_images/ImageFromArray-1.png)\n```\nfrom manim import *\nclass ImageFromArray(Scene):\n    def construct(self):\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        self.add(image)\n```\n```\nclass ImageFromArray(Scene):\n    def construct(self):\n        image = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                       [255, 0, 5, 33]]))\n        image.height = 7\n        self.add(image)\n```\nChanging interpolation style:\nExample: ImageInterpolationEx [¶](#imageinterpolationex)\n![../_images/ImageInterpolationEx-1.png](../_images/ImageInterpolationEx-1.png)\n```\nfrom manim import *\nclass ImageInterpolationEx(Scene):\n    def construct(self):\n        img = ImageMobject(np.uint8([[63, 0, 0, 0],\n                                        [0, 127, 0, 0],\n                                        [0, 0, 191, 0],\n                                        [0, 0, 0, 255]\n                                        ]))\n        img.height = 2\n        img1 = img.copy()\n        img2 = img.copy()\n        img3 = img.copy()\n        img4 = img.copy()\n        img5 = img.copy()\n        img1.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"])\n        img2.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"lanczos\"])\n        img3.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"linear\"])\n        img4.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"])\n        img5.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"box\"])\n        img1.add(Text(\"nearest\").scale(0.5).next_to(img1,UP))\n        img2.add(Text(\"lanczos\").scale(0.5).next_to(img2,UP))\n        img3.add(Text(\"linear\").scale(0.5).next_to(img3,UP))\n        img4.add(Text(\"cubic\").scale(0.5).next_to(img4,UP))\n        img5.add(Text(\"box\").scale(0.5).next_to(img5,UP))\n        x= Group(img1,img2,img3,img4,img5)\n        x.arrange()\n        self.add(x)\n```\n```\nclass ImageInterpolationEx(Scene):\n    def construct(self):\n        img = ImageMobject(np.uint8([[63, 0, 0, 0],\n                                        [0, 127, 0, 0],\n                                        [0, 0, 191, 0],\n                                        [0, 0, 0, 255]\n                                        ]))\n        img.height = 2\n        img1 = img.copy()\n        img2 = img.copy()\n        img3 = img.copy()\n        img4 = img.copy()\n        img5 = img.copy()\n        img1.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"])\n        img2.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"lanczos\"])\n        img3.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"linear\"])\n        img4.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"])\n        img5.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"box\"])\n        img1.add(Text(\"nearest\").scale(0.5).next_to(img1,UP))\n        img2.add(Text(\"lanczos\").scale(0.5).next_to(img2,UP))\n        img3.add(Text(\"linear\").scale(0.5).next_to(img3,UP))\n        img4.add(Text(\"cubic\").scale(0.5).next_to(img4,UP))\n        img5.add(Text(\"box\").scale(0.5).next_to(img5,UP))\n        x= Group(img1,img2,img3,img4,img5)\n        x.arrange()\n        self.add(x)\n```\nMethods\n| [`fade`](#manim.mobject.types.image_mobject.ImageMobject.fade \"manim.mobject.types.image_mobject.ImageMobject.fade\") | Sets the image's opacity using a 1 \\- alpha relationship. |\n| --- | --- |\n| [`get_pixel_array`](#manim.mobject.types.image_mobject.ImageMobject.get_pixel_array \"manim.mobject.types.image_mobject.ImageMobject.get_pixel_array\") | A simple getter method. |\n| `get_style` |  |\n| [`interpolate_color`](#manim.mobject.types.image_mobject.ImageMobject.interpolate_color \"manim.mobject.types.image_mobject.ImageMobject.interpolate_color\") | Interpolates the array of pixel color values from one ImageMobject into an array of equal size in the target ImageMobject. |\n| [`set_color`](#manim.mobject.types.image_mobject.ImageMobject.set_color \"manim.mobject.types.image_mobject.ImageMobject.set_color\") | Condition is function which takes in one arguments, (x, y, z). |\n| [`set_opacity`](#manim.mobject.types.image_mobject.ImageMobject.set_opacity \"manim.mobject.types.image_mobject.ImageMobject.set_opacity\") | Sets the image's opacity. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `depth` | The depth of the mobject. |\n| `height` | The height of the mobject. |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*filename\\_or\\_array*, *scale\\_to\\_resolution\\=1080*, *invert\\=False*, *image\\_mode\\='RGBA'*, *\\*\\*kwargs*)[¶](#manim.mobject.types.image_mobject.ImageMobject._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **filename\\_or\\_array** ([*StrPath*](manim.typing.html#manim.typing.StrPath \"manim.typing.StrPath\") *\\|* *npt.NDArray*)\n* **scale\\_to\\_resolution** (*int*)\n* **invert** (*bool*)\n* **image\\_mode** (*str*)\n* **kwargs** (*Any*)\nReturn type:\nNone\nfade(*darkness\\=0\\.5*, *family\\=True*)[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject.fade)[¶](#manim.mobject.types.image_mobject.ImageMobject.fade \"Link to this definition\")\nSets the image’s opacity using a 1 \\- alpha relationship.\nParameters:\n* **darkness** (*float*) – The alpha value of the object, 1 being transparent and 0 being\nopaque.\n* **family** (*bool*) – Whether the submobjects of the ImageMobject should be affected.\nReturn type:\nSelf\nget\\_pixel\\_array()[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject.get_pixel_array)[¶](#manim.mobject.types.image_mobject.ImageMobject.get_pixel_array \"Link to this definition\")\nA simple getter method.\ninterpolate\\_color(*mobject1*, *mobject2*, *alpha*)[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject.interpolate_color)[¶](#manim.mobject.types.image_mobject.ImageMobject.interpolate_color \"Link to this definition\")\nInterpolates the array of pixel color values from one ImageMobject\ninto an array of equal size in the target ImageMobject.\nParameters:\n* **mobject1** ([*ImageMobject*](#manim.mobject.types.image_mobject.ImageMobject \"manim.mobject.types.image_mobject.ImageMobject\")) – The ImageMobject to transform from.\n* **mobject2** ([*ImageMobject*](#manim.mobject.types.image_mobject.ImageMobject \"manim.mobject.types.image_mobject.ImageMobject\")) – The ImageMobject to transform into.\n* **alpha** (*float*) – Used to track the lerp relationship. Not opacity related.\nReturn type:\nNone\nset\\_color(*color*, *alpha\\=None*, *family\\=True*)[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject.set_color)[¶](#manim.mobject.types.image_mobject.ImageMobject.set_color \"Link to this definition\")\nCondition is function which takes in one arguments, (x, y, z).\nHere it just recurses to submobjects, but in subclasses this\nshould be further implemented based on the the inner workings\nof color\nset\\_opacity(*alpha*)[\\[source]](../_modules/manim/mobject/types/image_mobject.html#ImageMobject.set_opacity)[¶](#manim.mobject.types.image_mobject.ImageMobject.set_opacity \"Link to this definition\")\nSets the image’s opacity.\nParameters:\n**alpha** (*float*) – The alpha value of the object, 1 being opaque and 0 being\ntransparent.\nReturn type:\nSelf",
  "scraped_at": "2025-06-24T17:58:44.376364",
  "content_length": 8635,
  "domain": "docs.manim.community",
  "word_count": 646,
  "inspection_status": "approved",
  "filename": "ImageMobject - Manim Community v0.19.0_20250624_175844.json",
  "saved_at": "2025-06-24T17:58:44.376430",
  "approved_at": "2025-06-25T17:18:58.432795"
}