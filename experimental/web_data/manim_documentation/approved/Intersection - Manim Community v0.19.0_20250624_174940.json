{
  "doc_id": "6c10b7375e506cebf63d4620f5fad8d1",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.boolean_ops.Intersection.html",
  "title": "Intersection - Manim Community v0.19.0",
  "content": "Intersection[¶](#intersection \"Link to this heading\")\n=====================================================\nQualified name: `manim.mobject.geometry.boolean\\_ops.Intersection`\n*class* Intersection(*\\*vmobjects*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/boolean_ops.html#Intersection)[¶](#manim.mobject.geometry.boolean_ops.Intersection \"Link to this definition\")\nBases: `_BooleanOps`\nFind the intersection of two [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") s.\nThis keeps the parts covered by both [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") s.\nParameters:\n* **vmobjects** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") to find the intersection.\n* **kwargs** (*Any*)\nRaises:\n**ValueError** – If less the 2 [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") are passed.\nExample\nExample: IntersectionExample [¶](#intersectionexample)\n![../_images/IntersectionExample-2.png](../_images/IntersectionExample-2.png)\n```\nfrom manim import *\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Intersection(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```\n```\nclass IntersectionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1)\n        sq.move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1)\n        cr.move_to([-1.3, 0.7, 0])\n        un = Intersection(sq, cr, color=GREEN, fill_opacity=1)\n        un.move_to([1.5, 0, 0])\n        self.add(sq, cr, un)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*vmobjects*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.boolean_ops.Intersection._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vmobjects** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\"))\n* **kwargs** (*Any*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:49:40.122995",
  "content_length": 3176,
  "domain": "docs.manim.community",
  "word_count": 244,
  "inspection_status": "approved",
  "filename": "Intersection - Manim Community v0.19.0_20250624_174940.json",
  "saved_at": "2025-06-24T17:49:40.123048",
  "approved_at": "2025-06-25T17:18:58.387387"
}