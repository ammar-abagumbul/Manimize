{
  "doc_id": "bc35c21363b31ee2b3eee7ed9cbe314e",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.labeled.LabeledPolygram.html",
  "title": "LabeledPolygram - Manim Community v0.19.0",
  "content": "LabeledPolygram[¶](#labeledpolygram \"Link to this heading\")\n===========================================================\nQualified name: `manim.mobject.geometry.labeled.LabeledPolygram`\n*class* LabeledPolygram(*\\*vertex\\_groups*, *label*, *precision\\=0\\.01*, *label\\_config\\=None*, *box\\_config\\=None*, *frame\\_config\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/labeled.html#LabeledPolygram)[¶](#manim.mobject.geometry.labeled.LabeledPolygram \"Link to this definition\")\nBases: [`Polygram`](manim.mobject.geometry.polygram.Polygram.html#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\")\nConstructs a polygram containing a label box at its pole of inaccessibility.\nParameters:\n* **vertex\\_groups** ([*Point3DLike\\_Array*](manim.typing.html#manim.typing.Point3DLike_Array \"manim.typing.Point3DLike_Array\")) – Vertices passed to the [`Polygram`](manim.mobject.geometry.polygram.Polygram.html#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\") constructor.\n* **label** (*str* *\\|* [*Tex*](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\") *\\|* [*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") *\\|* [*Text*](manim.mobject.text.text_mobject.Text.html#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\")) – Label that will be displayed on the Polygram.\n* **precision** (*float*) – The precision used by the PolyLabel algorithm.\n* **label\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – A dictionary containing the configuration for the label.\nThis is only applied if `label` is of type `str`.\n* **box\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – A dictionary containing the configuration for the background box.\n* **frame\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – A dictionary containing the configuration for the frame.\nNote\nThe PolyLabel Algorithm expects each vertex group to form a closed ring.\nIf the input is open, [`LabeledPolygram`](#manim.mobject.geometry.labeled.LabeledPolygram \"manim.mobject.geometry.labeled.LabeledPolygram\") will attempt to close it.\nThis may cause the polygon to intersect itself leading to unexpected results.\nTip\nMake sure the precision corresponds to the scale of your inputs!\nFor instance, if the bounding box of your polygon stretches from 0 to 10,000, a precision of 1\\.0 or 10\\.0 should be sufficient.\n* **kwargs** (*Any*)\nExamples\nExample: LabeledPolygramExample [¶](#labeledpolygramexample)\n![../_images/LabeledPolygramExample-1.png](../_images/LabeledPolygramExample-1.png)\n```\nfrom manim import *\nclass LabeledPolygramExample(Scene):\n    def construct(self):\n        # Define Rings\n        ring1 = [\n            [-3.8, -2.4, 0], [-2.4, -2.5, 0], [-1.3, -1.6, 0], [-0.2, -1.7, 0],\n            [1.7, -2.5, 0], [2.9, -2.6, 0], [3.5, -1.5, 0], [4.9, -1.4, 0],\n            [4.5, 0.2, 0], [4.7, 1.6, 0], [3.5, 2.4, 0], [1.1, 2.5, 0],\n            [-0.1, 0.9, 0], [-1.2, 0.5, 0], [-1.6, 0.7, 0], [-1.4, 1.9, 0],\n            [-2.6, 2.6, 0], [-4.4, 1.2, 0], [-4.9, -0.8, 0], [-3.8, -2.4, 0]\n        ]\n        ring2 = [\n            [0.2, -1.2, 0], [0.9, -1.2, 0], [1.4, -2.0, 0], [2.1, -1.6, 0],\n            [2.2, -0.5, 0], [1.4, 0.0, 0], [0.4, -0.2, 0], [0.2, -1.2, 0]\n        ]\n        ring3 = [[-2.7, 1.4, 0], [-2.3, 1.7, 0], [-2.8, 1.9, 0], [-2.7, 1.4, 0]]\n        # Create Polygons (for reference)\n        p1 = Polygon(*ring1, fill_opacity=0.75)\n        p2 = Polygon(*ring2, fill_color=BLACK, fill_opacity=1)\n        p3 = Polygon(*ring3, fill_color=BLACK, fill_opacity=1)\n        # Create Labeled Polygram\n        polygram = LabeledPolygram(\n            *[ring1, ring2, ring3],\n            label=Text('Pole', font='sans-serif'),\n            precision=0.01,\n        )\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n        self.add(p1, p2, p3)\n        self.add(polygram)\n        self.add(circle)\n```\n```\nclass LabeledPolygramExample(Scene):\n    def construct(self):\n        # Define Rings\n        ring1 = [\n            [-3.8, -2.4, 0], [-2.4, -2.5, 0], [-1.3, -1.6, 0], [-0.2, -1.7, 0],\n            [1.7, -2.5, 0], [2.9, -2.6, 0], [3.5, -1.5, 0], [4.9, -1.4, 0],\n            [4.5, 0.2, 0], [4.7, 1.6, 0], [3.5, 2.4, 0], [1.1, 2.5, 0],\n            [-0.1, 0.9, 0], [-1.2, 0.5, 0], [-1.6, 0.7, 0], [-1.4, 1.9, 0],\n            [-2.6, 2.6, 0], [-4.4, 1.2, 0], [-4.9, -0.8, 0], [-3.8, -2.4, 0]\n        ]\n        ring2 = [\n            [0.2, -1.2, 0], [0.9, -1.2, 0], [1.4, -2.0, 0], [2.1, -1.6, 0],\n            [2.2, -0.5, 0], [1.4, 0.0, 0], [0.4, -0.2, 0], [0.2, -1.2, 0]\n        ]\n        ring3 = [[-2.7, 1.4, 0], [-2.3, 1.7, 0], [-2.8, 1.9, 0], [-2.7, 1.4, 0]]\n        # Create Polygons (for reference)\n        p1 = Polygon(*ring1, fill_opacity=0.75)\n        p2 = Polygon(*ring2, fill_color=BLACK, fill_opacity=1)\n        p3 = Polygon(*ring3, fill_color=BLACK, fill_opacity=1)\n        # Create Labeled Polygram\n        polygram = LabeledPolygram(\n            *[ring1, ring2, ring3],\n            label=Text('Pole', font='sans-serif'),\n            precision=0.01,\n        )\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n        self.add(p1, p2, p3)\n        self.add(polygram)\n        self.add(circle)\n```\nExample: LabeledCountryExample [¶](#labeledcountryexample)\n![../_images/LabeledCountryExample-1.png](../_images/LabeledCountryExample-1.png)\n```\nfrom manim import *\nimport requests\nimport json\nclass LabeledCountryExample(Scene):\n    def construct(self):\n        # Fetch JSON data and process arcs\n        data = requests.get('https://cdn.jsdelivr.net/npm/us-atlas@3/nation-10m.json').json()\n        arcs, transform = data['arcs'], data['transform']\n        sarcs = [np.cumsum(arc, axis=0) * transform['scale'] + transform['translate'] for arc in arcs]\n        ssarcs = sorted(sarcs, key=len, reverse=True)[:1]\n        # Compute Bounding Box\n        points = np.concatenate(ssarcs)\n        mins, maxs = np.min(points, axis=0), np.max(points, axis=0)\n        # Build Axes\n        ax = Axes(\n            x_range=[mins[0], maxs[0], maxs[0] - mins[0]], x_length=10,\n            y_range=[mins[1], maxs[1], maxs[1] - mins[1]], y_length=7,\n            tips=False\n        )\n        # Adjust Coordinates\n        array = [[ax.c2p(*point) for point in sarc] for sarc in ssarcs]\n        # Add Polygram\n        polygram = LabeledPolygram(\n            *array,\n            label=Text('USA', font='sans-serif'),\n            precision=0.01,\n            fill_color=BLUE,\n            stroke_width=0,\n            fill_opacity=0.75\n        )\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n        self.add(ax)\n        self.add(polygram)\n        self.add(circle)\n```\n```\nimport requests\nimport json\nclass LabeledCountryExample(Scene):\n    def construct(self):\n        # Fetch JSON data and process arcs\n        data = requests.get('https://cdn.jsdelivr.net/npm/us-atlas@3/nation-10m.json').json()\n        arcs, transform = data['arcs'], data['transform']\n        sarcs = [np.cumsum(arc, axis=0) * transform['scale'] + transform['translate'] for arc in arcs]\n        ssarcs = sorted(sarcs, key=len, reverse=True)[:1]\n        # Compute Bounding Box\n        points = np.concatenate(ssarcs)\n        mins, maxs = np.min(points, axis=0), np.max(points, axis=0)\n        # Build Axes\n        ax = Axes(\n            x_range=[mins[0], maxs[0], maxs[0] - mins[0]], x_length=10,\n            y_range=[mins[1], maxs[1], maxs[1] - mins[1]], y_length=7,\n            tips=False\n        )\n        # Adjust Coordinates\n        array = [[ax.c2p(*point) for point in sarc] for sarc in ssarcs]\n        # Add Polygram\n        polygram = LabeledPolygram(\n            *array,\n            label=Text('USA', font='sans-serif'),\n            precision=0.01,\n            fill_color=BLUE,\n            stroke_width=0,\n            fill_opacity=0.75\n        )\n        # Display Circle (for reference)\n        circle = Circle(radius=polygram.radius, color=WHITE).move_to(polygram.pole)\n        self.add(ax)\n        self.add(polygram)\n        self.add(circle)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*vertex\\_groups*, *label*, *precision\\=0\\.01*, *label\\_config\\=None*, *box\\_config\\=None*, *frame\\_config\\=None*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.labeled.LabeledPolygram._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertex\\_groups** ([*Point3DLike\\_Array*](manim.typing.html#manim.typing.Point3DLike_Array \"manim.typing.Point3DLike_Array\"))\n* **label** (*str* *\\|* [*Tex*](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\") *\\|* [*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") *\\|* [*Text*](manim.mobject.text.text_mobject.Text.html#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\"))\n* **precision** (*float*)\n* **label\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n* **box\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n* **frame\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n* **kwargs** (*Any*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:49:56.254438",
  "content_length": 9917,
  "domain": "docs.manim.community",
  "word_count": 931,
  "inspection_status": "approved",
  "filename": "LabeledPolygram - Manim Community v0.19.0_20250624_174956.json",
  "saved_at": "2025-06-24T17:49:56.254512",
  "approved_at": "2025-06-25T17:18:58.369978"
}