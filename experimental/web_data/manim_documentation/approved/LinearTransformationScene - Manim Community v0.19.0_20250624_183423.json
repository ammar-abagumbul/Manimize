{
  "doc_id": "3ff4b6debdd1862f989169d91aaa711c",
  "url": "https://docs.manim.community/en/latest/reference/manim.scene.vector_space_scene.LinearTransformationScene.html",
  "title": "LinearTransformationScene - Manim Community v0.19.0",
  "content": "LinearTransformationScene[¶](#lineartransformationscene \"Link to this heading\")\n===============================================================================\nQualified name: `manim.scene.vector\\_space\\_scene.LinearTransformationScene`\n*class* LinearTransformationScene(*include\\_background\\_plane\\=True*, *include\\_foreground\\_plane\\=True*, *background\\_plane\\_kwargs\\=None*, *foreground\\_plane\\_kwargs\\=None*, *show\\_coordinates\\=False*, *show\\_basis\\_vectors\\=True*, *basis\\_vector\\_stroke\\_width\\=6*, *i\\_hat\\_color\\=ManimColor('\\#83C167')*, *j\\_hat\\_color\\=ManimColor('\\#FC6255')*, *leave\\_ghost\\_vectors\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene)[¶](#manim.scene.vector_space_scene.LinearTransformationScene \"Link to this definition\")\nBases: [`VectorScene`](manim.scene.vector_space_scene.VectorScene.html#manim.scene.vector_space_scene.VectorScene \"manim.scene.vector_space_scene.VectorScene\")\nThis scene contains special methods that make it\nespecially suitable for showing linear transformations.\nParameters:\n* **include\\_background\\_plane** (*bool*) – Whether or not to include the background plane in the scene.\n* **include\\_foreground\\_plane** (*bool*) – Whether or not to include the foreground plane in the scene.\n* **background\\_plane\\_kwargs** (*dict* *\\|* *None*) – Parameters to be passed to `NumberPlane` to adjust the background plane.\n* **foreground\\_plane\\_kwargs** (*dict* *\\|* *None*) – Parameters to be passed to `NumberPlane` to adjust the foreground plane.\n* **show\\_coordinates** (*bool*) – Whether or not to include the coordinates for the background plane.\n* **show\\_basis\\_vectors** (*bool*) – Whether to show the basis x\\_axis \\-\\> `i_hat` and y\\_axis \\-\\> `j_hat` vectors.\n* **basis\\_vector\\_stroke\\_width** (*float*) – The `stroke_width` of the basis vectors.\n* **i\\_hat\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the `i_hat` vector.\n* **j\\_hat\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the `j_hat` vector.\n* **leave\\_ghost\\_vectors** (*bool*) – Indicates the previous position of the basis vectors following a transformation.\nExamples\nExample: LinearTransformationSceneExample [¶](#lineartransformationsceneexample)\n```\nfrom manim import *\nclass LinearTransformationSceneExample(LinearTransformationScene):\n    def __init__(self, **kwargs):\n        LinearTransformationScene.__init__(\n            self,\n            show_coordinates=True,\n            leave_ghost_vectors=True,\n            **kwargs\n        )\n    def construct(self):\n        matrix = [[1, 1], [0, 1]]\n        self.apply_matrix(matrix)\n        self.wait()\n```\n```\nclass LinearTransformationSceneExample(LinearTransformationScene):\n    def __init__(self, **kwargs):\n        LinearTransformationScene.__init__(\n            self,\n            show_coordinates=True,\n            leave_ghost_vectors=True,\n            **kwargs\n        )\n    def construct(self):\n        matrix = [[1, 1], [0, 1]]\n        self.apply_matrix(matrix)\n        self.wait()\n```\nMethods\n| [`add_background_mobject`](#manim.scene.vector_space_scene.LinearTransformationScene.add_background_mobject \"manim.scene.vector_space_scene.LinearTransformationScene.add_background_mobject\") | Adds the mobjects to the special list self.background\\_mobjects. |\n| --- | --- |\n| [`add_foreground_mobject`](#manim.scene.vector_space_scene.LinearTransformationScene.add_foreground_mobject \"manim.scene.vector_space_scene.LinearTransformationScene.add_foreground_mobject\") | Adds the mobjects to the special list self.foreground\\_mobjects. |\n| [`add_moving_mobject`](#manim.scene.vector_space_scene.LinearTransformationScene.add_moving_mobject \"manim.scene.vector_space_scene.LinearTransformationScene.add_moving_mobject\") | Adds the mobject to the special list self.moving\\_mobject, and adds a property to the mobject called mobject.target, which keeps track of what the mobject will move to or become etc. |\n| [`add_special_mobjects`](#manim.scene.vector_space_scene.LinearTransformationScene.add_special_mobjects \"manim.scene.vector_space_scene.LinearTransformationScene.add_special_mobjects\") | Adds mobjects to a separate list that can be tracked, if these mobjects have some extra importance. |\n| [`add_title`](#manim.scene.vector_space_scene.LinearTransformationScene.add_title \"manim.scene.vector_space_scene.LinearTransformationScene.add_title\") | Adds a title, after scaling it, adding a background rectangle, moving it to the top and adding it to foreground\\_mobjects adding it as a local variable of self. |\n| [`add_transformable_label`](#manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_label \"manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_label\") | Method for creating, and animating the addition of a transformable label for the vector. |\n| [`add_transformable_mobject`](#manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_mobject \"manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_mobject\") | Adds the mobjects to the special list self.transformable\\_mobjects. |\n| [`add_unit_square`](#manim.scene.vector_space_scene.LinearTransformationScene.add_unit_square \"manim.scene.vector_space_scene.LinearTransformationScene.add_unit_square\") | Adds a unit square to the scene via self.get\\_unit\\_square. |\n| [`add_vector`](#manim.scene.vector_space_scene.LinearTransformationScene.add_vector \"manim.scene.vector_space_scene.LinearTransformationScene.add_vector\") | Adds a vector to the scene, and puts it in the special list self.moving\\_vectors. |\n| [`apply_function`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_function \"manim.scene.vector_space_scene.LinearTransformationScene.apply_function\") | Applies the given function to each of the mobjects in self.transformable\\_mobjects, and plays the animation showing this. |\n| [`apply_inverse`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse \"manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse\") | This method applies the linear transformation represented by the inverse of the passed matrix to the number plane, and each vector/similar mobject on it. |\n| [`apply_inverse_transpose`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse_transpose \"manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse_transpose\") | Applies the inverse of the transformation represented by the given transposed matrix to the number plane and each vector/similar mobject on it. |\n| [`apply_matrix`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_matrix \"manim.scene.vector_space_scene.LinearTransformationScene.apply_matrix\") | Applies the transformation represented by the given matrix to the number plane, and each vector/similar mobject on it. |\n| [`apply_nonlinear_transformation`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_nonlinear_transformation \"manim.scene.vector_space_scene.LinearTransformationScene.apply_nonlinear_transformation\") | Applies the non\\-linear transformation represented by the given function to the number plane and each vector/similar mobject on it. |\n| [`apply_transposed_matrix`](#manim.scene.vector_space_scene.LinearTransformationScene.apply_transposed_matrix \"manim.scene.vector_space_scene.LinearTransformationScene.apply_transposed_matrix\") | Applies the transformation represented by the given transposed matrix to the number plane, and each vector/similar mobject on it. |\n| [`get_ghost_vectors`](#manim.scene.vector_space_scene.LinearTransformationScene.get_ghost_vectors \"manim.scene.vector_space_scene.LinearTransformationScene.get_ghost_vectors\") | Returns all ghost vectors ever added to `self`. |\n| [`get_matrix_transformation`](#manim.scene.vector_space_scene.LinearTransformationScene.get_matrix_transformation \"manim.scene.vector_space_scene.LinearTransformationScene.get_matrix_transformation\") | Returns a function corresponding to the linear transformation represented by the matrix passed. |\n| [`get_moving_mobject_movement`](#manim.scene.vector_space_scene.LinearTransformationScene.get_moving_mobject_movement \"manim.scene.vector_space_scene.LinearTransformationScene.get_moving_mobject_movement\") | This method returns an animation that moves a mobject in \"self.moving\\_mobjects\" to its corresponding .target value. |\n| [`get_piece_movement`](#manim.scene.vector_space_scene.LinearTransformationScene.get_piece_movement \"manim.scene.vector_space_scene.LinearTransformationScene.get_piece_movement\") | This method returns an animation that moves an arbitrary mobject in \"pieces\" to its corresponding .target value. |\n| [`get_transformable_label_movement`](#manim.scene.vector_space_scene.LinearTransformationScene.get_transformable_label_movement \"manim.scene.vector_space_scene.LinearTransformationScene.get_transformable_label_movement\") | This method returns an animation that moves all labels in \"self.transformable\\_labels\" to its corresponding .target . |\n| [`get_transposed_matrix_transformation`](#manim.scene.vector_space_scene.LinearTransformationScene.get_transposed_matrix_transformation \"manim.scene.vector_space_scene.LinearTransformationScene.get_transposed_matrix_transformation\") | Returns a function corresponding to the linear transformation represented by the transposed matrix passed. |\n| [`get_unit_square`](#manim.scene.vector_space_scene.LinearTransformationScene.get_unit_square \"manim.scene.vector_space_scene.LinearTransformationScene.get_unit_square\") | Returns a unit square for the current NumberPlane. |\n| [`get_vector_movement`](#manim.scene.vector_space_scene.LinearTransformationScene.get_vector_movement \"manim.scene.vector_space_scene.LinearTransformationScene.get_vector_movement\") | This method returns an animation that moves a mobject in \"self.moving\\_vectors\" to its corresponding .target value. |\n| [`setup`](#manim.scene.vector_space_scene.LinearTransformationScene.setup \"manim.scene.vector_space_scene.LinearTransformationScene.setup\") | This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called. |\n| `update_default_configs` |  |\n| [`write_vector_coordinates`](#manim.scene.vector_space_scene.LinearTransformationScene.write_vector_coordinates \"manim.scene.vector_space_scene.LinearTransformationScene.write_vector_coordinates\") | Returns a column matrix indicating the vector coordinates, after writing them to the screen, and adding them to the special list self.foreground\\_mobjects |\nAttributes\n| `camera` |  |\n| --- | --- |\n| `time` | The time since the start of the scene. |\nadd\\_background\\_mobject(*\\*mobjects*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_background_mobject)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_background_mobject \"Link to this definition\")\nAdds the mobjects to the special list\nself.background\\_mobjects.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add to the list.\nadd\\_foreground\\_mobject(*\\*mobjects*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_foreground_mobject)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_foreground_mobject \"Link to this definition\")\nAdds the mobjects to the special list\nself.foreground\\_mobjects.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add to the list\nadd\\_moving\\_mobject(*mobject*, *target\\_mobject\\=None*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_moving_mobject)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_moving_mobject \"Link to this definition\")\nAdds the mobject to the special list\nself.moving\\_mobject, and adds a property\nto the mobject called mobject.target, which\nkeeps track of what the mobject will move to\nor become etc.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add to the list\n* **target\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*) – What the moving\\_mobject goes to, etc.\nadd\\_special\\_mobjects(*mob\\_list*, *\\*mobs\\_to\\_add*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_special_mobjects)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_special_mobjects \"Link to this definition\")\nAdds mobjects to a separate list that can be tracked,\nif these mobjects have some extra importance.\nParameters:\n* **mob\\_list** (*list*) – The special list to which you want to add\nthese mobjects.\n* **\\*mobs\\_to\\_add** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add.\nadd\\_title(*title*, *scale\\_factor\\=1\\.5*, *animate\\=False*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_title)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_title \"Link to this definition\")\nAdds a title, after scaling it, adding a background rectangle,\nmoving it to the top and adding it to foreground\\_mobjects adding\nit as a local variable of self. Returns the Scene.\nParameters:\n* **title** (*str* *\\|* [*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") *\\|* [*Tex*](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\")) – What the title should be.\n* **scale\\_factor** (*float*) – How much the title should be scaled by.\n* **animate** (*bool*) – Whether or not to animate the addition.\nReturns:\nThe scene with the title added to it.\nReturn type:\n[LinearTransformationScene](#manim.scene.vector_space_scene.LinearTransformationScene \"manim.scene.vector_space_scene.LinearTransformationScene\")\nadd\\_transformable\\_label(*vector*, *label*, *transformation\\_name\\='L'*, *new\\_label\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_transformable_label)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_label \"Link to this definition\")\nMethod for creating, and animating the addition of\na transformable label for the vector.\nParameters:\n* **vector** ([*Vector*](manim.mobject.geometry.line.Vector.html#manim.mobject.geometry.line.Vector \"manim.mobject.geometry.line.Vector\")) – The vector for which the label must be added.\n* **label** ([*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") *\\|* *str*) – The MathTex/string of the label.\n* **transformation\\_name** (*str* *\\|* [*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\")) – The name to give the transformation as a label.\n* **new\\_label** (*str* *\\|* [*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") *\\|* *None*) – What the label should display after a Linear Transformation\n* **\\*\\*kwargs** – Any valid keyword argument of get\\_vector\\_label\nReturns:\nThe MathTex of the label.\nReturn type:\n[`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\")\nadd\\_transformable\\_mobject(*\\*mobjects*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_transformable_mobject)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_transformable_mobject \"Link to this definition\")\nAdds the mobjects to the special list\nself.transformable\\_mobjects.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add to the list.\nadd\\_unit\\_square(*animate\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_unit_square)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_unit_square \"Link to this definition\")\nAdds a unit square to the scene via\nself.get\\_unit\\_square.\nParameters:\n* **animate** (*bool*) – Whether or not to animate the addition\nwith DrawBorderThenFill.\n* **\\*\\*kwargs** – Any valid keyword arguments of\nself.get\\_unit\\_square()\nReturns:\nThe unit square.\nReturn type:\n[Square](manim.mobject.geometry.polygram.Square.html#manim.mobject.geometry.polygram.Square \"manim.mobject.geometry.polygram.Square\")\nadd\\_vector(*vector*, *color\\=ManimColor('\\#FFFF00')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.add_vector)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.add_vector \"Link to this definition\")\nAdds a vector to the scene, and puts it in the special\nlist self.moving\\_vectors.\nParameters:\n* **vector** ([*Arrow*](manim.mobject.geometry.line.Arrow.html#manim.mobject.geometry.line.Arrow \"manim.mobject.geometry.line.Arrow\") *\\|* *list* *\\|* *tuple* *\\|* *ndarray*) – It can be a pre\\-made graphical vector, or the\ncoordinates of one.\n* **color** (*str*) – The string of the hex color of the vector.\nThis is only taken into consideration if\n‘vector’ is not an Arrow. Defaults to YELLOW.\n* **\\*\\*kwargs** – Any valid keyword argument of VectorScene.add\\_vector.\nReturns:\nThe arrow representing the vector.\nReturn type:\n[Arrow](manim.mobject.geometry.line.Arrow.html#manim.mobject.geometry.line.Arrow \"manim.mobject.geometry.line.Arrow\")\napply\\_function(*function*, *added\\_anims\\=\\[]*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_function)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_function \"Link to this definition\")\nApplies the given function to each of the mobjects in\nself.transformable\\_mobjects, and plays the animation showing\nthis.\nParameters:\n* **function** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function that affects each point\nof each mobject in self.transformable\\_mobjects.\n* **added\\_anims** (*list*) – Any other animations that need to be played\nsimultaneously with this.\n* **\\*\\*kwargs** – Any valid keyword argument of a self.play() call.\napply\\_inverse(*matrix*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_inverse)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse \"Link to this definition\")\nThis method applies the linear transformation\nrepresented by the inverse of the passed matrix\nto the number plane, and each vector/similar mobject on it.\nParameters:\n* **matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix whose inverse is to be applied.\n* **\\*\\*kwargs** – Any valid keyword argument of self.apply\\_matrix()\napply\\_inverse\\_transpose(*t\\_matrix*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_inverse_transpose)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_inverse_transpose \"Link to this definition\")\nApplies the inverse of the transformation represented\nby the given transposed matrix to the number plane and each\nvector/similar mobject on it.\nParameters:\n* **t\\_matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix.\n* **\\*\\*kwargs** – Any valid keyword argument of self.apply\\_transposed\\_matrix()\napply\\_matrix(*matrix*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_matrix)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_matrix \"Link to this definition\")\nApplies the transformation represented by the\ngiven matrix to the number plane, and each vector/similar\nmobject on it.\nParameters:\n* **matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix.\n* **\\*\\*kwargs** – Any valid keyword argument of self.apply\\_transposed\\_matrix()\napply\\_nonlinear\\_transformation(*function*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_nonlinear_transformation)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_nonlinear_transformation \"Link to this definition\")\nApplies the non\\-linear transformation represented\nby the given function to the number plane and each\nvector/similar mobject on it.\nParameters:\n* **function** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function.\n* **\\*\\*kwargs** – Any valid keyword argument of self.apply\\_function()\napply\\_transposed\\_matrix(*transposed\\_matrix*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.apply_transposed_matrix)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.apply_transposed_matrix \"Link to this definition\")\nApplies the transformation represented by the\ngiven transposed matrix to the number plane,\nand each vector/similar mobject on it.\nParameters:\n* **transposed\\_matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix.\n* **\\*\\*kwargs** – Any valid keyword argument of self.apply\\_function()\nget\\_ghost\\_vectors()[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_ghost_vectors)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_ghost_vectors \"Link to this definition\")\nReturns all ghost vectors ever added to `self`. Each element is a `VGroup` of\ntwo ghost vectors.\nReturn type:\n[*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nget\\_matrix\\_transformation(*matrix*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_matrix_transformation)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_matrix_transformation \"Link to this definition\")\nReturns a function corresponding to the linear\ntransformation represented by the matrix passed.\nParameters:\n**matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix.\nget\\_moving\\_mobject\\_movement(*func*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_moving_mobject_movement)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_moving_mobject_movement \"Link to this definition\")\nThis method returns an animation that moves a mobject\nin “self.moving\\_mobjects” to its corresponding .target value.\nfunc is a function that determines where the .target goes.\nParameters:\n**func** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function that determines where the .target of\nthe moving mobject goes.\nReturns:\nThe animation of the movement.\nReturn type:\n[Animation](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nget\\_piece\\_movement(*pieces*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_piece_movement)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_piece_movement \"Link to this definition\")\nThis method returns an animation that moves an arbitrary\nmobject in “pieces” to its corresponding .target value.\nIf self.leave\\_ghost\\_vectors is True, ghosts of the original\npositions/mobjects are left on screen\nParameters:\n**pieces** (*list* *\\|* *tuple* *\\|* *ndarray*) – The pieces for which the movement must be shown.\nReturns:\nThe animation of the movement.\nReturn type:\n[Animation](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nget\\_transformable\\_label\\_movement()[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_transformable_label_movement)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_transformable_label_movement \"Link to this definition\")\nThis method returns an animation that moves all labels\nin “self.transformable\\_labels” to its corresponding .target .\nReturns:\nThe animation of the movement.\nReturn type:\n[Animation](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nget\\_transposed\\_matrix\\_transformation(*transposed\\_matrix*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_transposed_matrix_transformation)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_transposed_matrix_transformation \"Link to this definition\")\nReturns a function corresponding to the linear\ntransformation represented by the transposed\nmatrix passed.\nParameters:\n**transposed\\_matrix** (*ndarray* *\\|* *list* *\\|* *tuple*) – The matrix.\nget\\_unit\\_square(*color\\=ManimColor('\\#FFFF00')*, *opacity\\=0\\.3*, *stroke\\_width\\=3*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_unit_square)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_unit_square \"Link to this definition\")\nReturns a unit square for the current NumberPlane.\nParameters:\n* **color** (*str*) – The string of the hex color code of the color wanted.\n* **opacity** (*float*) – The opacity of the square\n* **stroke\\_width** (*float*) – The stroke\\_width in pixels of the border of the square\nReturn type:\n[Square](manim.mobject.geometry.polygram.Square.html#manim.mobject.geometry.polygram.Square \"manim.mobject.geometry.polygram.Square\")\nget\\_vector\\_movement(*func*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.get_vector_movement)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.get_vector_movement \"Link to this definition\")\nThis method returns an animation that moves a mobject\nin “self.moving\\_vectors” to its corresponding .target value.\nfunc is a function that determines where the .target goes.\nParameters:\n**func** (*Callable**\\[**\\[**ndarray**]**,* *ndarray**]*) – The function that determines where the .target of\nthe moving mobject goes.\nReturns:\nThe animation of the movement.\nReturn type:\n[Animation](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nsetup()[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.setup)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.setup \"Link to this definition\")\nThis is meant to be implemented by any scenes which\nare commonly subclassed, and have some common setup\ninvolved before the construct method is called.\nwrite\\_vector\\_coordinates(*vector*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/vector_space_scene.html#LinearTransformationScene.write_vector_coordinates)[¶](#manim.scene.vector_space_scene.LinearTransformationScene.write_vector_coordinates \"Link to this definition\")\nReturns a column matrix indicating the vector coordinates,\nafter writing them to the screen, and adding them to the\nspecial list self.foreground\\_mobjects\nParameters:\n* **vector** ([*Arrow*](manim.mobject.geometry.line.Arrow.html#manim.mobject.geometry.line.Arrow \"manim.mobject.geometry.line.Arrow\")) – The arrow representing the vector.\n* **\\*\\*kwargs** – Any valid keyword arguments of VectorScene.write\\_vector\\_coordinates\nReturns:\nThe column matrix representing the vector.\nReturn type:\n[Matrix](manim.mobject.matrix.Matrix.html#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")",
  "scraped_at": "2025-06-24T18:34:23.191730",
  "content_length": 27938,
  "domain": "docs.manim.community",
  "word_count": 2064,
  "inspection_status": "approved",
  "filename": "LinearTransformationScene - Manim Community v0.19.0_20250624_183423.json",
  "saved_at": "2025-06-24T18:34:23.191854",
  "approved_at": "2025-06-25T17:18:58.356202"
}