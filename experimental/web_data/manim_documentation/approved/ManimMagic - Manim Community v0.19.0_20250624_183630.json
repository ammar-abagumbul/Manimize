{
  "doc_id": "6ee36d8ac596d17dc376b747afb7113a",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.ipython_magic.ManimMagic.html",
  "title": "ManimMagic - Manim Community v0.19.0",
  "content": "ManimMagic[¶](#manimmagic \"Link to this heading\")\n=================================================\nQualified name: `manim.utils.ipython\\_magic.ManimMagic`\n*class* ManimMagic(*\\*\\*kwargs*)[\\[source]](../_modules/manim/utils/ipython_magic.html#ManimMagic)[¶](#manim.utils.ipython_magic.ManimMagic \"Link to this definition\")\nBases: `Magics`\nCreate a configurable given a config config.\nParameters:\n* **config** (*Config*) – If this is empty, default values are used. If config is a\n`Config` instance, it will be used to configure the\ninstance.\n* **parent** (*Configurable instance**,* *optional*) – The parent Configurable instance of this object.\n* **shell** (*InteractiveShell*)\nNotes\nSubclasses of Configurable must call the `__init__()` method of\n`Configurable` *before* doing anything else and using\n`super()`:\n```\nclass MyConfigurable(Configurable):\n    def __init__(self, config=None):\n        super(MyConfigurable, self).__init__(config=config)\n        # Then any other code you need to finish initialization.\n```\nThis ensures that instances will be configured properly.\nMethods\n| `add_additional_args` |  |\n| --- | --- |\n| [`manim`](#manim.utils.ipython_magic.ManimMagic.manim \"manim.utils.ipython_magic.ManimMagic.manim\") | Render Manim scenes contained in IPython cells. |\nAttributes\n| `config` | A trait whose value must be an instance of a specified class. |\n| --- | --- |\n| `cross_validation_lock` | A contextmanager for running a block with our cross validation lock set to True. |\n| `magics` |  |\n| `options_table` |  |\n| `parent` | A trait whose value must be an instance of a specified class. |\n| `registered` |  |\n| `shell` |  |\nmanim(*line*, *cell\\=None*, *local\\_ns\\=None*)[\\[source]](../_modules/manim/utils/ipython_magic.html#ManimMagic.manim)[¶](#manim.utils.ipython_magic.ManimMagic.manim \"Link to this definition\")\nRender Manim scenes contained in IPython cells.\nWorks as a line or cell magic.\nHint\nThis line and cell magic works best when used in a JupyterLab\nenvironment: while all of the functionality is available for\nclassic Jupyter notebooks as well, it is possible that videos\nsometimes don’t update on repeated execution of the same cell\nif the scene name stays the same.\nThis problem does not occur when using JupyterLab.\nPlease refer to <https://jupyter.org/> for more information about JupyterLab\nand Jupyter notebooks.\nUsage in line mode:\n```\n%manim [CLI options] MyAwesomeScene\n```\nUsage in cell mode:\n```\n%%manim [CLI options] MyAwesomeScene\nclass MyAweseomeScene(Scene):\n    def construct(self):\n        ...\n```\nRun `%manim --help` and `%manim render --help` for possible command line interface options.\nNote\nThe maximal width of the rendered videos that are displayed in the notebook can be\nconfigured via the `media_width` configuration option. The default is set to `25vw`,\nwhich is 25% of your current viewport width. To allow the output to become as large\nas possible, set `config.media_width = \"100%\"`.\nThe `media_embed` option will embed the image/video output in the notebook. This is\ngenerally undesirable as it makes the notebooks very large, but is required on some\nplatforms (notably Google’s CoLab, where it is automatically enabled unless suppressed\nby `config.embed = False`) and needed in cases when the notebook (or converted HTML\nfile) will be moved relative to the video locations. Use\\-cases include building\ndocumentation with Sphinx and JupyterBook. See also the [`manim directive for Sphinx`](manim.utils.docbuild.manim_directive.html#module-manim.utils.docbuild.manim_directive \"manim.utils.docbuild.manim_directive\").\nExamples\nFirst make sure to put `import manim`, or even `from manim import *`\nin a cell and evaluate it. Then, a typical Jupyter notebook cell for Manim\ncould look as follows:\n```\n%%manim -v WARNING --disable_caching -qm BannerExample\nconfig.media_width = \"75%\"\nconfig.media_embed = True\nclass BannerExample(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        banner_large = ManimBanner(dark_theme=False).scale(0.7)\n        self.play(banner_large.create())\n        self.play(banner_large.expand())\n```\nEvaluating this cell will render and display the `BannerExample` scene defined in the body of the cell.\nNote\nIn case you want to hide the red box containing the output progress bar, the `progress_bar` config\noption should be set to `None`. This can also be done by passing `--progress_bar None` as a\nCLI flag.\nParameters:\n* **line** (*str*)\n* **cell** (*str* *\\|* *None*)\n* **local\\_ns** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T18:36:30.805144",
  "content_length": 4569,
  "domain": "docs.manim.community",
  "word_count": 591,
  "inspection_status": "approved",
  "filename": "ManimMagic - Manim Community v0.19.0_20250624_183630.json",
  "saved_at": "2025-06-24T18:36:30.805214",
  "approved_at": "2025-06-25T17:18:58.293981"
}