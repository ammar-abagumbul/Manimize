{
  "doc_id": "be6f4a25a7fb571620ec269f5ee0aba4",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.matrix.Matrix.html",
  "title": "Matrix - Manim Community v0.19.0",
  "content": "Matrix[¶](#matrix \"Link to this heading\")\n=========================================\nQualified name: `manim.mobject.matrix.Matrix`\n*class* Matrix(*matrix*, *v\\_buff\\=0\\.8*, *h\\_buff\\=1\\.3*, *bracket\\_h\\_buff\\=0\\.25*, *bracket\\_v\\_buff\\=0\\.25*, *add\\_background\\_rectangles\\_to\\_entries\\=False*, *include\\_background\\_rectangle\\=False*, *element\\_to\\_mobject\\=\\<class 'manim.mobject.text.tex\\_mobject.MathTex'\\>*, *element\\_to\\_mobject\\_config\\={}*, *element\\_alignment\\_corner\\=array(\\[ 1\\.*, *\\-1\\.*, *0\\.])*, *left\\_bracket\\='\\['*, *right\\_bracket\\=']'*, *stretch\\_brackets\\=True*, *bracket\\_config\\={}*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/matrix.html#Matrix)[¶](#manim.mobject.matrix.Matrix \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA mobject that displays a matrix on the screen.\nParameters:\n* **matrix** (*Iterable*) – A numpy 2d array or list of lists.\n* **v\\_buff** (*float*) – Vertical distance between elements, by default 0\\.8\\.\n* **h\\_buff** (*float*) – Horizontal distance between elements, by default 1\\.3\\.\n* **bracket\\_h\\_buff** (*float*) – Distance of the brackets from the matrix, by default `MED_SMALL_BUFF`.\n* **bracket\\_v\\_buff** (*float*) – Height of the brackets, by default `MED_SMALL_BUFF`.\n* **add\\_background\\_rectangles\\_to\\_entries** (*bool*) – `True` if should add backgraound rectangles to entries, by default `False`.\n* **include\\_background\\_rectangle** (*bool*) – `True` if should include background rectangle, by default `False`.\n* **element\\_to\\_mobject** (*type**\\[*[*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\")*]*) – The mobject class used to construct the elements, by default [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\").\n* **element\\_to\\_mobject\\_config** (*dict*) – Additional arguments to be passed to the constructor in `element_to_mobject`,\nby default `{}`.\n* **element\\_alignment\\_corner** (*Sequence**\\[**float**]*) – The corner to which elements are aligned, by default `DR`.\n* **left\\_bracket** (*str*) – The left bracket type, by default `\"[\"`.\n* **right\\_bracket** (*str*) – The right bracket type, by default `\"]\"`.\n* **stretch\\_brackets** (*bool*) – `True` if should stretch the brackets to fit the height of matrix contents, by default `True`.\n* **bracket\\_config** (*dict*) – Additional arguments to be passed to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") when constructing\nthe brackets.\nExamples\nThe first example shows a variety of uses of this module while the second example\nexlpains the use of the options add\\_background\\_rectangles\\_to\\_entries and\ninclude\\_background\\_rectangle.\nExample: MatrixExamples [¶](#matrixexamples)\n![../_images/MatrixExamples-2.png](../_images/MatrixExamples-2.png)\n```\nfrom manim import *\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[2, r\"\\pi\"], [-1, 1]])\n        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],\n            v_buff=1.3,\n            h_buff=0.8,\n            bracket_h_buff=SMALL_BUFF,\n            bracket_v_buff=SMALL_BUFF,\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m1.add(SurroundingRectangle(m1.get_columns()[1]))\n        m2 = Matrix([[2, 1], [-1, 3]],\n            element_alignment_corner=UL,\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m3 = Matrix([[2, 1], [-1, 3]],\n            left_bracket=r\"\\langle\",\n            right_bracket=r\"\\rangle\")\n        m4 = Matrix([[2, 1], [-1, 3]],\n        ).set_column_colors(RED, GREEN)\n        m5 = Matrix([[2, 1], [-1, 3]],\n        ).set_row_colors(RED, GREEN)\n        g = Group(\n            m0,m1,m2,m3,m4,m5\n        ).arrange_in_grid(buff=2)\n        self.add(g)\n```\n```\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[2, r\"\\pi\"], [-1, 1]])\n        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],\n            v_buff=1.3,\n            h_buff=0.8,\n            bracket_h_buff=SMALL_BUFF,\n            bracket_v_buff=SMALL_BUFF,\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m1.add(SurroundingRectangle(m1.get_columns()[1]))\n        m2 = Matrix([[2, 1], [-1, 3]],\n            element_alignment_corner=UL,\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m3 = Matrix([[2, 1], [-1, 3]],\n            left_bracket=r\"\\langle\",\n            right_bracket=r\"\\rangle\")\n        m4 = Matrix([[2, 1], [-1, 3]],\n        ).set_column_colors(RED, GREEN)\n        m5 = Matrix([[2, 1], [-1, 3]],\n        ).set_row_colors(RED, GREEN)\n        g = Group(\n            m0,m1,m2,m3,m4,m5\n        ).arrange_in_grid(buff=2)\n        self.add(g)\n```\nExample: BackgroundRectanglesExample [¶](#backgroundrectanglesexample)\n![../_images/BackgroundRectanglesExample-1.png](../_images/BackgroundRectanglesExample-1.png)\n```\nfrom manim import *\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background= Rectangle().scale(3.2)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        m0 = Matrix([[12, -30], [-1, 15]],\n            add_background_rectangles_to_entries=True)\n        m1 = Matrix([[2, 0], [-1, 1]],\n            include_background_rectangle=True)\n        m2 = Matrix([[12, -30], [-1, 15]])\n        g = Group(m0, m1, m2).arrange(buff=2)\n        self.add(g)\n```\n```\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background= Rectangle().scale(3.2)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        m0 = Matrix([[12, -30], [-1, 15]],\n            add_background_rectangles_to_entries=True)\n        m1 = Matrix([[2, 0], [-1, 1]],\n            include_background_rectangle=True)\n        m2 = Matrix([[12, -30], [-1, 15]])\n        g = Group(m0, m1, m2).arrange(buff=2)\n        self.add(g)\n```\nMethods\n| [`add_background_to_entries`](#manim.mobject.matrix.Matrix.add_background_to_entries \"manim.mobject.matrix.Matrix.add_background_to_entries\") | Add a black background rectangle to the matrix, see above for an example. |\n| --- | --- |\n| [`get_brackets`](#manim.mobject.matrix.Matrix.get_brackets \"manim.mobject.matrix.Matrix.get_brackets\") | Return the bracket mobjects. |\n| [`get_columns`](#manim.mobject.matrix.Matrix.get_columns \"manim.mobject.matrix.Matrix.get_columns\") | Return columns of the matrix as VGroups. |\n| [`get_entries`](#manim.mobject.matrix.Matrix.get_entries \"manim.mobject.matrix.Matrix.get_entries\") | Return the individual entries of the matrix. |\n| [`get_mob_matrix`](#manim.mobject.matrix.Matrix.get_mob_matrix \"manim.mobject.matrix.Matrix.get_mob_matrix\") | Return the underlying mob matrix mobjects. |\n| [`get_rows`](#manim.mobject.matrix.Matrix.get_rows \"manim.mobject.matrix.Matrix.get_rows\") | Return rows of the matrix as VGroups. |\n| [`set_column_colors`](#manim.mobject.matrix.Matrix.set_column_colors \"manim.mobject.matrix.Matrix.set_column_colors\") | Set individual colors for each columns of the matrix. |\n| [`set_row_colors`](#manim.mobject.matrix.Matrix.set_row_colors \"manim.mobject.matrix.Matrix.set_row_colors\") | Set individual colors for each row of the matrix. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_add\\_brackets(*left\\='\\['*, *right\\=']'*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/matrix.html#Matrix._add_brackets)[¶](#manim.mobject.matrix.Matrix._add_brackets \"Link to this definition\")\nAdds the brackets to the Matrix mobject.\nSee Latex document for various bracket types.\nParameters:\n* **left** (*str*) – the left bracket, by default “\\[”\n* **right** (*str*) – the right bracket, by default “]”\nReturns:\nThe current matrix object (self).\nReturn type:\n[`Matrix`](#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")\n\\_original\\_\\_init\\_\\_(*matrix*, *v\\_buff\\=0\\.8*, *h\\_buff\\=1\\.3*, *bracket\\_h\\_buff\\=0\\.25*, *bracket\\_v\\_buff\\=0\\.25*, *add\\_background\\_rectangles\\_to\\_entries\\=False*, *include\\_background\\_rectangle\\=False*, *element\\_to\\_mobject\\=\\<class 'manim.mobject.text.tex\\_mobject.MathTex'\\>*, *element\\_to\\_mobject\\_config\\={}*, *element\\_alignment\\_corner\\=array(\\[ 1\\.*, *\\-1\\.*, *0\\.])*, *left\\_bracket\\='\\['*, *right\\_bracket\\=']'*, *stretch\\_brackets\\=True*, *bracket\\_config\\={}*, *\\*\\*kwargs*)[¶](#manim.mobject.matrix.Matrix._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **matrix** (*Iterable*)\n* **v\\_buff** (*float*)\n* **h\\_buff** (*float*)\n* **bracket\\_h\\_buff** (*float*)\n* **bracket\\_v\\_buff** (*float*)\n* **add\\_background\\_rectangles\\_to\\_entries** (*bool*)\n* **include\\_background\\_rectangle** (*bool*)\n* **element\\_to\\_mobject** (*type**\\[*[*MathTex*](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\")*]*)\n* **element\\_to\\_mobject\\_config** (*dict*)\n* **element\\_alignment\\_corner** (*Sequence**\\[**float**]*)\n* **left\\_bracket** (*str*)\n* **right\\_bracket** (*str*)\n* **stretch\\_brackets** (*bool*)\n* **bracket\\_config** (*dict*)\nadd\\_background\\_to\\_entries()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.add_background_to_entries)[¶](#manim.mobject.matrix.Matrix.add_background_to_entries \"Link to this definition\")\nAdd a black background rectangle to the matrix,\nsee above for an example.\nReturns:\nThe current matrix object (self).\nReturn type:\n[`Matrix`](#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")\nget\\_brackets()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.get_brackets)[¶](#manim.mobject.matrix.Matrix.get_brackets \"Link to this definition\")\nReturn the bracket mobjects.\nReturns:\nEach VGroup contains a bracket\nReturn type:\nList\\[[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nExamples\nExample: GetBracketsExample [¶](#getbracketsexample)\n![../_images/GetBracketsExample-1.png](../_images/GetBracketsExample-1.png)\n```\nfrom manim import *\nclass GetBracketsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        bra = m0.get_brackets()\n        colors = [BLUE, GREEN]\n        for k in range(len(colors)):\n            bra[k].set_color(colors[k])\n        self.add(m0)\n```\n```\nclass GetBracketsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        bra = m0.get_brackets()\n        colors = [BLUE, GREEN]\n        for k in range(len(colors)):\n            bra[k].set_color(colors[k])\n        self.add(m0)\n```\nget\\_columns()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.get_columns)[¶](#manim.mobject.matrix.Matrix.get_columns \"Link to this definition\")\nReturn columns of the matrix as VGroups.\nReturns:\nEach VGroup contains a column of the matrix.\nReturn type:\nList\\[[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nExamples\nExample: GetColumnsExample [¶](#getcolumnsexample)\n![../_images/GetColumnsExample-1.png](../_images/GetColumnsExample-1.png)\n```\nfrom manim import *\nclass GetColumnsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[r\"\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_columns()[1]))\n        self.add(m0)\n```\n```\nclass GetColumnsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[r\"\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_columns()[1]))\n        self.add(m0)\n```\nget\\_entries()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.get_entries)[¶](#manim.mobject.matrix.Matrix.get_entries \"Link to this definition\")\nReturn the individual entries of the matrix.\nReturns:\nVGroup containing entries of the matrix.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetEntriesExample [¶](#getentriesexample)\n![../_images/GetEntriesExample-1.png](../_images/GetEntriesExample-1.png)\n```\nfrom manim import *\nclass GetEntriesExample(Scene):\n    def construct(self):\n        m0 = Matrix([[2, 3], [1, 5]])\n        ent = m0.get_entries()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        self.add(m0)\n```\n```\nclass GetEntriesExample(Scene):\n    def construct(self):\n        m0 = Matrix([[2, 3], [1, 5]])\n        ent = m0.get_entries()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        self.add(m0)\n```\nget\\_mob\\_matrix()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.get_mob_matrix)[¶](#manim.mobject.matrix.Matrix.get_mob_matrix \"Link to this definition\")\nReturn the underlying mob matrix mobjects.\nReturns:\nEach VGroup contains a row of the matrix.\nReturn type:\nList\\[[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nget\\_rows()[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.get_rows)[¶](#manim.mobject.matrix.Matrix.get_rows \"Link to this definition\")\nReturn rows of the matrix as VGroups.\nReturns:\nEach VGroup contains a row of the matrix.\nReturn type:\nList\\[[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nExamples\nExample: GetRowsExample [¶](#getrowsexample)\n![../_images/GetRowsExample-1.png](../_images/GetRowsExample-1.png)\n```\nfrom manim import *\nclass GetRowsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_rows()[1]))\n        self.add(m0)\n```\n```\nclass GetRowsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 3], [1, 5]])\n        m0.add(SurroundingRectangle(m0.get_rows()[1]))\n        self.add(m0)\n```\nset\\_column\\_colors(*\\*colors*)[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.set_column_colors)[¶](#manim.mobject.matrix.Matrix.set_column_colors \"Link to this definition\")\nSet individual colors for each columns of the matrix.\nParameters:\n**colors** (*str*) – The list of colors; each color specified corresponds to a column.\nReturns:\nThe current matrix object (self).\nReturn type:\n[`Matrix`](#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")\nExamples\nExample: SetColumnColorsExample [¶](#setcolumncolorsexample)\n![../_images/SetColumnColorsExample-1.png](../_images/SetColumnColorsExample-1.png)\n```\nfrom manim import *\nclass SetColumnColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_column_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```\n```\nclass SetColumnColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_column_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```\nset\\_row\\_colors(*\\*colors*)[\\[source]](../_modules/manim/mobject/matrix.html#Matrix.set_row_colors)[¶](#manim.mobject.matrix.Matrix.set_row_colors \"Link to this definition\")\nSet individual colors for each row of the matrix.\nParameters:\n**colors** (*str*) – The list of colors; each color specified corresponds to a row.\nReturns:\nThe current matrix object (self).\nReturn type:\n[`Matrix`](#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")\nExamples\nExample: SetRowColorsExample [¶](#setrowcolorsexample)\n![../_images/SetRowColorsExample-1.png](../_images/SetRowColorsExample-1.png)\n```\nfrom manim import *\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```\n```\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 1], [-1, 3]],\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(m0)\n```",
  "scraped_at": "2025-06-24T17:56:03.639578",
  "content_length": 16669,
  "domain": "docs.manim.community",
  "word_count": 1303,
  "inspection_status": "approved",
  "filename": "Matrix - Manim Community v0.19.0_20250624_175603.json",
  "saved_at": "2025-06-24T17:56:03.639666",
  "approved_at": "2025-06-25T17:18:58.380819"
}