{
  "doc_id": "843b9e03b4148a81dad978715290fa97",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.three_d.polyhedra.Polyhedron.html",
  "title": "Polyhedron - Manim Community v0.19.0",
  "content": "Polyhedron[¶](#polyhedron \"Link to this heading\")\n=================================================\nQualified name: `manim.mobject.three\\_d.polyhedra.Polyhedron`\n*class* Polyhedron(*vertex\\_coords*, *faces\\_list*, *faces\\_config\\={}*, *graph\\_config\\={}*)[\\[source]](../_modules/manim/mobject/three_d/polyhedra.html#Polyhedron)[¶](#manim.mobject.three_d.polyhedra.Polyhedron \"Link to this definition\")\nBases: [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nAn abstract polyhedra class.\nIn this implementation, polyhedra are defined with a list of vertex coordinates in space, and a list\nof faces. This implementation mirrors that of a standard polyhedral data format (OFF, object file format).\nParameters:\n* **vertex\\_coords** (*list**\\[**list**\\[**float**]* *\\|* *np.ndarray**]*) – A list of coordinates of the corresponding vertices in the polyhedron. Each coordinate will correspond to\na vertex. The vertices are indexed with the usual indexing of Python.\n* **faces\\_list** (*list**\\[**list**\\[**int**]**]*) – A list of faces. Each face is a sublist containing the indices of the vertices that form the corners of that face.\n* **faces\\_config** (*dict**\\[**str**,* *str* *\\|* *int* *\\|* *float* *\\|* *bool**]*) – Configuration for the polygons representing the faces of the polyhedron.\n* **graph\\_config** (*dict**\\[**str**,* *str* *\\|* *int* *\\|* *float* *\\|* *bool**]*) – Configuration for the graph containing the vertices and edges of the polyhedron.\nExamples\nTo understand how to create a custom polyhedra, let’s use the example of a rather simple one \\- a square pyramid.\nExample: SquarePyramidScene [¶](#squarepyramidscene)\n![../_images/SquarePyramidScene-1.png](../_images/SquarePyramidScene-1.png)\n```\nfrom manim import *\nclass SquarePyramidScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        vertex_coords = [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 2]\n        ]\n        faces_list = [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [0, 1, 2, 3]\n        ]\n        pyramid = Polyhedron(vertex_coords, faces_list)\n        self.add(pyramid)\n```\n```\nclass SquarePyramidScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        vertex_coords = [\n            [1, 1, 0],\n            [1, -1, 0],\n            [-1, -1, 0],\n            [-1, 1, 0],\n            [0, 0, 2]\n        ]\n        faces_list = [\n            [0, 1, 4],\n            [1, 2, 4],\n            [2, 3, 4],\n            [3, 0, 4],\n            [0, 1, 2, 3]\n        ]\n        pyramid = Polyhedron(vertex_coords, faces_list)\n        self.add(pyramid)\n```\nIn defining the polyhedron above, we first defined the coordinates of the vertices.\nThese are the corners of the square base, given as the first four coordinates in the vertex list,\nand the apex, the last coordinate in the list.\nNext, we define the faces of the polyhedron. The triangular surfaces of the pyramid are polygons\nwith two adjacent vertices in the base and the vertex at the apex as corners. We thus define these\nsurfaces in the first four elements of our face list. The last element defines the base of the pyramid.\nThe graph and faces of polyhedra can also be accessed and modified directly, after instantiation.\nThey are stored in the graph and faces attributes respectively.\nExample: PolyhedronSubMobjects [¶](#polyhedronsubmobjects)\n![../_images/PolyhedronSubMobjects-1.png](../_images/PolyhedronSubMobjects-1.png)\n```\nfrom manim import *\nclass PolyhedronSubMobjects(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        octahedron = Octahedron(edge_length = 3)\n        octahedron.graph[0].set_color(RED)\n        octahedron.faces[2].set_color(YELLOW)\n        self.add(octahedron)\n```\n```\nclass PolyhedronSubMobjects(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        octahedron = Octahedron(edge_length = 3)\n        octahedron.graph[0].set_color(RED)\n        octahedron.faces[2].set_color(YELLOW)\n        self.add(octahedron)\n```\nMethods\n| [`create_faces`](#manim.mobject.three_d.polyhedra.Polyhedron.create_faces \"manim.mobject.three_d.polyhedra.Polyhedron.create_faces\") | Creates VGroup of faces from a list of face coordinates. |\n| --- | --- |\n| [`extract_face_coords`](#manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords \"manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\") | Extracts the coordinates of the vertices in the graph. |\n| [`get_edges`](#manim.mobject.three_d.polyhedra.Polyhedron.get_edges \"manim.mobject.three_d.polyhedra.Polyhedron.get_edges\") | Creates list of cyclic pairwise tuples. |\n| `update_faces` |  |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*vertex\\_coords*, *faces\\_list*, *faces\\_config\\={}*, *graph\\_config\\={}*)[¶](#manim.mobject.three_d.polyhedra.Polyhedron._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertex\\_coords** (*list**\\[**list**\\[**float**]* *\\|* *ndarray**]*)\n* **faces\\_list** (*list**\\[**list**\\[**int**]**]*)\n* **faces\\_config** (*dict**\\[**str**,* *str* *\\|* *int* *\\|* *float* *\\|* *bool**]*)\n* **graph\\_config** (*dict**\\[**str**,* *str* *\\|* *int* *\\|* *float* *\\|* *bool**]*)\ncreate\\_faces(*face\\_coords*)[\\[source]](../_modules/manim/mobject/three_d/polyhedra.html#Polyhedron.create_faces)[¶](#manim.mobject.three_d.polyhedra.Polyhedron.create_faces \"Link to this definition\")\nCreates VGroup of faces from a list of face coordinates.\nParameters:\n**face\\_coords** (*list**\\[**list**\\[**list* *\\|* *ndarray**]**]*)\nReturn type:\n[*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nextract\\_face\\_coords()[\\[source]](../_modules/manim/mobject/three_d/polyhedra.html#Polyhedron.extract_face_coords)[¶](#manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords \"Link to this definition\")\nExtracts the coordinates of the vertices in the graph.\nUsed for updating faces.\nReturn type:\nlist\\[list\\[*ndarray*]]\nget\\_edges(*faces\\_list*)[\\[source]](../_modules/manim/mobject/three_d/polyhedra.html#Polyhedron.get_edges)[¶](#manim.mobject.three_d.polyhedra.Polyhedron.get_edges \"Link to this definition\")\nCreates list of cyclic pairwise tuples.\nParameters:\n**faces\\_list** (*list**\\[**list**\\[**int**]**]*)\nReturn type:\nlist\\[tuple\\[int, int]]",
  "scraped_at": "2025-06-24T17:57:58.294687",
  "content_length": 7163,
  "domain": "docs.manim.community",
  "word_count": 712,
  "inspection_status": "approved",
  "filename": "Polyhedron - Manim Community v0.19.0_20250624_175758.json",
  "saved_at": "2025-06-24T17:57:58.294757",
  "approved_at": "2025-06-25T17:18:58.411363"
}