{
  "doc_id": "753334c99a6f86339d268d3bb5c747a9",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.probability.SampleSpace.html",
  "title": "SampleSpace - Manim Community v0.19.0",
  "content": "SampleSpace[¶](#samplespace \"Link to this heading\")\n===================================================\nQualified name: `manim.mobject.graphing.probability.SampleSpace`\n*class* SampleSpace(*height\\=3*, *width\\=3*, *fill\\_color\\=ManimColor('\\#444444')*, *fill\\_opacity\\=1*, *stroke\\_width\\=0\\.5*, *stroke\\_color\\=ManimColor('\\#BBBBBB')*, *default\\_label\\_scale\\_val\\=1*)[\\[source]](../_modules/manim/mobject/graphing/probability.html#SampleSpace)[¶](#manim.mobject.graphing.probability.SampleSpace \"Link to this definition\")\nBases: [`Rectangle`](manim.mobject.geometry.polygram.Rectangle.html#manim.mobject.geometry.polygram.Rectangle \"manim.mobject.geometry.polygram.Rectangle\")\nA mobject representing a twodimensional rectangular\nsampling space.\nExamples\nExample: ExampleSampleSpace [¶](#examplesamplespace)\n![../_images/ExampleSampleSpace-1.png](../_images/ExampleSampleSpace-1.png)\n```\nfrom manim import *\nclass ExampleSampleSpace(Scene):\n    def construct(self):\n        poly1 = SampleSpace(stroke_width=15, fill_opacity=1)\n        poly2 = SampleSpace(width=5, height=3, stroke_width=5, fill_opacity=0.5)\n        poly3 = SampleSpace(width=2, height=2, stroke_width=5, fill_opacity=0.1)\n        poly3.divide_vertically(p_list=np.array([0.37, 0.13, 0.5]), colors=[BLACK, WHITE, GRAY], vect=RIGHT)\n        poly_group = VGroup(poly1, poly2, poly3).arrange()\n        self.add(poly_group)\n```\n```\nclass ExampleSampleSpace(Scene):\n    def construct(self):\n        poly1 = SampleSpace(stroke_width=15, fill_opacity=1)\n        poly2 = SampleSpace(width=5, height=3, stroke_width=5, fill_opacity=0.5)\n        poly3 = SampleSpace(width=2, height=2, stroke_width=5, fill_opacity=0.1)\n        poly3.divide_vertically(p_list=np.array([0.37, 0.13, 0.5]), colors=[BLACK, WHITE, GRAY], vect=RIGHT)\n        poly_group = VGroup(poly1, poly2, poly3).arrange()\n        self.add(poly_group)\n```\nMethods\n| `add_braces_and_labels` |  |\n| --- | --- |\n| `add_label` |  |\n| `add_title` |  |\n| `complete_p_list` |  |\n| `divide_horizontally` |  |\n| `divide_vertically` |  |\n| `get_bottom_braces_and_labels` |  |\n| `get_division_along_dimension` |  |\n| `get_horizontal_division` |  |\n| `get_side_braces_and_labels` |  |\n| `get_subdivision_braces_and_labels` |  |\n| `get_top_braces_and_labels` |  |\n| `get_vertical_division` |  |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*height\\=3*, *width\\=3*, *fill\\_color\\=ManimColor('\\#444444')*, *fill\\_opacity\\=1*, *stroke\\_width\\=0\\.5*, *stroke\\_color\\=ManimColor('\\#BBBBBB')*, *default\\_label\\_scale\\_val\\=1*)[¶](#manim.mobject.graphing.probability.SampleSpace._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.",
  "scraped_at": "2025-06-24T17:55:40.619698",
  "content_length": 3090,
  "domain": "docs.manim.community",
  "word_count": 270,
  "inspection_status": "approved",
  "filename": "SampleSpace - Manim Community v0.19.0_20250624_175540.json",
  "saved_at": "2025-06-24T17:55:40.619756",
  "approved_at": "2025-06-25T17:18:58.406881"
}