{
  "doc_id": "cbc06952d53fe05ab5f7952fe1b63b24",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.vector_field.StreamLines.html",
  "title": "StreamLines - Manim Community v0.19.0",
  "content": "StreamLines[¶](#streamlines \"Link to this heading\")\n===================================================\nQualified name: `manim.mobject.vector\\_field.StreamLines`\n*class* StreamLines(*func*, *color\\=None*, *color\\_scheme\\=None*, *min\\_color\\_scheme\\_value\\=0*, *max\\_color\\_scheme\\_value\\=2*, *colors\\=\\[ManimColor('\\#236B8E'), ManimColor('\\#83C167'), ManimColor('\\#FFFF00'), ManimColor('\\#FC6255')]*, *x\\_range\\=None*, *y\\_range\\=None*, *z\\_range\\=None*, *three\\_dimensions\\=False*, *noise\\_factor\\=None*, *n\\_repeats\\=1*, *dt\\=0\\.05*, *virtual\\_time\\=3*, *max\\_anchors\\_per\\_line\\=100*, *padding\\=3*, *stroke\\_width\\=1*, *opacity\\=1*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/vector_field.html#StreamLines)[¶](#manim.mobject.vector_field.StreamLines \"Link to this definition\")\nBases: [`VectorField`](manim.mobject.vector_field.VectorField.html#manim.mobject.vector_field.VectorField \"manim.mobject.vector_field.VectorField\")\nStreamLines represent the flow of a [`VectorField`](manim.mobject.vector_field.VectorField.html#manim.mobject.vector_field.VectorField \"manim.mobject.vector_field.VectorField\") using the trace of moving agents.\nVector fields are always based on a function defining the vector at every position.\nThe values of this functions is displayed by moving many agents along the vector field\nand showing their trace.\nParameters:\n* **func** (*Callable**\\[**\\[**np.ndarray**]**,* *np.ndarray**]*) – The function defining the rate of change at every position of the vector field.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the vector field. If set, position\\-specific coloring is disabled.\n* **color\\_scheme** (*Callable**\\[**\\[**np.ndarray**]**,* *float**]* *\\|* *None*) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min\\_color\\_scheme\\_value, max\\_color\\_scheme\\_value and colors.\n* **min\\_color\\_scheme\\_value** (*float*) – The value of the color\\_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.\n* **max\\_color\\_scheme\\_value** (*float*) – The value of the color\\_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.\n* **colors** (*Sequence**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]*) – The colors defining the color gradient of the vector field.\n* **x\\_range** (*Sequence**\\[**float**]*) – A sequence of x\\_min, x\\_max, delta\\_x\n* **y\\_range** (*Sequence**\\[**float**]*) – A sequence of y\\_min, y\\_max, delta\\_y\n* **z\\_range** (*Sequence**\\[**float**]*) – A sequence of z\\_min, z\\_max, delta\\_z\n* **three\\_dimensions** (*bool*) – Enables three\\_dimensions. Default set to False, automatically turns True if\nz\\_range is not None.\n* **noise\\_factor** (*float* *\\|* *None*) – The amount by which the starting position of each agent is altered along each axis. Defaults to `delta_y / 2` if not defined.\n* **n\\_repeats** – The number of agents generated at each starting point.\n* **dt** – The factor by which the distance an agent moves per step is stretched. Lower values result in a better approximation of the trajectories in the vector field.\n* **virtual\\_time** – The time the agents get to move in the vector field. Higher values therefore result in longer stream lines. However, this whole time gets simulated upon creation.\n* **max\\_anchors\\_per\\_line** – The maximum number of anchors per line. Lines with more anchors get reduced in complexity, not in length.\n* **padding** – The distance agents can move out of the generation area before being terminated.\n* **stroke\\_width** – The stroke with of the stream lines.\n* **opacity** – The opacity of the stream lines.\nExamples\nExample: BasicUsage [¶](#basicusage)\n![../_images/BasicUsage-2.png](../_images/BasicUsage-2.png)\n```\nfrom manim import *\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))\n```\n```\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))\n```\nExample: SpawningAndFlowingArea [¶](#spawningandflowingarea)\n![../_images/SpawningAndFlowingArea-1.png](../_images/SpawningAndFlowingArea-1.png)\n```\nfrom manim import *\nclass SpawningAndFlowingArea(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5\n        stream_lines = StreamLines(\n            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1\n        )\n        spawning_area = Rectangle(width=6, height=4)\n        flowing_area = Rectangle(width=8, height=6)\n        labels = [Tex(\"Spawning Area\"), Tex(\"Flowing Area\").shift(DOWN * 2.5)]\n        for lbl in labels:\n            lbl.add_background_rectangle(opacity=0.6, buff=0.05)\n        self.add(stream_lines, spawning_area, flowing_area, *labels)\n```\n```\nclass SpawningAndFlowingArea(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5\n        stream_lines = StreamLines(\n            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1\n        )\n        spawning_area = Rectangle(width=6, height=4)\n        flowing_area = Rectangle(width=8, height=6)\n        labels = [Tex(\"Spawning Area\"), Tex(\"Flowing Area\").shift(DOWN * 2.5)]\n        for lbl in labels:\n            lbl.add_background_rectangle(opacity=0.6, buff=0.05)\n        self.add(stream_lines, spawning_area, flowing_area, *labels)\n```\nMethods\n| [`create`](#manim.mobject.vector_field.StreamLines.create \"manim.mobject.vector_field.StreamLines.create\") | The creation animation of the stream lines. |\n| --- | --- |\n| [`end_animation`](#manim.mobject.vector_field.StreamLines.end_animation \"manim.mobject.vector_field.StreamLines.end_animation\") | End the stream line animation smoothly. |\n| [`start_animation`](#manim.mobject.vector_field.StreamLines.start_animation \"manim.mobject.vector_field.StreamLines.start_animation\") | Animates the stream lines using an updater. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*func*, *color\\=None*, *color\\_scheme\\=None*, *min\\_color\\_scheme\\_value\\=0*, *max\\_color\\_scheme\\_value\\=2*, *colors\\=\\[ManimColor('\\#236B8E'), ManimColor('\\#83C167'), ManimColor('\\#FFFF00'), ManimColor('\\#FC6255')]*, *x\\_range\\=None*, *y\\_range\\=None*, *z\\_range\\=None*, *three\\_dimensions\\=False*, *noise\\_factor\\=None*, *n\\_repeats\\=1*, *dt\\=0\\.05*, *virtual\\_time\\=3*, *max\\_anchors\\_per\\_line\\=100*, *padding\\=3*, *stroke\\_width\\=1*, *opacity\\=1*, *\\*\\*kwargs*)[¶](#manim.mobject.vector_field.StreamLines._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **func** (*Callable**\\[**\\[**np.ndarray**]**,* *np.ndarray**]*)\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **color\\_scheme** (*Callable**\\[**\\[**np.ndarray**]**,* *float**]* *\\|* *None*)\n* **min\\_color\\_scheme\\_value** (*float*)\n* **max\\_color\\_scheme\\_value** (*float*)\n* **colors** (*Sequence**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]*)\n* **x\\_range** (*Sequence**\\[**float**]*)\n* **y\\_range** (*Sequence**\\[**float**]*)\n* **z\\_range** (*Sequence**\\[**float**]*)\n* **three\\_dimensions** (*bool*)\n* **noise\\_factor** (*float* *\\|* *None*)\ncreate(*lag\\_ratio\\=None*, *run\\_time\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/vector_field.html#StreamLines.create)[¶](#manim.mobject.vector_field.StreamLines.create \"Link to this definition\")\nThe creation animation of the stream lines.\nThe stream lines appear in random order.\nParameters:\n* **lag\\_ratio** (*float* *\\|* *None*) – The lag ratio of the animation.\nIf undefined, it will be selected so that the total animation length is 1\\.5 times the run time of each stream line creation.\n* **run\\_time** (*Callable**\\[**\\[**float**]**,* *float**]* *\\|* *None*) – The run time of every single stream line creation. The runtime of the whole animation might be longer due to the lag\\_ratio.\nIf undefined, the virtual time of the stream lines is used as run time.\nReturns:\nThe creation animation of the stream lines.\nReturn type:\n[`AnimationGroup`](manim.animation.composition.AnimationGroup.html#manim.animation.composition.AnimationGroup \"manim.animation.composition.AnimationGroup\")\nExamples\nExample: StreamLineCreation [¶](#streamlinecreation)\n```\nfrom manim import *\nclass StreamLineCreation(Scene):\n    def construct(self):\n        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos\n        stream_lines = StreamLines(\n            func,\n            color=YELLOW,\n            x_range=[-7, 7, 1],\n            y_range=[-4, 4, 1],\n            stroke_width=3,\n            virtual_time=1,  # use shorter lines\n            max_anchors_per_line=5,  # better performance with fewer anchors\n        )\n        self.play(stream_lines.create())  # uses virtual_time as run_time\n        self.wait()\n```\n```\nclass StreamLineCreation(Scene):\n    def construct(self):\n        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos\n        stream_lines = StreamLines(\n            func,\n            color=YELLOW,\n            x_range=[-7, 7, 1],\n            y_range=[-4, 4, 1],\n            stroke_width=3,\n            virtual_time=1,  # use shorter lines\n            max_anchors_per_line=5,  # better performance with fewer anchors\n        )\n        self.play(stream_lines.create())  # uses virtual_time as run_time\n        self.wait()\n```\nend\\_animation()[\\[source]](../_modules/manim/mobject/vector_field.html#StreamLines.end_animation)[¶](#manim.mobject.vector_field.StreamLines.end_animation \"Link to this definition\")\nEnd the stream line animation smoothly.\nReturns an animation resulting in fully displayed stream lines without a noticeable cut.\nReturns:\nThe animation fading out the running stream animation.\nReturn type:\n[`AnimationGroup`](manim.animation.composition.AnimationGroup.html#manim.animation.composition.AnimationGroup \"manim.animation.composition.AnimationGroup\")\nRaises:\n**ValueError** – if no stream line animation is running\nExamples\nExample: EndAnimation [¶](#endanimation)\n```\nfrom manim import *\nclass EndAnimation(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(\n            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE\n        )\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)\n        self.wait(1)\n        self.play(stream_lines.end_animation())\n```\n```\nclass EndAnimation(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(\n            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE\n        )\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)\n        self.wait(1)\n        self.play(stream_lines.end_animation())\n```\nstart\\_animation(*warm\\_up\\=True*, *flow\\_speed\\=1*, *time\\_width\\=0\\.3*, *rate\\_func\\=\\<function linear\\>*, *line\\_animation\\_class\\=\\<class 'manim.animation.indication.ShowPassingFlash'\\>*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/vector_field.html#StreamLines.start_animation)[¶](#manim.mobject.vector_field.StreamLines.start_animation \"Link to this definition\")\nAnimates the stream lines using an updater.\nThe stream lines will continuously flow\nParameters:\n* **warm\\_up** (*bool*) – If True the animation is initialized line by line. Otherwise it starts with all lines shown.\n* **flow\\_speed** (*float*) – At flow\\_speed\\=1 the distance the flow moves per second is equal to the magnitude of the vector field along its path. The speed value scales the speed of this flow.\n* **time\\_width** (*float*) – The proportion of the stream line shown while being animated\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*) – The rate function of each stream line flashing\n* **line\\_animation\\_class** (*type**\\[*[*ShowPassingFlash*](manim.animation.indication.ShowPassingFlash.html#manim.animation.indication.ShowPassingFlash \"manim.animation.indication.ShowPassingFlash\")*]*) – The animation class being used\nReturn type:\nNone\nExamples\nExample: ContinuousMotion [¶](#continuousmotion)\n```\nfrom manim import *\nclass ContinuousMotion(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(func, stroke_width=3, max_anchors_per_line=30)\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5)\n        self.wait(stream_lines.virtual_time / stream_lines.flow_speed)\n```\n```\nclass ContinuousMotion(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(func, stroke_width=3, max_anchors_per_line=30)\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5)\n        self.wait(stream_lines.virtual_time / stream_lines.flow_speed)\n```",
  "scraped_at": "2025-06-24T17:59:42.175728",
  "content_length": 14015,
  "domain": "docs.manim.community",
  "word_count": 1357,
  "inspection_status": "approved",
  "filename": "StreamLines - Manim Community v0.19.0_20250624_175942.json",
  "saved_at": "2025-06-24T17:59:42.175823",
  "approved_at": "2025-06-25T17:18:58.298656"
}