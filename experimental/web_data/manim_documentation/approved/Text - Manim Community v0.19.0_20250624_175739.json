{
  "doc_id": "abda2477b4712b77a8c8b9971cedf55d",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.text.text_mobject.Text.html",
  "title": "Text - Manim Community v0.19.0",
  "content": "Text[¶](#text \"Link to this heading\")\n=====================================\nQualified name: `manim.mobject.text.text\\_mobject.Text`\n*class* Text(*text*, *fill\\_opacity\\=1\\.0*, *stroke\\_width\\=0*, *\\**, *color\\=ManimColor('\\#FFFFFF')*, *font\\_size\\=48*, *line\\_spacing\\=\\-1*, *font\\=''*, *slant\\='NORMAL'*, *weight\\='NORMAL'*, *t2c\\=None*, *t2f\\=None*, *t2g\\=None*, *t2s\\=None*, *t2w\\=None*, *gradient\\=None*, *tab\\_width\\=4*, *warn\\_missing\\_font\\=True*, *height\\=None*, *width\\=None*, *should\\_center\\=True*, *disable\\_ligatures\\=False*, *use\\_svg\\_cache\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text)[¶](#manim.mobject.text.text_mobject.Text \"Link to this definition\")\nBases: [`SVGMobject`](manim.mobject.svg.svg_mobject.SVGMobject.html#manim.mobject.svg.svg_mobject.SVGMobject \"manim.mobject.svg.svg_mobject.SVGMobject\")\nDisplay (non\\-LaTeX) text rendered using [Pango](https://pango.org/).\nText objects behave like a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\\-like iterable of all characters\nin the given text. In particular, slicing is possible.\nParameters:\n* **text** (*str*) – The text that needs to be created as a mobject.\n* **font** (*str*) – The font family to be used to render the text. This is either a system font or\none loaded with register\\_font(). Note that font family names may be different\nacross operating systems.\n* **warn\\_missing\\_font** (*bool*) – If True (default), Manim will issue a warning if the font does not exist in the\n(case\\-sensitive) list of fonts returned from manimpango.list\\_fonts().\n* **fill\\_opacity** (*float*)\n* **stroke\\_width** (*float*)\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **font\\_size** (*float*)\n* **line\\_spacing** (*float*)\n* **slant** (*str*)\n* **weight** (*str*)\n* **t2c** (*dict**\\[**str**,* *str**]*)\n* **t2f** (*dict**\\[**str**,* *str**]*)\n* **t2g** (*dict**\\[**str**,* *tuple**]*)\n* **t2s** (*dict**\\[**str**,* *str**]*)\n* **t2w** (*dict**\\[**str**,* *str**]*)\n* **gradient** (*tuple*)\n* **tab\\_width** (*int*)\n* **height** (*float*)\n* **width** (*float*)\n* **should\\_center** (*bool*)\n* **disable\\_ligatures** (*bool*)\n* **use\\_svg\\_cache** (*bool*)\nReturns:\nThe mobject\\-like [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nReturn type:\n[`Text`](#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\")\nExamples\nExample: Example1Text [¶](#example1text)\n![../_images/Example1Text-1.png](../_images/Example1Text-1.png)\n```\nfrom manim import *\nclass Example1Text(Scene):\n    def construct(self):\n        text = Text('Hello world').scale(3)\n        self.add(text)\n```\n```\nclass Example1Text(Scene):\n    def construct(self):\n        text = Text('Hello world').scale(3)\n        self.add(text)\n```\nExample: TextColorExample [¶](#textcolorexample)\n![../_images/TextColorExample-1.png](../_images/TextColorExample-1.png)\n```\nfrom manim import *\nclass TextColorExample(Scene):\n    def construct(self):\n        text1 = Text('Hello world', color=BLUE).scale(3)\n        text2 = Text('Hello world', gradient=(BLUE, GREEN)).scale(3).next_to(text1, DOWN)\n        self.add(text1, text2)\n```\n```\nclass TextColorExample(Scene):\n    def construct(self):\n        text1 = Text('Hello world', color=BLUE).scale(3)\n        text2 = Text('Hello world', gradient=(BLUE, GREEN)).scale(3).next_to(text1, DOWN)\n        self.add(text1, text2)\n```\nExample: TextItalicAndBoldExample [¶](#textitalicandboldexample)\n![../_images/TextItalicAndBoldExample-1.png](../_images/TextItalicAndBoldExample-1.png)\n```\nfrom manim import *\nclass TextItalicAndBoldExample(Scene):\n    def construct(self):\n        text1 = Text(\"Hello world\", slant=ITALIC)\n        text2 = Text(\"Hello world\", t2s={'world':ITALIC})\n        text3 = Text(\"Hello world\", weight=BOLD)\n        text4 = Text(\"Hello world\", t2w={'world':BOLD})\n        text5 = Text(\"Hello world\", t2c={'o':YELLOW}, disable_ligatures=True)\n        text6 = Text(\n            \"Visit us at docs.manim.community\",\n            t2c={\"docs.manim.community\": YELLOW},\n            disable_ligatures=True,\n       )\n        text6.scale(1.3).shift(DOWN)\n        self.add(text1, text2, text3, text4, text5 , text6)\n        Group(*self.mobjects).arrange(DOWN, buff=.8).set(height=config.frame_height-LARGE_BUFF)\n```\n```\nclass TextItalicAndBoldExample(Scene):\n    def construct(self):\n        text1 = Text(\"Hello world\", slant=ITALIC)\n        text2 = Text(\"Hello world\", t2s={'world':ITALIC})\n        text3 = Text(\"Hello world\", weight=BOLD)\n        text4 = Text(\"Hello world\", t2w={'world':BOLD})\n        text5 = Text(\"Hello world\", t2c={'o':YELLOW}, disable_ligatures=True)\n        text6 = Text(\n            \"Visit us at docs.manim.community\",\n            t2c={\"docs.manim.community\": YELLOW},\n            disable_ligatures=True,\n       )\n        text6.scale(1.3).shift(DOWN)\n        self.add(text1, text2, text3, text4, text5 , text6)\n        Group(*self.mobjects).arrange(DOWN, buff=.8).set(height=config.frame_height-LARGE_BUFF)\n```\nExample: TextMoreCustomization [¶](#textmorecustomization)\n![../_images/TextMoreCustomization-1.png](../_images/TextMoreCustomization-1.png)\n```\nfrom manim import *\nclass TextMoreCustomization(Scene):\n    def construct(self):\n        text1 = Text(\n            'Google',\n            t2c={'[:1]': '#3174f0', '[1:2]': '#e53125',\n                 '[2:3]': '#fbb003', '[3:4]': '#3174f0',\n                 '[4:5]': '#269a43', '[5:]': '#e53125'}, font_size=58).scale(3)\n        self.add(text1)\n```\n```\nclass TextMoreCustomization(Scene):\n    def construct(self):\n        text1 = Text(\n            'Google',\n            t2c={'[:1]': '#3174f0', '[1:2]': '#e53125',\n                 '[2:3]': '#fbb003', '[3:4]': '#3174f0',\n                 '[4:5]': '#269a43', '[5:]': '#e53125'}, font_size=58).scale(3)\n        self.add(text1)\n```\nAs [`Text`](#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\") uses Pango to render text, rendering non\\-English\ncharacters is easily possible:\nExample: MultipleFonts [¶](#multiplefonts)\n![../_images/MultipleFonts-1.png](../_images/MultipleFonts-1.png)\n```\nfrom manim import *\nclass MultipleFonts(Scene):\n    def construct(self):\n        morning = Text(\"வணக்கம்\", font=\"sans-serif\")\n        japanese = Text(\n            \"日本へようこそ\", t2c={\"日本\": BLUE}\n        )  # works same as ``Text``.\n        mess = Text(\"Multi-Language\", weight=BOLD)\n        russ = Text(\"Здравствуйте मस नम म \", font=\"sans-serif\")\n        hin = Text(\"नमस्ते\", font=\"sans-serif\")\n        arb = Text(\n            \"صباح الخير \\n تشرفت بمقابلتك\", font=\"sans-serif\"\n        )  # don't mix RTL and LTR languages nothing shows up then ;-)\n        chinese = Text(\"臂猿「黛比」帶著孩子\", font=\"sans-serif\")\n        self.add(morning, japanese, mess, russ, hin, arb, chinese)\n        for i,mobj in enumerate(self.mobjects):\n            mobj.shift(DOWN*(i-3))\n```\n```\nclass MultipleFonts(Scene):\n    def construct(self):\n        morning = Text(\"வணக்கம்\", font=\"sans-serif\")\n        japanese = Text(\n            \"日本へようこそ\", t2c={\"日本\": BLUE}\n        )  # works same as ``Text``.\n        mess = Text(\"Multi-Language\", weight=BOLD)\n        russ = Text(\"Здравствуйте मस नम म \", font=\"sans-serif\")\n        hin = Text(\"नमस्ते\", font=\"sans-serif\")\n        arb = Text(\n            \"صباح الخير \\n تشرفت بمقابلتك\", font=\"sans-serif\"\n        )  # don't mix RTL and LTR languages nothing shows up then ;-)\n        chinese = Text(\"臂猿「黛比」帶著孩子\", font=\"sans-serif\")\n        self.add(morning, japanese, mess, russ, hin, arb, chinese)\n        for i,mobj in enumerate(self.mobjects):\n            mobj.shift(DOWN*(i-3))\n```\nExample: PangoRender [¶](#pangorender)\n```\nfrom manim import *\nclass PangoRender(Scene):\n    def construct(self):\n        morning = Text(\"வணக்கம்\", font=\"sans-serif\")\n        self.play(Write(morning))\n        self.wait(2)\n```\n```\nclass PangoRender(Scene):\n    def construct(self):\n        morning = Text(\"வணக்கம்\", font=\"sans-serif\")\n        self.play(Write(morning))\n        self.wait(2)\n```\nTests\nCheck that the creation of [`Text`](#manim.mobject.text.text_mobject.Text \"manim.mobject.text.text_mobject.Text\") works:\n```\n>>> Text('The horse does not eat cucumber salad.')\nText('The horse does not eat cucumber salad.')\n```\nMethods\n| `font_list` |  |\n| --- | --- |\n| [`init_colors`](#manim.mobject.text.text_mobject.Text.init_colors \"manim.mobject.text.text_mobject.Text.init_colors\") | Initializes the colors. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `font_size` |  |\n| `hash_seed` | A unique hash representing the result of the generated mobject points. |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_find\\_indexes(*word*, *text*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._find_indexes)[¶](#manim.mobject.text.text_mobject.Text._find_indexes \"Link to this definition\")\nFinds the indexes of `text` in `word`.\nParameters:\n* **word** (*str*)\n* **text** (*str*)\n\\_original\\_\\_init\\_\\_(*text*, *fill\\_opacity\\=1\\.0*, *stroke\\_width\\=0*, *color\\=None*, *font\\_size\\=48*, *line\\_spacing\\=\\-1*, *font\\=''*, *slant\\='NORMAL'*, *weight\\='NORMAL'*, *t2c\\=None*, *t2f\\=None*, *t2g\\=None*, *t2s\\=None*, *t2w\\=None*, *gradient\\=None*, *tab\\_width\\=4*, *warn\\_missing\\_font\\=True*, *height\\=None*, *width\\=None*, *should\\_center\\=True*, *disable\\_ligatures\\=False*, *use\\_svg\\_cache\\=False*, *\\*\\*kwargs*)[¶](#manim.mobject.text.text_mobject.Text._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **text** (*str*)\n* **fill\\_opacity** (*float*)\n* **stroke\\_width** (*float*)\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **font\\_size** (*float*)\n* **line\\_spacing** (*float*)\n* **font** (*str*)\n* **slant** (*str*)\n* **weight** (*str*)\n* **t2c** (*dict**\\[**str**,* *str**]*)\n* **t2f** (*dict**\\[**str**,* *str**]*)\n* **t2g** (*dict**\\[**str**,* *tuple**]*)\n* **t2s** (*dict**\\[**str**,* *str**]*)\n* **t2w** (*dict**\\[**str**,* *str**]*)\n* **gradient** (*tuple*)\n* **tab\\_width** (*int*)\n* **warn\\_missing\\_font** (*bool*)\n* **height** (*float*)\n* **width** (*float*)\n* **should\\_center** (*bool*)\n* **disable\\_ligatures** (*bool*)\n* **use\\_svg\\_cache** (*bool*)\nReturn type:\nNone\n\\_set\\_color\\_by\\_t2c(*t2c\\=None*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._set_color_by_t2c)[¶](#manim.mobject.text.text_mobject.Text._set_color_by_t2c \"Link to this definition\")\nSets color for specified strings.\nAttention\nDeprecated\nThe method Text.\\_set\\_color\\_by\\_t2c has been deprecated since v0\\.14\\.0 and is expected to be removed after v0\\.15\\.0\\. This was internal function, you shouldn’t be using it anyway.\n\\_set\\_color\\_by\\_t2g(*t2g\\=None*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._set_color_by_t2g)[¶](#manim.mobject.text.text_mobject.Text._set_color_by_t2g \"Link to this definition\")\nSets gradient colors for specified\nstrings. Behaves similarly to `set_color_by_t2c`.\nAttention\nDeprecated\nThe method Text.\\_set\\_color\\_by\\_t2g has been deprecated since v0\\.14\\.0 and is expected to be removed after v0\\.15\\.0\\. This was internal function, you shouldn’t be using it anyway.\n\\_text2hash(*color*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._text2hash)[¶](#manim.mobject.text.text_mobject.Text._text2hash \"Link to this definition\")\nGenerates `sha256` hash for file name.\nParameters:\n**color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\n\\_text2settings(*color*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._text2settings)[¶](#manim.mobject.text.text_mobject.Text._text2settings \"Link to this definition\")\nConverts the texts and styles to a setting for parsing.\nParameters:\n**color** (*str*)\n\\_text2svg(*color*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text._text2svg)[¶](#manim.mobject.text.text_mobject.Text._text2svg \"Link to this definition\")\nConvert the text to SVG using Pango.\nParameters:\n**color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\ninit\\_colors(*propagate\\_colors\\=True*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#Text.init_colors)[¶](#manim.mobject.text.text_mobject.Text.init_colors \"Link to this definition\")\nInitializes the colors.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.",
  "scraped_at": "2025-06-24T17:57:39.990433",
  "content_length": 13187,
  "domain": "docs.manim.community",
  "word_count": 1104,
  "inspection_status": "approved",
  "filename": "Text - Manim Community v0.19.0_20250624_175739.json",
  "saved_at": "2025-06-24T17:57:39.990536",
  "approved_at": "2025-06-25T17:18:58.441996"
}