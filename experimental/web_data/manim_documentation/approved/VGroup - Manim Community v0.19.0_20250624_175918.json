{
  "doc_id": "4647fd210fd6751c8e45e0f0cac6c321",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.types.vectorized_mobject.VGroup.html",
  "title": "VGroup - Manim Community v0.19.0",
  "content": "VGroup[¶](#vgroup \"Link to this heading\")\n=========================================\nQualified name: `manim.mobject.types.vectorized\\_mobject.VGroup`\n*class* VGroup(*\\*vmobjects*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VGroup)[¶](#manim.mobject.types.vectorized_mobject.VGroup \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA group of vectorized mobjects.\nThis can be used to group multiple [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") instances together\nin order to scale, move, … them together.\nNotes\nWhen adding the same mobject more than once, repetitions are ignored.\nUse [`Mobject.copy()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.copy \"manim.mobject.mobject.Mobject.copy\") to create a separate copy which can then\nbe added to the group.\nExamples\nTo add `VGroup`, you can either use the\n[`add()`](#manim.mobject.types.vectorized_mobject.VGroup.add \"manim.mobject.types.vectorized_mobject.VGroup.add\") method, or use the \\+ and \\+\\= operators. Similarly, you\ncan subtract elements of a VGroup via `remove()` method, or\n\\- and \\-\\= operators:\n```\n>>> from manim import Triangle, Square, VGroup\n>>> vg = VGroup()\n>>> triangle, square = Triangle(), Square()\n>>> vg.add(triangle)\nVGroup(Triangle)\n>>> vg + square  # a new VGroup is constructed\nVGroup(Triangle, Square)\n>>> vg  # not modified\nVGroup(Triangle)\n>>> vg += square\n>>> vg  # modifies vg\nVGroup(Triangle, Square)\n>>> vg.remove(triangle)\nVGroup(Square)\n>>> vg - square  # a new VGroup is constructed\nVGroup()\n>>> vg  # not modified\nVGroup(Square)\n>>> vg -= square\n>>> vg  # modifies vg\nVGroup()\n```\nExample: ArcShapeIris [¶](#arcshapeiris)\n![../_images/ArcShapeIris-1.png](../_images/ArcShapeIris-1.png)\n```\nfrom manim import *\nclass ArcShapeIris(Scene):\n    def construct(self):\n        colors = [DARK_BROWN, BLUE_E, BLUE_D, BLUE_A, TEAL_B, GREEN_B, YELLOW_E]\n        radius = [1 + rad * 0.1 for rad in range(len(colors))]\n        circles_group = VGroup()\n        # zip(radius, color) makes the iterator [(radius[i], color[i]) for i in range(radius)]\n        circles_group.add(*[Circle(radius=rad, stroke_width=10, color=col)\n                            for rad, col in zip(radius, colors)])\n        self.add(circles_group)\n```\n```\nclass ArcShapeIris(Scene):\n    def construct(self):\n        colors = [DARK_BROWN, BLUE_E, BLUE_D, BLUE_A, TEAL_B, GREEN_B, YELLOW_E]\n        radius = [1 + rad * 0.1 for rad in range(len(colors))]\n        circles_group = VGroup()\n        # zip(radius, color) makes the iterator [(radius[i], color[i]) for i in range(radius)]\n        circles_group.add(*[Circle(radius=rad, stroke_width=10, color=col)\n                            for rad, col in zip(radius, colors)])\n        self.add(circles_group)\n```\nMethods\n| [`add`](#manim.mobject.types.vectorized_mobject.VGroup.add \"manim.mobject.types.vectorized_mobject.VGroup.add\") | Checks if all passed elements are an instance, or iterables of VMobject and then adds them to submobjects |\n| --- | --- |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\nParameters:\n* **vmobjects** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* *Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*)\n* **kwargs** (*Any*)\n\\_original\\_\\_init\\_\\_(*\\*vmobjects*, *\\*\\*kwargs*)[¶](#manim.mobject.types.vectorized_mobject.VGroup._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vmobjects** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* *Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*)\n* **kwargs** (*Any*)\nReturn type:\nNone\nadd(*\\*vmobjects*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VGroup.add)[¶](#manim.mobject.types.vectorized_mobject.VGroup.add \"Link to this definition\")\nChecks if all passed elements are an instance, or iterables of VMobject and then adds them to submobjects\nParameters:\n**vmobjects** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* *Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*) – List or iterable of VMobjects to add\nReturn type:\n[`VGroup`](#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nRaises:\n**TypeError** – If one element of the list, or iterable is not an instance of VMobject\nExamples\nThe following example shows how to add individual or multiple VMobject instances through the VGroup\nconstructor and its .add() method.\nExample: AddToVGroup [¶](#addtovgroup)\n```\nfrom manim import *\nclass AddToVGroup(Scene):\n    def construct(self):\n        circle_red = Circle(color=RED)\n        circle_green = Circle(color=GREEN)\n        circle_blue = Circle(color=BLUE)\n        circle_red.shift(LEFT)\n        circle_blue.shift(RIGHT)\n        gr = VGroup(circle_red, circle_green)\n        gr2 = VGroup(circle_blue) # Constructor uses add directly\n        self.add(gr,gr2)\n        self.wait()\n        gr += gr2 # Add group to another\n        self.play(\n            gr.animate.shift(DOWN),\n        )\n        gr -= gr2 # Remove group\n        self.play( # Animate groups separately\n            gr.animate.shift(LEFT),\n            gr2.animate.shift(UP),\n        )\n        self.play( #Animate groups without modification\n            (gr+gr2).animate.shift(RIGHT)\n        )\n        self.play( # Animate group without component\n            (gr-circle_red).animate.shift(RIGHT)\n        )\n```\n```\nclass AddToVGroup(Scene):\n    def construct(self):\n        circle_red = Circle(color=RED)\n        circle_green = Circle(color=GREEN)\n        circle_blue = Circle(color=BLUE)\n        circle_red.shift(LEFT)\n        circle_blue.shift(RIGHT)\n        gr = VGroup(circle_red, circle_green)\n        gr2 = VGroup(circle_blue) # Constructor uses add directly\n        self.add(gr,gr2)\n        self.wait()\n        gr += gr2 # Add group to another\n        self.play(\n            gr.animate.shift(DOWN),\n        )\n        gr -= gr2 # Remove group\n        self.play( # Animate groups separately\n            gr.animate.shift(LEFT),\n            gr2.animate.shift(UP),\n        )\n        self.play( #Animate groups without modification\n            (gr+gr2).animate.shift(RIGHT)\n        )\n        self.play( # Animate group without component\n            (gr-circle_red).animate.shift(RIGHT)\n        )\n```\nA VGroup can be created using iterables as well. Keep in mind that all generated values from an\niterable must be an instance of VMobject. This is demonstrated below:\nExample: AddIterableToVGroupExample [¶](#additerabletovgroupexample)\n![../_images/AddIterableToVGroupExample-1.png](../_images/AddIterableToVGroupExample-1.png)\n```\nfrom manim import *\nclass AddIterableToVGroupExample(Scene):\n    def construct(self):\n        v = VGroup(\n            Square(),               # Singular VMobject instance\n            [Circle(), Triangle()], # List of VMobject instances\n            Dot(),\n            (Dot() for _ in range(2)), # Iterable that generates VMobjects\n        )\n        v.arrange()\n        self.add(v)\n```\n```\nclass AddIterableToVGroupExample(Scene):\n    def construct(self):\n        v = VGroup(\n            Square(),               # Singular VMobject instance\n            [Circle(), Triangle()], # List of VMobject instances\n            Dot(),\n            (Dot() for _ in range(2)), # Iterable that generates VMobjects\n        )\n        v.arrange()\n        self.add(v)\n```\nTo facilitate this, the iterable is unpacked before its individual instances are added to the VGroup.\nAs a result, when you index a VGroup, you will never get back an iterable.\nInstead, you will always receive VMobject instances, including those\nthat were part of the iterable/s that you originally added to the VGroup.",
  "scraped_at": "2025-06-24T17:59:18.848371",
  "content_length": 9040,
  "domain": "docs.manim.community",
  "word_count": 836,
  "inspection_status": "approved",
  "filename": "VGroup - Manim Community v0.19.0_20250624_175918.json",
  "saved_at": "2025-06-24T17:59:18.848450",
  "approved_at": "2025-06-25T17:18:58.306826"
}