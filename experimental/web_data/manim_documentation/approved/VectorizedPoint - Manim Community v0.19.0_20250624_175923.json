{
  "doc_id": "527b52b08486a50915dba3c8445ce15f",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.types.vectorized_mobject.VectorizedPoint.html",
  "title": "VectorizedPoint - Manim Community v0.19.0",
  "content": "VectorizedPoint[¶](#vectorizedpoint \"Link to this heading\")\n===========================================================\nQualified name: `manim.mobject.types.vectorized\\_mobject.VectorizedPoint`\n*class* VectorizedPoint(*location\\=array(\\[0\\., 0\\., 0\\.])*, *color\\=ManimColor('\\#000000')*, *fill\\_opacity\\=0*, *stroke\\_width\\=0*, *artificial\\_width\\=0\\.01*, *artificial\\_height\\=0\\.01*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VectorizedPoint)[¶](#manim.mobject.types.vectorized_mobject.VectorizedPoint \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nMethods\n| `get_location` |  |\n| --- | --- |\n| `set_location` |  |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| [`height`](#manim.mobject.types.vectorized_mobject.VectorizedPoint.height \"manim.mobject.types.vectorized_mobject.VectorizedPoint.height\") | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| [`width`](#manim.mobject.types.vectorized_mobject.VectorizedPoint.width \"manim.mobject.types.vectorized_mobject.VectorizedPoint.width\") | The width of the mobject. |\nParameters:\n* **location** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\n* **fill\\_opacity** (*float*)\n* **stroke\\_width** (*float*)\n* **artificial\\_width** (*float*)\n* **artificial\\_height** (*float*)\n\\_original\\_\\_init\\_\\_(*location\\=array(\\[0\\., 0\\., 0\\.])*, *color\\=ManimColor('\\#000000')*, *fill\\_opacity\\=0*, *stroke\\_width\\=0*, *artificial\\_width\\=0\\.01*, *artificial\\_height\\=0\\.01*, *\\*\\*kwargs*)[¶](#manim.mobject.types.vectorized_mobject.VectorizedPoint._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **location** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\n* **fill\\_opacity** (*float*)\n* **stroke\\_width** (*float*)\n* **artificial\\_width** (*float*)\n* **artificial\\_height** (*float*)\nReturn type:\nNone\nbasecls[¶](#manim.mobject.types.vectorized_mobject.VectorizedPoint.basecls \"Link to this definition\")\nalias of [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\n*property* height*: float*[¶](#manim.mobject.types.vectorized_mobject.VectorizedPoint.height \"Link to this definition\")\nThe height of the mobject.\nReturn type:\n`float`\nExamples\nExample: HeightExample [¶](#heightexample)\n```\nfrom manim import *\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```\n```\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```\nSee also\n`length_over_dim()`\n*property* width*: float*[¶](#manim.mobject.types.vectorized_mobject.VectorizedPoint.width \"Link to this definition\")\nThe width of the mobject.\nReturn type:\n`float`\nExamples\nExample: WidthExample [¶](#widthexample)\n```\nfrom manim import *\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```\n```\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```\nSee also\n`length_over_dim()`",
  "scraped_at": "2025-06-24T17:59:23.958336",
  "content_length": 4965,
  "domain": "docs.manim.community",
  "word_count": 347,
  "inspection_status": "approved",
  "filename": "VectorizedPoint - Manim Community v0.19.0_20250624_175923.json",
  "saved_at": "2025-06-24T17:59:23.958395",
  "approved_at": "2025-06-25T17:18:58.452031"
}