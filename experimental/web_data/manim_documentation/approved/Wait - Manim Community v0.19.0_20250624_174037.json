{
  "doc_id": "c942432fbebf8b54b63deae544f08bb2",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.animation.Wait.html",
  "title": "Wait - Manim Community v0.19.0",
  "content": "Wait[¶](#wait \"Link to this heading\")\n=====================================\nQualified name: `manim.animation.animation.Wait`\n*class* Wait(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/animation.html#Wait)[¶](#manim.animation.animation.Wait \"Link to this definition\")\nBases: [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nA “no operation” animation.\nParameters:\n* **run\\_time** (*float*) – The amount of time that should pass.\n* **stop\\_condition** (*Callable**\\[**\\[**]**,* *bool**]* *\\|* *None*) – A function without positional arguments that evaluates to a boolean.\nThe function is evaluated after every new frame has been rendered.\nPlaying the animation stops after the return value is truthy, or\nafter the specified `run_time` has passed.\n* **frozen\\_frame** (*bool* *\\|* *None*) – Controls whether or not the wait animation is static, i.e., corresponds\nto a frozen frame. If `False` is passed, the render loop still\nprogresses through the animation as usual and (among other things)\ncontinues to call updater functions. If `None` (the default value),\nthe [`Scene.play()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\") call tries to determine whether the Wait call\ncan be static or not itself via `Scene.should_mobjects_update()`.\n* **kwargs** – Keyword arguments to be passed to the parent class, [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\").\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*)\nMethods\n| [`begin`](#manim.animation.animation.Wait.begin \"manim.animation.animation.Wait.begin\") | Begin the animation. |\n| --- | --- |\n| [`clean_up_from_scene`](#manim.animation.animation.Wait.clean_up_from_scene \"manim.animation.animation.Wait.clean_up_from_scene\") | Clean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation. |\n| [`finish`](#manim.animation.animation.Wait.finish \"manim.animation.animation.Wait.finish\") | Finish the animation. |\n| [`interpolate`](#manim.animation.animation.Wait.interpolate \"manim.animation.animation.Wait.interpolate\") | Set the animation progress. |\n| [`update_mobjects`](#manim.animation.animation.Wait.update_mobjects \"manim.animation.animation.Wait.update_mobjects\") | Updates things like starting\\_mobject, and (for Transforms) target\\_mobject. |\nAttributes\n| `run_time` |  |\n| --- | --- |\n\\_original\\_\\_init\\_\\_(*run\\_time\\=1*, *stop\\_condition\\=None*, *frozen\\_frame\\=None*, *rate\\_func\\=\\<function linear\\>*, *\\*\\*kwargs*)[¶](#manim.animation.animation.Wait._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **run\\_time** (*float*)\n* **stop\\_condition** (*Callable**\\[**\\[**]**,* *bool**]* *\\|* *None*)\n* **frozen\\_frame** (*bool* *\\|* *None*)\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*)\nbegin()[\\[source]](../_modules/manim/animation/animation.html#Wait.begin)[¶](#manim.animation.animation.Wait.begin \"Link to this definition\")\nBegin the animation.\nThis method is called right as an animation is being played. As much\ninitialization as possible, especially any mobject copying, should live in this\nmethod.\nReturn type:\nNone\nclean\\_up\\_from\\_scene(*scene*)[\\[source]](../_modules/manim/animation/animation.html#Wait.clean_up_from_scene)[¶](#manim.animation.animation.Wait.clean_up_from_scene \"Link to this definition\")\nClean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation.\nThis includes to [`remove()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is a remover.\nParameters:\n**scene** ([*Scene*](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\")) – The scene the animation should be cleaned up from.\nReturn type:\nNone\nfinish()[\\[source]](../_modules/manim/animation/animation.html#Wait.finish)[¶](#manim.animation.animation.Wait.finish \"Link to this definition\")\nFinish the animation.\nThis method gets called when the animation is over.\nReturn type:\nNone\ninterpolate(*alpha*)[\\[source]](../_modules/manim/animation/animation.html#Wait.interpolate)[¶](#manim.animation.animation.Wait.interpolate \"Link to this definition\")\nSet the animation progress.\nThis method gets called for every frame during an animation.\nParameters:\n**alpha** (*float*) – The relative time to set the animation to, 0 meaning the start, 1 meaning\nthe end.\nReturn type:\nNone\nupdate\\_mobjects(*dt*)[\\[source]](../_modules/manim/animation/animation.html#Wait.update_mobjects)[¶](#manim.animation.animation.Wait.update_mobjects \"Link to this definition\")\nUpdates things like starting\\_mobject, and (for\nTransforms) target\\_mobject. Note, since typically\n(always?) self.mobject will have its updating\nsuspended during the animation, this will do\nnothing to self.mobject.\nParameters:\n**dt** (*float*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:40:37.975652",
  "content_length": 5277,
  "domain": "docs.manim.community",
  "word_count": 454,
  "inspection_status": "approved",
  "filename": "Wait - Manim Community v0.19.0_20250624_174037.json",
  "saved_at": "2025-06-24T17:40:37.975713",
  "approved_at": "2025-06-25T17:18:58.305795"
}