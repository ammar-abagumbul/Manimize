{
  "doc_id": "586844f50419ce583bf93d49f0aaab39",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.iterables.html",
  "title": "iterables - Manim Community v0.19.0",
  "content": "iterables[¶](#module-manim.utils.iterables \"Link to this heading\")\n==================================================================\nOperations on iterables.\nTypeVar’s\n*class* T[¶](#manim.utils.iterables.T \"Link to this definition\")\n```\nTypeVar('T')\n```\n*class* U[¶](#manim.utils.iterables.U \"Link to this definition\")\n```\nTypeVar('U')\n```\n*class* F[¶](#manim.utils.iterables.F \"Link to this definition\")\n```\nTypeVar('F', np.float64, np.int_)\n```\n*class* H[¶](#manim.utils.iterables.H \"Link to this definition\")\n```\nTypeVar('H', bound=Hashable)\n```\nFunctions\nadjacent\\_n\\_tuples(*objects*, *n*)[\\[source]](../_modules/manim/utils/iterables.html#adjacent_n_tuples)[¶](#manim.utils.iterables.adjacent_n_tuples \"Link to this definition\")\nReturns the Sequence objects cyclically split into n length tuples.\nSee also\n[`adjacent_pairs`](#manim.utils.iterables.adjacent_pairs \"manim.utils.iterables.adjacent_pairs\")alias with n\\=2\nExamples\n```\n>>> list(adjacent_n_tuples([1, 2, 3, 4], 2))\n[(1, 2), (2, 3), (3, 4), (4, 1)]\n>>> list(adjacent_n_tuples([1, 2, 3, 4], 3))\n[(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]\n```\nParameters:\n* **objects** (*Sequence**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **n** (*int*)\nReturn type:\nzip\\[tuple\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\"), …]]\nadjacent\\_pairs(*objects*)[\\[source]](../_modules/manim/utils/iterables.html#adjacent_pairs)[¶](#manim.utils.iterables.adjacent_pairs \"Link to this definition\")\nAlias for `adjacent_n_tuples(objects, 2)`.\nSee also\n[`adjacent_n_tuples`](#manim.utils.iterables.adjacent_n_tuples \"manim.utils.iterables.adjacent_n_tuples\")\nExamples\n```\n>>> list(adjacent_pairs([1, 2, 3, 4]))\n[(1, 2), (2, 3), (3, 4), (4, 1)]\n```\nParameters:\n**objects** (*Sequence**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\nReturn type:\nzip\\[tuple\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\"), …]]\nall\\_elements\\_are\\_instances(*iterable*, *Class*)[\\[source]](../_modules/manim/utils/iterables.html#all_elements_are_instances)[¶](#manim.utils.iterables.all_elements_are_instances \"Link to this definition\")\nReturns `True` if all elements of iterable are instances of Class.\nFalse otherwise.\nParameters:\n* **iterable** (*Iterable**\\[**object**]*)\n* **Class** (*type**\\[**object**]*)\nReturn type:\nbool\nbatch\\_by\\_property(*items*, *property\\_func*)[\\[source]](../_modules/manim/utils/iterables.html#batch_by_property)[¶](#manim.utils.iterables.batch_by_property \"Link to this definition\")\nTakes in a Sequence, and returns a list of tuples, (batch, prop)\nsuch that all items in a batch have the same output when\nput into the Callable property\\_func, and such that chaining all these\nbatches together would give the original Sequence (i.e. order is\npreserved).\nExamples\n```\n>>> batch_by_property([(1, 2), (3, 4), (5, 6, 7), (8, 9)], len)\n[([(1, 2), (3, 4)], 2), ([(5, 6, 7)], 3), ([(8, 9)], 2)]\n```\nParameters:\n* **items** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **property\\_func** (*Callable**\\[**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]**,* [*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\")*]*)\nReturn type:\nlist\\[tuple\\[list\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")], [*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\") \\| None]]\nconcatenate\\_lists(*\\*list\\_of\\_lists*)[\\[source]](../_modules/manim/utils/iterables.html#concatenate_lists)[¶](#manim.utils.iterables.concatenate_lists \"Link to this definition\")\nCombines the Iterables provided as arguments into one list.\nExamples\n```\n>>> concatenate_lists([1, 2], [3, 4], [5])\n[1, 2, 3, 4, 5]\n```\nParameters:\n**list\\_of\\_lists** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\nReturn type:\nlist\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nhash\\_obj(*obj*)[\\[source]](../_modules/manim/utils/iterables.html#hash_obj)[¶](#manim.utils.iterables.hash_obj \"Link to this definition\")\nDetermines a hash, even of potentially mutable objects.\nParameters:\n**obj** (*object*)\nReturn type:\nint\nlist\\_difference\\_update(*l1*, *l2*)[\\[source]](../_modules/manim/utils/iterables.html#list_difference_update)[¶](#manim.utils.iterables.list_difference_update \"Link to this definition\")\nReturns a list containing all the elements of l1 not in l2\\.\nExamples\n```\n>>> list_difference_update([1, 2, 3, 4], [2, 4])\n[1, 3]\n```\nParameters:\n* **l1** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **l2** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\nReturn type:\nlist\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nlist\\_update(*l1*, *l2*)[\\[source]](../_modules/manim/utils/iterables.html#list_update)[¶](#manim.utils.iterables.list_update \"Link to this definition\")\nUsed instead of `set.update()` to maintain order,making sure duplicates are removed from l1, not l2\\.\nRemoves overlap of l1 and l2 and then concatenates l2 unchanged.\nExamples\n```\n>>> list_update([1, 2, 3], [2, 4, 4])\n[1, 3, 2, 4, 4]\n```\nParameters:\n* **l1** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **l2** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\nReturn type:\nlist\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nlistify(*obj: str*) → list\\[str][\\[source]](../_modules/manim/utils/iterables.html#listify)[¶](#manim.utils.iterables.listify \"Link to this definition\")\nlistify(*obj: Iterable\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]*) → list\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nlistify(*obj: [T](#manim.utils.iterables.T \"manim.utils.iterables.T\")*) → list\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nConverts obj to a list intelligently.\nExamples\n```\n>>> listify(\"str\")\n['str']\n>>> listify((1, 2))\n[1, 2]\n>>> listify(len)\n[<built-in function len>]\n```\nmake\\_even(*iterable\\_1*, *iterable\\_2*)[\\[source]](../_modules/manim/utils/iterables.html#make_even)[¶](#manim.utils.iterables.make_even \"Link to this definition\")\nExtends the shorter of the two iterables with duplicate values until itslength is equal to the longer iterable (favours earlier elements).\nSee also\n[`make_even_by_cycling`](#manim.utils.iterables.make_even_by_cycling \"manim.utils.iterables.make_even_by_cycling\")cycles elements instead of favouring earlier ones\nExamples\n```\n>>> make_even([1, 2], [3, 4, 5, 6])\n([1, 1, 2, 2], [3, 4, 5, 6])\n>>> make_even([1, 2], [3, 4, 5, 6, 7])\n([1, 1, 1, 2, 2], [3, 4, 5, 6, 7])\n```\nParameters:\n* **iterable\\_1** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **iterable\\_2** (*Iterable**\\[*[*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\")*]*)\nReturn type:\ntuple\\[list\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")], list\\[[*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\")]]\nmake\\_even\\_by\\_cycling(*iterable\\_1*, *iterable\\_2*)[\\[source]](../_modules/manim/utils/iterables.html#make_even_by_cycling)[¶](#manim.utils.iterables.make_even_by_cycling \"Link to this definition\")\nExtends the shorter of the two iterables with duplicate values until itslength is equal to the longer iterable (cycles over shorter iterable).\nSee also\n[`make_even`](#manim.utils.iterables.make_even \"manim.utils.iterables.make_even\")favours earlier elements instead of cycling them\nExamples\n```\n>>> make_even_by_cycling([1, 2], [3, 4, 5, 6])\n([1, 2, 1, 2], [3, 4, 5, 6])\n>>> make_even_by_cycling([1, 2], [3, 4, 5, 6, 7])\n([1, 2, 1, 2, 1], [3, 4, 5, 6, 7])\n```\nParameters:\n* **iterable\\_1** (*Collection**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\n* **iterable\\_2** (*Collection**\\[*[*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\")*]*)\nReturn type:\ntuple\\[list\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")], list\\[[*U*](#manim.utils.iterables.U \"manim.utils.iterables.U\")]]\nremove\\_list\\_redundancies(*lst*)[\\[source]](../_modules/manim/utils/iterables.html#remove_list_redundancies)[¶](#manim.utils.iterables.remove_list_redundancies \"Link to this definition\")\nUsed instead of `list(set(l))` to maintain order.\nKeeps the last occurrence of each element.\nParameters:\n**lst** (*Reversible**\\[*[*H*](#manim.utils.iterables.H \"manim.utils.iterables.H\")*]*)\nReturn type:\nlist\\[[*H*](#manim.utils.iterables.H \"manim.utils.iterables.H\")]\nremove\\_nones(*sequence*)[\\[source]](../_modules/manim/utils/iterables.html#remove_nones)[¶](#manim.utils.iterables.remove_nones \"Link to this definition\")\nRemoves elements where bool(x) evaluates to False.\nExamples\n```\n>>> remove_nones([\"m\", \"\", \"l\", 0, 42, False, True])\n['m', 'l', 42, True]\n```\nParameters:\n**sequence** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\") *\\|* *None**]*)\nReturn type:\nlist\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nresize\\_array(*nparray*, *length*)[\\[source]](../_modules/manim/utils/iterables.html#resize_array)[¶](#manim.utils.iterables.resize_array \"Link to this definition\")\nExtends/truncates nparray so that `len(result) == length`.The elements of nparray are cycled to achieve the desired length.\nSee also\n[`resize_preserving_order`](#manim.utils.iterables.resize_preserving_order \"manim.utils.iterables.resize_preserving_order\")favours earlier elements instead of cycling them\n[`make_even_by_cycling`](#manim.utils.iterables.make_even_by_cycling \"manim.utils.iterables.make_even_by_cycling\")similar cycling behaviour for balancing 2 iterables\nExamples\n```\n>>> points = np.array([[1, 2], [3, 4]])\n>>> resize_array(points, 1)\narray([[1, 2]])\n>>> resize_array(points, 3)\narray([[1, 2],\n       [3, 4],\n       [1, 2]])\n>>> resize_array(points, 2)\narray([[1, 2],\n       [3, 4]])\n```\nParameters:\n* **nparray** (*npt.NDArray**\\[*[*F*](#manim.utils.iterables.F \"manim.utils.iterables.F\")*]*)\n* **length** (*int*)\nReturn type:\nnpt.NDArray\\[[F](#manim.utils.iterables.F \"manim.utils.iterables.F\")]\nresize\\_preserving\\_order(*nparray*, *length*)[\\[source]](../_modules/manim/utils/iterables.html#resize_preserving_order)[¶](#manim.utils.iterables.resize_preserving_order \"Link to this definition\")\nExtends/truncates nparray so that `len(result) == length`.The elements of nparray are duplicated to achieve the desired length\n(favours earlier elements).\nConstructs a zeroes array of length if nparray is empty.\nSee also\n[`resize_array`](#manim.utils.iterables.resize_array \"manim.utils.iterables.resize_array\")cycles elements instead of favouring earlier ones\n[`make_even`](#manim.utils.iterables.make_even \"manim.utils.iterables.make_even\")similar earlier\\-favouring behaviour for balancing 2 iterables\nExamples\n```\n>>> resize_preserving_order(np.array([]), 5)\narray([0., 0., 0., 0., 0.])\n>>> nparray = np.array([[1, 2], [3, 4]])\n>>> resize_preserving_order(nparray, 1)\narray([[1, 2]])\n>>> resize_preserving_order(nparray, 3)\narray([[1, 2],\n       [1, 2],\n       [3, 4]])\n```\nParameters:\n* **nparray** (*npt.NDArray**\\[**np.float64**]*)\n* **length** (*int*)\nReturn type:\nnpt.NDArray\\[np.float64]\nresize\\_with\\_interpolation(*nparray*, *length*)[\\[source]](../_modules/manim/utils/iterables.html#resize_with_interpolation)[¶](#manim.utils.iterables.resize_with_interpolation \"Link to this definition\")\nExtends/truncates nparray so that `len(result) == length`.New elements are interpolated to achieve the desired length.\nNote that if nparray’s length changes, its dtype may too\n(e.g. int \\-\\> float: see Examples)\nSee also\n[`resize_array`](#manim.utils.iterables.resize_array \"manim.utils.iterables.resize_array\")cycles elements instead of interpolating\n[`resize_preserving_order`](#manim.utils.iterables.resize_preserving_order \"manim.utils.iterables.resize_preserving_order\")favours earlier elements instead of interpolating\nExamples\n```\n>>> nparray = np.array([[1, 2], [3, 4]])\n>>> resize_with_interpolation(nparray, 1)\narray([[1., 2.]])\n>>> resize_with_interpolation(nparray, 4)\narray([[1.        , 2.        ],\n       [1.66666667, 2.66666667],\n       [2.33333333, 3.33333333],\n       [3.        , 4.        ]])\n>>> nparray = np.array([[[1, 2], [3, 4]]])\n>>> nparray = np.array([[1, 2], [3, 4], [5, 6]])\n>>> resize_with_interpolation(nparray, 4)\narray([[1.        , 2.        ],\n       [2.33333333, 3.33333333],\n       [3.66666667, 4.66666667],\n       [5.        , 6.        ]])\n>>> nparray = np.array([[1, 2], [3, 4], [1, 2]])\n>>> resize_with_interpolation(nparray, 4)\narray([[1.        , 2.        ],\n       [2.33333333, 3.33333333],\n       [2.33333333, 3.33333333],\n       [1.        , 2.        ]])\n```\nParameters:\n* **nparray** (*npt.NDArray**\\[*[*F*](#manim.utils.iterables.F \"manim.utils.iterables.F\")*]*)\n* **length** (*int*)\nReturn type:\nnpt.NDArray\\[[F](#manim.utils.iterables.F \"manim.utils.iterables.F\")]\nstretch\\_array\\_to\\_length(*nparray*, *length*)[\\[source]](../_modules/manim/utils/iterables.html#stretch_array_to_length)[¶](#manim.utils.iterables.stretch_array_to_length \"Link to this definition\")\nParameters:\n* **nparray** (*npt.NDArray**\\[*[*F*](#manim.utils.iterables.F \"manim.utils.iterables.F\")*]*)\n* **length** (*int*)\nReturn type:\nnpt.NDArray\\[[F](#manim.utils.iterables.F \"manim.utils.iterables.F\")]\ntuplify(*obj: str*) → tuple\\[str][\\[source]](../_modules/manim/utils/iterables.html#tuplify)[¶](#manim.utils.iterables.tuplify \"Link to this definition\")\ntuplify(*obj: Iterable\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]*) → tuple\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\ntuplify(*obj: [T](#manim.utils.iterables.T \"manim.utils.iterables.T\")*) → tuple\\[[T](#manim.utils.iterables.T \"manim.utils.iterables.T\")]\nConverts obj to a tuple intelligently.\nExamples\n```\n>>> tuplify(\"str\")\n('str',)\n>>> tuplify([1, 2])\n(1, 2)\n>>> tuplify(len)\n(<built-in function len>,)\n```\nuniq\\_chain(*\\*args*)[\\[source]](../_modules/manim/utils/iterables.html#uniq_chain)[¶](#manim.utils.iterables.uniq_chain \"Link to this definition\")\nReturns a generator that yields all unique elements of the Iterablesprovided via args in the order provided.\nExamples\n```\n>>> gen = uniq_chain([1, 2], [2, 3], [1, 4, 4])\n>>> from collections.abc import Generator\n>>> isinstance(gen, Generator)\nTrue\n>>> tuple(gen)\n(1, 2, 3, 4)\n```\nParameters:\n**args** (*Iterable**\\[*[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\")*]*)\nReturn type:\n*Generator*\\[[*T*](#manim.utils.iterables.T \"manim.utils.iterables.T\"), None, None]\nTypeVar’s\n*class* T[¶](#manim.utils.iterables.T \"Link to this definition\")\n```\nTypeVar('T')\n```\n*class* U[¶](#manim.utils.iterables.U \"Link to this definition\")\n```\nTypeVar('U')\n```\n*class* F[¶](#manim.utils.iterables.F \"Link to this definition\")\n```\nTypeVar('F', np.float64, np.int_)\n```\n*class* H[¶](#manim.utils.iterables.H \"Link to this definition\")\n```\nTypeVar('H', bound=Hashable)\n```",
  "scraped_at": "2025-06-24T18:36:33.384433",
  "content_length": 14779,
  "domain": "docs.manim.community",
  "word_count": 1214,
  "inspection_status": "approved",
  "filename": "iterables - Manim Community v0.19.0_20250624_183633.json",
  "saved_at": "2025-06-24T18:36:33.384515",
  "approved_at": "2025-06-25T17:18:58.303549"
}