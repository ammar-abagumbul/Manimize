{
  "doc_id": "6a03be6d093ebab01e1b0733c984d4e2",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.line.Angle.html",
  "title": "Angle - Manim Community v0.19.0",
  "content": "Angle[¶](#angle \"Link to this heading\")\n=======================================\nQualified name: `manim.mobject.geometry.line.Angle`\n*class* Angle(*line1*, *line2*, *radius\\=None*, *quadrant\\=(1, 1\\)*, *other\\_angle\\=False*, *dot\\=False*, *dot\\_radius\\=None*, *dot\\_distance\\=0\\.55*, *dot\\_color\\=ManimColor('\\#FFFFFF')*, *elbow\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Angle)[¶](#manim.mobject.geometry.line.Angle \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA circular arc or elbow\\-type mobject representing an angle of two lines.\nParameters:\n* **line1** ([*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")) – The first line.\n* **line2** ([*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")) – The second line.\n* **radius** (*float* *\\|* *None*) – The radius of the `Arc`.\n* **quadrant** ([*AngleQuadrant*](manim.mobject.geometry.line.html#manim.mobject.geometry.line.AngleQuadrant \"manim.mobject.geometry.line.AngleQuadrant\")) – A sequence of two `int` numbers determining which of the 4 quadrants should be used.\nThe first value indicates whether to anchor the arc on the first line closer to the end point (1\\)\nor start point (\\-1\\), and the second value functions similarly for the\nend (1\\) or start (\\-1\\) of the second line.\nPossibilities: (1,1\\), (\\-1,1\\), (1,\\-1\\), (\\-1,\\-1\\).\n* **other\\_angle** (*bool*) – Toggles between the two possible angles defined by two points and an arc center. If set to\nFalse (default), the arc will always go counterclockwise from the point on line1 until\nthe point on line2 is reached. If set to True, the angle will go clockwise from line1 to line2\\.\n* **dot** (*bool*) – Allows for a `Dot` in the arc. Mainly used as an convention to indicate a right angle.\nThe dot can be customized in the next three parameters.\n* **dot\\_radius** (*float* *\\|* *None*) – The radius of the `Dot`. If not specified otherwise, this radius will be 1/10 of the arc radius.\n* **dot\\_distance** (*float*) – Relative distance from the center to the arc: 0 puts the dot in the center and 1 on the arc itself.\n* **dot\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the `Dot`.\n* **elbow** (*bool*) – Produces an elbow\\-type mobject indicating a right angle, see [`RightAngle`](manim.mobject.geometry.line.RightAngle.html#manim.mobject.geometry.line.RightAngle \"manim.mobject.geometry.line.RightAngle\") for more information\nand a shorthand.\n* **\\*\\*kwargs** (*Any*) – Further keyword arguments that are passed to the constructor of `Arc` or [`Elbow`](manim.mobject.geometry.line.Elbow.html#manim.mobject.geometry.line.Elbow \"manim.mobject.geometry.line.Elbow\").\nExamples\nThe first example shows some right angles with a dot in the middle while the second example shows\nall 8 possible angles defined by two lines.\nExample: RightArcAngleExample [¶](#rightarcangleexample)\n![../_images/RightArcAngleExample-1.png](../_images/RightArcAngleExample-1.png)\n```\nfrom manim import *\nclass RightArcAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightarcangles = [\n            Angle(line1, line2, dot=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), dot=True, other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, dot=True, dot_color=YELLOW, dot_radius=0.04, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, dot=True, dot_color=GREEN, dot_radius=0.08),\n        ]\n        plots = VGroup()\n        for angle in rightarcangles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```\n```\nclass RightArcAngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT, RIGHT )\n        line2 = Line( DOWN, UP )\n        rightarcangles = [\n            Angle(line1, line2, dot=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), dot=True, other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, dot=True, dot_color=YELLOW, dot_radius=0.04, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, dot=True, dot_color=GREEN, dot_radius=0.08),\n        ]\n        plots = VGroup()\n        for angle in rightarcangles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(plot)\n        plots.arrange(buff=1.5)\n        self.add(plots)\n```\nExample: AngleExample [¶](#angleexample)\n![../_images/AngleExample-1.png](../_images/AngleExample-1.png)\n```\nfrom manim import *\nclass AngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT + (1/3) * UP, RIGHT + (1/3) * DOWN )\n        line2 = Line( DOWN + (1/3) * RIGHT, UP + (1/3) * LEFT )\n        angles = [\n            Angle(line1, line2),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED),\n            Angle(line1, line2, other_angle=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1)),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, other_angle=True),\n        ]\n        plots = VGroup()\n        for angle in angles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(VGroup(plot,SurroundingRectangle(plot, buff=0.3)))\n        plots.arrange_in_grid(rows=2,buff=1)\n        self.add(plots)\n```\n```\nclass AngleExample(Scene):\n    def construct(self):\n        line1 = Line( LEFT + (1/3) * UP, RIGHT + (1/3) * DOWN )\n        line2 = Line( DOWN + (1/3) * RIGHT, UP + (1/3) * LEFT )\n        angles = [\n            Angle(line1, line2),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1), other_angle=True),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8, other_angle=True),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED),\n            Angle(line1, line2, other_angle=True),\n            Angle(line1, line2, radius=0.4, quadrant=(1,-1)),\n            Angle(line1, line2, radius=0.5, quadrant=(-1,1), stroke_width=8),\n            Angle(line1, line2, radius=0.7, quadrant=(-1,-1), color=RED, other_angle=True),\n        ]\n        plots = VGroup()\n        for angle in angles:\n            plot=VGroup(line1.copy(),line2.copy(), angle)\n            plots.add(VGroup(plot,SurroundingRectangle(plot, buff=0.3)))\n        plots.arrange_in_grid(rows=2,buff=1)\n        self.add(plots)\n```\nExample: FilledAngle [¶](#filledangle)\n![../_images/FilledAngle-1.png](../_images/FilledAngle-1.png)\n```\nfrom manim import *\nclass FilledAngle(Scene):\n    def construct(self):\n        l1 = Line(ORIGIN, 2 * UP + RIGHT).set_color(GREEN)\n        l2 = (\n            Line(ORIGIN, 2 * UP + RIGHT)\n            .set_color(GREEN)\n            .rotate(-20 * DEGREES, about_point=ORIGIN)\n        )\n        norm = l1.get_length()\n        a1 = Angle(l1, l2, other_angle=True, radius=norm - 0.5).set_color(GREEN)\n        a2 = Angle(l1, l2, other_angle=True, radius=norm).set_color(GREEN)\n        q1 = a1.points #  save all coordinates of points of angle a1\n        q2 = a2.reverse_direction().points  #  save all coordinates of points of angle a1 (in reversed direction)\n        pnts = np.concatenate([q1, q2, q1[0].reshape(1, 3)])  # adds points and ensures that path starts and ends at same point\n        mfill = VMobject().set_color(ORANGE)\n        mfill.set_points_as_corners(pnts).set_fill(GREEN, opacity=1)\n        self.add(l1, l2)\n        self.add(mfill)\n```\n```\nclass FilledAngle(Scene):\n    def construct(self):\n        l1 = Line(ORIGIN, 2 * UP + RIGHT).set_color(GREEN)\n        l2 = (\n            Line(ORIGIN, 2 * UP + RIGHT)\n            .set_color(GREEN)\n            .rotate(-20 * DEGREES, about_point=ORIGIN)\n        )\n        norm = l1.get_length()\n        a1 = Angle(l1, l2, other_angle=True, radius=norm - 0.5).set_color(GREEN)\n        a2 = Angle(l1, l2, other_angle=True, radius=norm).set_color(GREEN)\n        q1 = a1.points #  save all coordinates of points of angle a1\n        q2 = a2.reverse_direction().points  #  save all coordinates of points of angle a1 (in reversed direction)\n        pnts = np.concatenate([q1, q2, q1[0].reshape(1, 3)])  # adds points and ensures that path starts and ends at same point\n        mfill = VMobject().set_color(ORANGE)\n        mfill.set_points_as_corners(pnts).set_fill(GREEN, opacity=1)\n        self.add(l1, l2)\n        self.add(mfill)\n```\nMethods\n| [`from_three_points`](#manim.mobject.geometry.line.Angle.from_three_points \"manim.mobject.geometry.line.Angle.from_three_points\") | The angle between the lines AB and BC. |\n| --- | --- |\n| [`get_lines`](#manim.mobject.geometry.line.Angle.get_lines \"manim.mobject.geometry.line.Angle.get_lines\") | Get the lines forming an angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class. |\n| [`get_value`](#manim.mobject.geometry.line.Angle.get_value \"manim.mobject.geometry.line.Angle.get_value\") | Get the value of an angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*line1*, *line2*, *radius\\=None*, *quadrant\\=(1, 1\\)*, *other\\_angle\\=False*, *dot\\=False*, *dot\\_radius\\=None*, *dot\\_distance\\=0\\.55*, *dot\\_color\\=ManimColor('\\#FFFFFF')*, *elbow\\=False*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.line.Angle._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **line1** ([*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\"))\n* **line2** ([*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\"))\n* **radius** (*float* *\\|* *None*)\n* **quadrant** ([*AngleQuadrant*](manim.mobject.geometry.line.html#manim.mobject.geometry.line.AngleQuadrant \"manim.mobject.geometry.line.AngleQuadrant\"))\n* **other\\_angle** (*bool*)\n* **dot** (*bool*)\n* **dot\\_radius** (*float* *\\|* *None*)\n* **dot\\_distance** (*float*)\n* **dot\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **elbow** (*bool*)\n* **kwargs** (*Any*)\nReturn type:\nNone\n*static* from\\_three\\_points(*A*, *B*, *C*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Angle.from_three_points)[¶](#manim.mobject.geometry.line.Angle.from_three_points \"Link to this definition\")\nThe angle between the lines AB and BC.\nThis constructs the angle \\\\(\\\\\\\\angle ABC\\\\).\nParameters:\n* **A** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The endpoint of the first angle leg\n* **B** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The vertex of the angle\n* **C** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The endpoint of the second angle leg\n* **\\*\\*kwargs** (*Any*) – Further keyword arguments are passed to [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\")\nReturns:\nAngle(line1, line2, radius\\=0\\.5, quadrant\\=(\\-1,1\\), stroke\\_width\\=8\\),\nAngle(line1, line2, radius\\=0\\.7, quadrant\\=(\\-1,\\-1\\), color\\=RED, other\\_angle\\=True),\nReturn type:\nThe Angle calculated from the three points\nExamples\nExample: AngleFromThreePointsExample [¶](#anglefromthreepointsexample)\n![../_images/AngleFromThreePointsExample-1.png](../_images/AngleFromThreePointsExample-1.png)\n```\nfrom manim import *\nclass AngleFromThreePointsExample(Scene):\n    def construct(self):\n        sample_angle = Angle.from_three_points(UP, ORIGIN, LEFT)\n        red_angle = Angle.from_three_points(LEFT + UP, ORIGIN, RIGHT, radius=.8, quadrant=(-1,-1), color=RED, stroke_width=8, other_angle=True)\n        self.add(red_angle, sample_angle)\n```\n```\nclass AngleFromThreePointsExample(Scene):\n    def construct(self):\n        sample_angle = Angle.from_three_points(UP, ORIGIN, LEFT)\n        red_angle = Angle.from_three_points(LEFT + UP, ORIGIN, RIGHT, radius=.8, quadrant=(-1,-1), color=RED, stroke_width=8, other_angle=True)\n        self.add(red_angle, sample_angle)\n```\nget\\_lines()[\\[source]](../_modules/manim/mobject/geometry/line.html#Angle.get_lines)[¶](#manim.mobject.geometry.line.Angle.get_lines \"Link to this definition\")\nGet the lines forming an angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class.\nReturns:\nA [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing the lines that form the angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\n```\n>>> line_1, line_2 = Line(ORIGIN, RIGHT), Line(ORIGIN, UR)\n>>> angle = Angle(line_1, line_2)\n>>> angle.get_lines()\nVGroup(Line, Line)\n```\nget\\_value(*degrees\\=False*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Angle.get_value)[¶](#manim.mobject.geometry.line.Angle.get_value \"Link to this definition\")\nGet the value of an angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class.\nParameters:\n**degrees** (*bool*) – A boolean to decide the unit (deg/rad) in which the value of the angle is returned.\nReturns:\nThe value in degrees/radians of an angle of the [`Angle`](#manim.mobject.geometry.line.Angle \"manim.mobject.geometry.line.Angle\") class.\nReturn type:\n`float`\nExamples\nExample: GetValueExample [¶](#getvalueexample)\n![../_images/GetValueExample-1.png](../_images/GetValueExample-1.png)\n```\nfrom manim import *\nclass GetValueExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT+(1/3)*UP, RIGHT+(1/3)*DOWN)\n        line2 = Line(DOWN+(1/3)*RIGHT, UP+(1/3)*LEFT)\n        angle = Angle(line1, line2, radius=0.4)\n        value = DecimalNumber(angle.get_value(degrees=True), unit=r\"^{\\circ}\")\n        value.next_to(angle, UR)\n        self.add(line1, line2, angle, value)\n```\n```\nclass GetValueExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT+(1/3)*UP, RIGHT+(1/3)*DOWN)\n        line2 = Line(DOWN+(1/3)*RIGHT, UP+(1/3)*LEFT)\n        angle = Angle(line1, line2, radius=0.4)\n        value = DecimalNumber(angle.get_value(degrees=True), unit=r\"^{\\circ}\")\n        value.next_to(angle, UR)\n        self.add(line1, line2, angle, value)\n```",
  "scraped_at": "2025-06-24T17:50:01.275584",
  "content_length": 15642,
  "domain": "docs.manim.community",
  "word_count": 1389,
  "inspection_status": "pending",
  "filename": "Angle - Manim Community v0.19.0_20250624_175001.json",
  "saved_at": "2025-06-24T17:50:01.275675"
}