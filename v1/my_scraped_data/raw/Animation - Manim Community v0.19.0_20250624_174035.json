{
  "doc_id": "a75d5fc91d348c360558c6ab94efc02f",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.animation.Animation.html",
  "title": "Animation - Manim Community v0.19.0",
  "content": "Animation[¶](#animation \"Link to this heading\")\n===============================================\nQualified name: `manim.animation.animation.Animation`\n*class* Animation(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/animation.html#Animation)[¶](#manim.animation.animation.Animation \"Link to this definition\")\nBases: `object`\nAn animation.\nAnimations have a fixed time span.\nParameters:\n* **mobject** – The mobject to be animated. This is not required for all types of animations.\n* **lag\\_ratio** – Defines the delay after which the animation is applied to submobjects. This lag\nis relative to the duration of the animation.\nThis does not influence the total\nruntime of the animation. Instead the runtime of individual animations is\nadjusted so that the complete animation has the defined run time.\n* **run\\_time** – The duration of the animation in seconds.\n* **rate\\_func** – The function defining the animation progress based on the relative runtime (see [`rate_functions`](manim.utils.rate_functions.html#module-manim.utils.rate_functions \"manim.utils.rate_functions\")) .\nFor example `rate_func(0.5)` is the proportion of the animation that is done\nafter half of the animations run time.\n* **reverse\\_rate\\_function** – Reverses the rate function of the animation. Setting `reverse_rate_function`\ndoes not have any effect on `remover` or `introducer`. These need to be\nset explicitly if an introducer\\-animation should be turned into a remover one\nand vice versa.\n* **name** – The name of the animation. This gets displayed while rendering the animation.\nDefaults to \\<class\\-name\\>(\\<Mobject\\-name\\>).\n* **remover** – Whether the given mobject should be removed from the scene after this animation.\n* **suspend\\_mobject\\_updating** – Whether updaters of the mobject should be suspended during the animation.\nReturn type:\nSelf\nNote\nIn the current implementation of this class, the specified rate function is applied\nwithin [`Animation.interpolate_mobject()`](#manim.animation.animation.Animation.interpolate_mobject \"manim.animation.animation.Animation.interpolate_mobject\") call as part of the call to\n`Animation.interpolate_submobject()`. For subclasses of [`Animation`](#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nthat are implemented by overriding [`interpolate_mobject()`](#manim.animation.animation.Animation.interpolate_mobject \"manim.animation.animation.Animation.interpolate_mobject\"), the rate function\nhas to be applied manually (e.g., by passing `self.rate_func(alpha)` instead\nof just `alpha`).\nExamples\nExample: LagRatios [¶](#lagratios)\n```\nfrom manim import *\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))\n```\n```\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))\n```\nMethods\n| [`begin`](#manim.animation.animation.Animation.begin \"manim.animation.animation.Animation.begin\") | Begin the animation. |\n| --- | --- |\n| [`clean_up_from_scene`](#manim.animation.animation.Animation.clean_up_from_scene \"manim.animation.animation.Animation.clean_up_from_scene\") | Clean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation. |\n| [`copy`](#manim.animation.animation.Animation.copy \"manim.animation.animation.Animation.copy\") | Create a copy of the animation. |\n| `create_starting_mobject` |  |\n| [`finish`](#manim.animation.animation.Animation.finish \"manim.animation.animation.Animation.finish\") | Finish the animation. |\n| `get_all_families_zipped` |  |\n| [`get_all_mobjects`](#manim.animation.animation.Animation.get_all_mobjects \"manim.animation.animation.Animation.get_all_mobjects\") | Get all mobjects involved in the animation. |\n| [`get_all_mobjects_to_update`](#manim.animation.animation.Animation.get_all_mobjects_to_update \"manim.animation.animation.Animation.get_all_mobjects_to_update\") | Get all mobjects to be updated during the animation. |\n| [`get_rate_func`](#manim.animation.animation.Animation.get_rate_func \"manim.animation.animation.Animation.get_rate_func\") | Get the rate function of the animation. |\n| [`get_run_time`](#manim.animation.animation.Animation.get_run_time \"manim.animation.animation.Animation.get_run_time\") | Get the run time of the animation. |\n| [`get_sub_alpha`](#manim.animation.animation.Animation.get_sub_alpha \"manim.animation.animation.Animation.get_sub_alpha\") | Get the animation progress of any submobjects subanimation. |\n| [`interpolate`](#manim.animation.animation.Animation.interpolate \"manim.animation.animation.Animation.interpolate\") | Set the animation progress. |\n| [`interpolate_mobject`](#manim.animation.animation.Animation.interpolate_mobject \"manim.animation.animation.Animation.interpolate_mobject\") | Interpolates the mobject of the [`Animation`](#manim.animation.animation.Animation \"manim.animation.animation.Animation\") based on alpha value. |\n| `interpolate_submobject` |  |\n| [`is_introducer`](#manim.animation.animation.Animation.is_introducer \"manim.animation.animation.Animation.is_introducer\") | Test if the animation is an introducer. |\n| [`is_remover`](#manim.animation.animation.Animation.is_remover \"manim.animation.animation.Animation.is_remover\") | Test if the animation is a remover. |\n| [`set_default`](#manim.animation.animation.Animation.set_default \"manim.animation.animation.Animation.set_default\") | Sets the default values of keyword arguments. |\n| [`set_name`](#manim.animation.animation.Animation.set_name \"manim.animation.animation.Animation.set_name\") | Set the name of the animation. |\n| [`set_rate_func`](#manim.animation.animation.Animation.set_rate_func \"manim.animation.animation.Animation.set_rate_func\") | Set the rate function of the animation. |\n| [`set_run_time`](#manim.animation.animation.Animation.set_run_time \"manim.animation.animation.Animation.set_run_time\") | Set the run time of the animation. |\n| [`update_mobjects`](#manim.animation.animation.Animation.update_mobjects \"manim.animation.animation.Animation.update_mobjects\") | Updates things like starting\\_mobject, and (for Transforms) target\\_mobject. |\nAttributes\n| `run_time` |  |\n| --- | --- |\n\\_original\\_\\_init\\_\\_(*mobject*, *lag\\_ratio\\=0\\.0*, *run\\_time\\=1\\.0*, *rate\\_func\\=\\<function smooth\\>*, *reverse\\_rate\\_function\\=False*, *name\\=None*, *remover\\=False*, *suspend\\_mobject\\_updating\\=True*, *introducer\\=False*, *\\**, *\\_on\\_finish\\=\\<function Animation.\\<lambda\\>\\>*, *use\\_override\\=True*)[¶](#manim.animation.animation.Animation._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*)\n* **lag\\_ratio** (*float*)\n* **run\\_time** (*float*)\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*)\n* **reverse\\_rate\\_function** (*bool*)\n* **name** (*str*)\n* **remover** (*bool*)\n* **suspend\\_mobject\\_updating** (*bool*)\n* **introducer** (*bool*)\n* **\\_on\\_finish** (*Callable**\\[**\\[**]**,* *None**]*)\n* **use\\_override** (*bool*)\nReturn type:\nNone\n\\_setup\\_scene(*scene*)[\\[source]](../_modules/manim/animation/animation.html#Animation._setup_scene)[¶](#manim.animation.animation.Animation._setup_scene \"Link to this definition\")\nSetup up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") before starting the animation.\nThis includes to [`add()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.add \"manim.scene.scene.Scene.add\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is an introducer.\nParameters:\n**scene** ([*Scene*](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\")) – The scene the animation should be cleaned up from.\nReturn type:\nNone\nbegin()[\\[source]](../_modules/manim/animation/animation.html#Animation.begin)[¶](#manim.animation.animation.Animation.begin \"Link to this definition\")\nBegin the animation.\nThis method is called right as an animation is being played. As much\ninitialization as possible, especially any mobject copying, should live in this\nmethod.\nReturn type:\nNone\nclean\\_up\\_from\\_scene(*scene*)[\\[source]](../_modules/manim/animation/animation.html#Animation.clean_up_from_scene)[¶](#manim.animation.animation.Animation.clean_up_from_scene \"Link to this definition\")\nClean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation.\nThis includes to [`remove()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is a remover.\nParameters:\n**scene** ([*Scene*](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\")) – The scene the animation should be cleaned up from.\nReturn type:\nNone\ncopy()[\\[source]](../_modules/manim/animation/animation.html#Animation.copy)[¶](#manim.animation.animation.Animation.copy \"Link to this definition\")\nCreate a copy of the animation.\nReturns:\nA copy of `self`\nReturn type:\n[Animation](#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nfinish()[\\[source]](../_modules/manim/animation/animation.html#Animation.finish)[¶](#manim.animation.animation.Animation.finish \"Link to this definition\")\nFinish the animation.\nThis method gets called when the animation is over.\nReturn type:\nNone\nget\\_all\\_mobjects()[\\[source]](../_modules/manim/animation/animation.html#Animation.get_all_mobjects)[¶](#manim.animation.animation.Animation.get_all_mobjects \"Link to this definition\")\nGet all mobjects involved in the animation.\nOrdering must match the ordering of arguments to interpolate\\_submobject\nReturns:\nThe sequence of mobjects.\nReturn type:\nSequence\\[[Mobject](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nget\\_all\\_mobjects\\_to\\_update()[\\[source]](../_modules/manim/animation/animation.html#Animation.get_all_mobjects_to_update)[¶](#manim.animation.animation.Animation.get_all_mobjects_to_update \"Link to this definition\")\nGet all mobjects to be updated during the animation.\nReturns:\nThe list of mobjects to be updated during the animation.\nReturn type:\nList\\[[Mobject](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nget\\_rate\\_func()[\\[source]](../_modules/manim/animation/animation.html#Animation.get_rate_func)[¶](#manim.animation.animation.Animation.get_rate_func \"Link to this definition\")\nGet the rate function of the animation.\nReturns:\nThe rate function of the animation.\nReturn type:\nCallable\\[\\[float], float]\nget\\_run\\_time()[\\[source]](../_modules/manim/animation/animation.html#Animation.get_run_time)[¶](#manim.animation.animation.Animation.get_run_time \"Link to this definition\")\nGet the run time of the animation.\nReturns:\nThe time the animation takes in seconds.\nReturn type:\nfloat\nget\\_sub\\_alpha(*alpha*, *index*, *num\\_submobjects*)[\\[source]](../_modules/manim/animation/animation.html#Animation.get_sub_alpha)[¶](#manim.animation.animation.Animation.get_sub_alpha \"Link to this definition\")\nGet the animation progress of any submobjects subanimation.\nParameters:\n* **alpha** (*float*) – The overall animation progress\n* **index** (*int*) – The index of the subanimation.\n* **num\\_submobjects** (*int*) – The total count of subanimations.\nReturns:\nThe progress of the subanimation.\nReturn type:\nfloat\ninterpolate(*alpha*)[\\[source]](../_modules/manim/animation/animation.html#Animation.interpolate)[¶](#manim.animation.animation.Animation.interpolate \"Link to this definition\")\nSet the animation progress.\nThis method gets called for every frame during an animation.\nParameters:\n**alpha** (*float*) – The relative time to set the animation to, 0 meaning the start, 1 meaning\nthe end.\nReturn type:\nNone\ninterpolate\\_mobject(*alpha*)[\\[source]](../_modules/manim/animation/animation.html#Animation.interpolate_mobject)[¶](#manim.animation.animation.Animation.interpolate_mobject \"Link to this definition\")\nInterpolates the mobject of the [`Animation`](#manim.animation.animation.Animation \"manim.animation.animation.Animation\") based on alpha value.\nParameters:\n**alpha** (*float*) – A float between 0 and 1 expressing the ratio to which the animation\nis completed. For example, alpha\\-values of 0, 0\\.5, and 1 correspond\nto the animation being completed 0%, 50%, and 100%, respectively.\nReturn type:\nNone\nis\\_introducer()[\\[source]](../_modules/manim/animation/animation.html#Animation.is_introducer)[¶](#manim.animation.animation.Animation.is_introducer \"Link to this definition\")\nTest if the animation is an introducer.\nReturns:\n`True` if the animation is an introducer, `False` otherwise.\nReturn type:\nbool\nis\\_remover()[\\[source]](../_modules/manim/animation/animation.html#Animation.is_remover)[¶](#manim.animation.animation.Animation.is_remover \"Link to this definition\")\nTest if the animation is a remover.\nReturns:\n`True` if the animation is a remover, `False` otherwise.\nReturn type:\nbool\n*classmethod* set\\_default(*\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/animation.html#Animation.set_default)[¶](#manim.animation.animation.Animation.set_default \"Link to this definition\")\nSets the default values of keyword arguments.\nIf this method is called without any additional keyword\narguments, the original default values of the initialization\nmethod of this class are restored.\nParameters:\n**kwargs** – Passing any keyword argument will update the default\nvalues of the keyword arguments of the initialization\nfunction of this class.\nReturn type:\nNone\nExamples\nExample: ChangeDefaultAnimation [¶](#changedefaultanimation)\n```\nfrom manim import *\nclass ChangeDefaultAnimation(Scene):\n    def construct(self):\n        Rotate.set_default(run_time=2, rate_func=rate_functions.linear)\n        Indicate.set_default(color=None)\n        S = Square(color=BLUE, fill_color=BLUE, fill_opacity=0.25)\n        self.add(S)\n        self.play(Rotate(S, PI))\n        self.play(Indicate(S))\n        Rotate.set_default()\n        Indicate.set_default()\n```\n```\nclass ChangeDefaultAnimation(Scene):\n    def construct(self):\n        Rotate.set_default(run_time=2, rate_func=rate_functions.linear)\n        Indicate.set_default(color=None)\n        S = Square(color=BLUE, fill_color=BLUE, fill_opacity=0.25)\n        self.add(S)\n        self.play(Rotate(S, PI))\n        self.play(Indicate(S))\n        Rotate.set_default()\n        Indicate.set_default()\n```\nset\\_name(*name*)[\\[source]](../_modules/manim/animation/animation.html#Animation.set_name)[¶](#manim.animation.animation.Animation.set_name \"Link to this definition\")\nSet the name of the animation.\nParameters:\n**name** (*str*) – The new name of the animation.\nReturns:\n`self`\nReturn type:\n[Animation](#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nset\\_rate\\_func(*rate\\_func*)[\\[source]](../_modules/manim/animation/animation.html#Animation.set_rate_func)[¶](#manim.animation.animation.Animation.set_rate_func \"Link to this definition\")\nSet the rate function of the animation.\nParameters:\n**rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*) – The new function defining the animation progress based on the\nrelative runtime (see [`rate_functions`](manim.utils.rate_functions.html#module-manim.utils.rate_functions \"manim.utils.rate_functions\")).\nReturns:\n`self`\nReturn type:\n[Animation](#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nset\\_run\\_time(*run\\_time*)[\\[source]](../_modules/manim/animation/animation.html#Animation.set_run_time)[¶](#manim.animation.animation.Animation.set_run_time \"Link to this definition\")\nSet the run time of the animation.\nParameters:\n* **run\\_time** (*float*) – The new time the animation should take in seconds.\n* **note::** (*..*) – The run\\_time of an animation should not be changed while it is already\nrunning.\nReturns:\n`self`\nReturn type:\n[Animation](#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nupdate\\_mobjects(*dt*)[\\[source]](../_modules/manim/animation/animation.html#Animation.update_mobjects)[¶](#manim.animation.animation.Animation.update_mobjects \"Link to this definition\")\nUpdates things like starting\\_mobject, and (for\nTransforms) target\\_mobject. Note, since typically\n(always?) self.mobject will have its updating\nsuspended during the animation, this will do\nnothing to self.mobject.\nParameters:\n**dt** (*float*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:40:35.505351",
  "content_length": 18394,
  "domain": "docs.manim.community",
  "word_count": 1505,
  "inspection_status": "pending",
  "filename": "Animation - Manim Community v0.19.0_20250624_174035.json",
  "saved_at": "2025-06-24T17:40:35.505445"
}