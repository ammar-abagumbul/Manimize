{
  "doc_id": "52f53cd6d1f11f4d166c86307ef0cde0",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.arc.ArcPolygon.html",
  "title": "ArcPolygon - Manim Community v0.19.0",
  "content": "ArcPolygon[¶](#arcpolygon \"Link to this heading\")\n=================================================\nQualified name: `manim.mobject.geometry.arc.ArcPolygon`\n*class* ArcPolygon(*\\*vertices*, *angle\\=0\\.7853981633974483*, *radius\\=None*, *arc\\_config\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/arc.html#ArcPolygon)[¶](#manim.mobject.geometry.arc.ArcPolygon \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA generalized polygon allowing for points to be connected with arcs.\nThis version tries to stick close to the way `Polygon` is used. Points\ncan be passed to it directly which are used to generate the according arcs\n(using [`ArcBetweenPoints`](manim.mobject.geometry.arc.ArcBetweenPoints.html#manim.mobject.geometry.arc.ArcBetweenPoints \"manim.mobject.geometry.arc.ArcBetweenPoints\")). An angle or radius can be passed to it to\nuse across all arcs, but to configure arcs individually an `arc_config` list\nhas to be passed with the syntax explained below.\nParameters:\n* **vertices** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – A list of vertices, start and end points for the arc segments.\n* **angle** (*float*) – The angle used for constructing the arcs. If no other parameters\nare set, this angle is used to construct all arcs.\n* **radius** (*float* *\\|* *None*) – The circle radius used to construct the arcs. If specified,\noverrides the specified `angle`.\n* **arc\\_config** (*list**\\[**dict**]* *\\|* *None*) – When passing a `dict`, its content will be passed as keyword\narguments to [`ArcBetweenPoints`](manim.mobject.geometry.arc.ArcBetweenPoints.html#manim.mobject.geometry.arc.ArcBetweenPoints \"manim.mobject.geometry.arc.ArcBetweenPoints\"). Otherwise, a list\nof dictionaries containing values that are passed as keyword\narguments for every individual arc can be passed.\n* **kwargs** (*Any*) – Further keyword arguments that are passed to the constructor of\n[`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\").\narcs[¶](#manim.mobject.geometry.arc.ArcPolygon.arcs \"Link to this definition\")\nThe arcs created from the input parameters:\n```\n>>> from manim import ArcPolygon\n>>> ap = ArcPolygon([0, 0, 0], [2, 0, 0], [0, 2, 0])\n>>> ap.arcs\n[ArcBetweenPoints, ArcBetweenPoints, ArcBetweenPoints]\n```\nType:\n`list`\nTip\nTwo instances of [`ArcPolygon`](#manim.mobject.geometry.arc.ArcPolygon \"manim.mobject.geometry.arc.ArcPolygon\") can be transformed properly into one\nanother as well. Be advised that any arc initialized with `angle=0`\nwill actually be a straight line, so if a straight section should seamlessly\ntransform into an arced section or vice versa, initialize the straight section\nwith a negligible angle instead (such as `angle=0.0001`).\nNote\nThere is an alternative version ([`ArcPolygonFromArcs`](manim.mobject.geometry.arc.ArcPolygonFromArcs.html#manim.mobject.geometry.arc.ArcPolygonFromArcs \"manim.mobject.geometry.arc.ArcPolygonFromArcs\")) that is instantiated\nwith pre\\-defined arcs.\nSee also\n[`ArcPolygonFromArcs`](manim.mobject.geometry.arc.ArcPolygonFromArcs.html#manim.mobject.geometry.arc.ArcPolygonFromArcs \"manim.mobject.geometry.arc.ArcPolygonFromArcs\")\nExamples\nExample: SeveralArcPolygons [¶](#severalarcpolygons)\n```\nfrom manim import *\nclass SeveralArcPolygons(Scene):\n    def construct(self):\n        a = [0, 0, 0]\n        b = [2, 0, 0]\n        c = [0, 2, 0]\n        ap1 = ArcPolygon(a, b, c, radius=2)\n        ap2 = ArcPolygon(a, b, c, angle=45*DEGREES)\n        ap3 = ArcPolygon(a, b, c, arc_config={'radius': 1.7, 'color': RED})\n        ap4 = ArcPolygon(a, b, c, color=RED, fill_opacity=1,\n                                    arc_config=[{'radius': 1.7, 'color': RED},\n                                    {'angle': 20*DEGREES, 'color': BLUE},\n                                    {'radius': 1}])\n        ap_group = VGroup(ap1, ap2, ap3, ap4).arrange()\n        self.play(*[Create(ap) for ap in [ap1, ap2, ap3, ap4]])\n        self.wait()\n```\n```\nclass SeveralArcPolygons(Scene):\n    def construct(self):\n        a = [0, 0, 0]\n        b = [2, 0, 0]\n        c = [0, 2, 0]\n        ap1 = ArcPolygon(a, b, c, radius=2)\n        ap2 = ArcPolygon(a, b, c, angle=45*DEGREES)\n        ap3 = ArcPolygon(a, b, c, arc_config={'radius': 1.7, 'color': RED})\n        ap4 = ArcPolygon(a, b, c, color=RED, fill_opacity=1,\n                                    arc_config=[{'radius': 1.7, 'color': RED},\n                                    {'angle': 20*DEGREES, 'color': BLUE},\n                                    {'radius': 1}])\n        ap_group = VGroup(ap1, ap2, ap3, ap4).arrange()\n        self.play(*[Create(ap) for ap in [ap1, ap2, ap3, ap4]])\n        self.wait()\n```\nFor further examples see [`ArcPolygonFromArcs`](manim.mobject.geometry.arc.ArcPolygonFromArcs.html#manim.mobject.geometry.arc.ArcPolygonFromArcs \"manim.mobject.geometry.arc.ArcPolygonFromArcs\").\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*vertices*, *angle\\=0\\.7853981633974483*, *radius\\=None*, *arc\\_config\\=None*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.arc.ArcPolygon._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertices** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **angle** (*float*)\n* **radius** (*float* *\\|* *None*)\n* **arc\\_config** (*list**\\[**dict**]* *\\|* *None*)\n* **kwargs** (*Any*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:49:04.433775",
  "content_length": 6079,
  "domain": "docs.manim.community",
  "word_count": 612,
  "inspection_status": "pending",
  "filename": "ArcPolygon - Manim Community v0.19.0_20250624_174904.json",
  "saved_at": "2025-06-24T17:49:04.433845"
}