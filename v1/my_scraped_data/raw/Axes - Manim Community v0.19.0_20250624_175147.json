{
  "doc_id": "fdb88eb27eb3bd45680d4c118fb90e64",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.coordinate_systems.Axes.html",
  "title": "Axes - Manim Community v0.19.0",
  "content": "Axes[¶](#axes \"Link to this heading\")\n=====================================\nQualified name: `manim.mobject.graphing.coordinate\\_systems.Axes`\n*class* Axes(*x\\_range\\=None*, *y\\_range\\=None*, *x\\_length\\=12*, *y\\_length\\=6*, *axis\\_config\\=None*, *x\\_axis\\_config\\=None*, *y\\_axis\\_config\\=None*, *tips\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes)[¶](#manim.mobject.graphing.coordinate_systems.Axes \"Link to this definition\")\nBases: [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\"), [`CoordinateSystem`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem \"manim.mobject.graphing.coordinate_systems.CoordinateSystem\")\nCreates a set of axes.\nParameters:\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The `(x_min, x_max, x_step)` values of the x\\-axis.\n* **y\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The `(y_min, y_max, y_step)` values of the y\\-axis.\n* **x\\_length** (*float* *\\|* *None*) – The length of the x\\-axis.\n* **y\\_length** (*float* *\\|* *None*) – The length of the y\\-axis.\n* **axis\\_config** (*dict* *\\|* *None*) – Arguments to be passed to [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\") that influences both axes.\n* **x\\_axis\\_config** (*dict* *\\|* *None*) – Arguments to be passed to [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\") that influence the x\\-axis.\n* **y\\_axis\\_config** (*dict* *\\|* *None*) – Arguments to be passed to [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\") that influence the y\\-axis.\n* **tips** (*bool*) – Whether or not to include the tips on both axes.\n* **kwargs** (*Any*) – Additional arguments to be passed to [`CoordinateSystem`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem \"manim.mobject.graphing.coordinate_systems.CoordinateSystem\") and [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nExamples\nExample: LogScalingExample [¶](#logscalingexample)\n![../_images/LogScalingExample-1.png](../_images/LogScalingExample-1.png)\n```\nfrom manim import *\nclass LogScalingExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10, 1],\n            y_range=[-2, 6, 1],\n            tips=False,\n            axis_config={\"include_numbers\": True},\n            y_axis_config={\"scaling\": LogBase(custom_labels=True)},\n        )\n        # x_min must be > 0 because log is undefined at 0.\n        graph = ax.plot(lambda x: x ** 2, x_range=[0.001, 10], use_smoothing=False)\n        self.add(ax, graph)\n```\n```\nclass LogScalingExample(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10, 1],\n            y_range=[-2, 6, 1],\n            tips=False,\n            axis_config={\"include_numbers\": True},\n            y_axis_config={\"scaling\": LogBase(custom_labels=True)},\n        )\n        # x_min must be > 0 because log is undefined at 0.\n        graph = ax.plot(lambda x: x ** 2, x_range=[0.001, 10], use_smoothing=False)\n        self.add(ax, graph)\n```\nStyling arguments can be passed to the underlying [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\")\nmobjects that represent the axes:\nExample: AxesWithDifferentTips [¶](#axeswithdifferenttips)\n![../_images/AxesWithDifferentTips-1.png](../_images/AxesWithDifferentTips-1.png)\n```\nfrom manim import *\nclass AxesWithDifferentTips(Scene):\n    def construct(self):\n        ax = Axes(axis_config={'tip_shape': StealthTip})\n        self.add(ax)\n```\n```\nclass AxesWithDifferentTips(Scene):\n    def construct(self):\n        ax = Axes(axis_config={'tip_shape': StealthTip})\n        self.add(ax)\n```\nMethods\n| [`coords_to_point`](#manim.mobject.graphing.coordinate_systems.Axes.coords_to_point \"manim.mobject.graphing.coordinate_systems.Axes.coords_to_point\") | Accepts coordinates from the axes and returns a point with respect to the scene. |\n| --- | --- |\n| [`get_axes`](#manim.mobject.graphing.coordinate_systems.Axes.get_axes \"manim.mobject.graphing.coordinate_systems.Axes.get_axes\") | Gets the axes. |\n| [`get_axis_labels`](#manim.mobject.graphing.coordinate_systems.Axes.get_axis_labels \"manim.mobject.graphing.coordinate_systems.Axes.get_axis_labels\") | Defines labels for the x\\-axis and y\\-axis of the graph. |\n| [`plot_line_graph`](#manim.mobject.graphing.coordinate_systems.Axes.plot_line_graph \"manim.mobject.graphing.coordinate_systems.Axes.plot_line_graph\") | Draws a line graph. |\n| [`point_to_coords`](#manim.mobject.graphing.coordinate_systems.Axes.point_to_coords \"manim.mobject.graphing.coordinate_systems.Axes.point_to_coords\") | Accepts a point from the scene and returns its coordinates with respect to the axes. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_create\\_axis(*range\\_terms*, *axis\\_config*, *length*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes._create_axis)[¶](#manim.mobject.graphing.coordinate_systems.Axes._create_axis \"Link to this definition\")\nCreates an axis and dynamically adjusts its position depending on where 0 is located on the line.\nParameters:\n* **range\\_terms** (*Sequence**\\[**float**]*) – The range of the the axis : `(x_min, x_max, x_step)`.\n* **axis\\_config** (*dict**\\[**str**,* *Any**]*) – Additional parameters that are passed to [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\").\n* **length** (*float*) – The length of the axis.\nReturns:\nReturns a number line based on `range_terms`.\nReturn type:\n`NumberLine`\n*static* \\_origin\\_shift(*axis\\_range*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes._origin_shift)[¶](#manim.mobject.graphing.coordinate_systems.Axes._origin_shift \"Link to this definition\")\nDetermines how to shift graph mobjects to compensate when 0 is not on the axis.\nParameters:\n**axis\\_range** (*Sequence**\\[**float**]*) – The range of the axis : `(x_min, x_max, x_step)`.\nReturn type:\nfloat\n\\_original\\_\\_init\\_\\_(*x\\_range\\=None*, *y\\_range\\=None*, *x\\_length\\=12*, *y\\_length\\=6*, *axis\\_config\\=None*, *x\\_axis\\_config\\=None*, *y\\_axis\\_config\\=None*, *tips\\=True*, *\\*\\*kwargs*)[¶](#manim.mobject.graphing.coordinate_systems.Axes._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **x\\_range** (*Sequence**\\[**float**]* *\\|* *None*)\n* **y\\_range** (*Sequence**\\[**float**]* *\\|* *None*)\n* **x\\_length** (*float* *\\|* *None*)\n* **y\\_length** (*float* *\\|* *None*)\n* **axis\\_config** (*dict* *\\|* *None*)\n* **x\\_axis\\_config** (*dict* *\\|* *None*)\n* **y\\_axis\\_config** (*dict* *\\|* *None*)\n* **tips** (*bool*)\n* **kwargs** (*Any*)\nReturn type:\nNone\n*static* \\_update\\_default\\_configs(*default\\_configs*, *passed\\_configs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes._update_default_configs)[¶](#manim.mobject.graphing.coordinate_systems.Axes._update_default_configs \"Link to this definition\")\nTakes in two tuples of dicts and return modifies the first such that values from\n`passed_configs` overwrite values in `default_configs`. If a key does not exist\nin default\\_configs, it is added to the dict.\nThis method is useful for having defaults in a class and being able to overwrite\nthem with user\\-defined input.\nParameters:\n* **default\\_configs** (*tuple**\\[**dict**\\[**Any**,* *Any**]**]*) – The dict that will be updated.\n* **passed\\_configs** (*tuple**\\[**dict**\\[**Any**,* *Any**]**]*) – The dict that will be used to update.\nReturn type:\nNone\nExamples\nTo create a tuple with one dictionary, add a comma after the element:\n```\nself._update_default_configs(\n    (dict_1,)(\n        dict_2,\n    )\n)\n```\ncoords\\_to\\_point(*\\*coords*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes.coords_to_point)[¶](#manim.mobject.graphing.coordinate_systems.Axes.coords_to_point \"Link to this definition\")\nAccepts coordinates from the axes and returns a point with respect to the scene.\nEquivalent to ax @ (coord1\\)\nParameters:\n**coords** (*float* *\\|* *Sequence**\\[**float**]* *\\|* *Sequence**\\[**Sequence**\\[**float**]**]* *\\|* *ndarray*) – The coordinates. Each coord is passed as a separate argument: `ax.coords_to_point(1, 2, 3)`.\nAlso accepts a list of coordinates\n`ax.coords_to_point( [x_0, x_1, ...], [y_0, y_1, ...], ... )`\n`ax.coords_to_point( [[x_0, y_0, z_0], [x_1, y_1, z_1]] )`\nReturns:\nA point with respect to the scene’s coordinate system.\nThe shape of the array will be similar to the shape of the input.\nReturn type:\nnp.ndarray\nExamples\n```\n>>> from manim import Axes\n>>> import numpy as np\n>>> ax = Axes()\n>>> np.around(ax.coords_to_point(1, 0, 0), 2)\narray([0.86, 0.  , 0.  ])\n>>> np.around(ax @ (1, 0, 0), 2)\narray([0.86, 0.  , 0.  ])\n>>> np.around(ax.coords_to_point([[0, 1], [1, 1], [1, 0]]), 2)\narray([[0.  , 0.75, 0.  ],\n       [0.86, 0.75, 0.  ],\n       [0.86, 0.  , 0.  ]])\n>>> np.around(\n...     ax.coords_to_point([0, 1, 1], [1, 1, 0]), 2\n... )  # Transposed version of the above\narray([[0.  , 0.86, 0.86],\n       [0.75, 0.75, 0.  ],\n       [0.  , 0.  , 0.  ]])\n```\nExample: CoordsToPointExample [¶](#coordstopointexample)\n![../_images/CoordsToPointExample-1.png](../_images/CoordsToPointExample-1.png)\n```\nfrom manim import *\nclass CoordsToPointExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        # a dot with respect to the axes\n        dot_axes = Dot(ax.coords_to_point(2, 2), color=GREEN)\n        lines = ax.get_lines_to_point(ax.c2p(2,2))\n        # a dot with respect to the scene\n        # the default plane corresponds to the coordinates of the scene.\n        plane = NumberPlane()\n        dot_scene = Dot((2,2,0), color=RED)\n        self.add(plane, dot_scene, ax, dot_axes, lines)\n```\n```\nclass CoordsToPointExample(Scene):\n    def construct(self):\n        ax = Axes().add_coordinates()\n        # a dot with respect to the axes\n        dot_axes = Dot(ax.coords_to_point(2, 2), color=GREEN)\n        lines = ax.get_lines_to_point(ax.c2p(2,2))\n        # a dot with respect to the scene\n        # the default plane corresponds to the coordinates of the scene.\n        plane = NumberPlane()\n        dot_scene = Dot((2,2,0), color=RED)\n        self.add(plane, dot_scene, ax, dot_axes, lines)\n```\nget\\_axes()[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes.get_axes)[¶](#manim.mobject.graphing.coordinate_systems.Axes.get_axes \"Link to this definition\")\nGets the axes.\nReturns:\nA pair of axes.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nget\\_axis\\_labels(*x\\_label\\='x'*, *y\\_label\\='y'*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes.get_axis_labels)[¶](#manim.mobject.graphing.coordinate_systems.Axes.get_axis_labels \"Link to this definition\")\nDefines labels for the x\\-axis and y\\-axis of the graph.\nFor increased control over the position of the labels,\nuse [`get_x_axis_label()`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label\") and\n[`get_y_axis_label()`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label\").\nParameters:\n* **x\\_label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label for the x\\_axis. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\n* **y\\_label** (*float* *\\|* *str* *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The label for the y\\_axis. Defaults to [`MathTex`](manim.mobject.text.tex_mobject.MathTex.html#manim.mobject.text.tex_mobject.MathTex \"manim.mobject.text.tex_mobject.MathTex\") for `str` and `float` inputs.\nReturns:\nA [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of the labels for the x\\_axis and y\\_axis.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nSee also\n[`get_x_axis_label()`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_x_axis_label\")\n[`get_y_axis_label()`](manim.mobject.graphing.coordinate_systems.CoordinateSystem.html#manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label \"manim.mobject.graphing.coordinate_systems.CoordinateSystem.get_y_axis_label\")\nExamples\nExample: GetAxisLabelsExample [¶](#getaxislabelsexample)\n![../_images/GetAxisLabelsExample-1.png](../_images/GetAxisLabelsExample-1.png)\n```\nfrom manim import *\nclass GetAxisLabelsExample(Scene):\n    def construct(self):\n        ax = Axes()\n        labels = ax.get_axis_labels(\n            Tex(\"x-axis\").scale(0.7), Text(\"y-axis\").scale(0.45)\n        )\n        self.add(ax, labels)\n```\n```\nclass GetAxisLabelsExample(Scene):\n    def construct(self):\n        ax = Axes()\n        labels = ax.get_axis_labels(\n            Tex(\"x-axis\").scale(0.7), Text(\"y-axis\").scale(0.45)\n        )\n        self.add(ax, labels)\n```\nplot\\_line\\_graph(*x\\_values*, *y\\_values*, *z\\_values\\=None*, *line\\_color\\=ManimColor('\\#FFFF00')*, *add\\_vertex\\_dots\\=True*, *vertex\\_dot\\_radius\\=0\\.08*, *vertex\\_dot\\_style\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes.plot_line_graph)[¶](#manim.mobject.graphing.coordinate_systems.Axes.plot_line_graph \"Link to this definition\")\nDraws a line graph.\nThe graph connects the vertices formed from zipping\n`x_values`, `y_values` and `z_values`. Also adds [`Dots`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\") at the\nvertices if `add_vertex_dots` is set to `True`.\nParameters:\n* **x\\_values** (*Iterable**\\[**float**]*) – Iterable of values along the x\\-axis.\n* **y\\_values** (*Iterable**\\[**float**]*) – Iterable of values along the y\\-axis.\n* **z\\_values** (*Iterable**\\[**float**]* *\\|* *None*) – Iterable of values (zeros if z\\_values is None) along the z\\-axis.\n* **line\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – Color for the line graph.\n* **add\\_vertex\\_dots** (*bool*) – Whether or not to add [`Dot`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\") at each vertex.\n* **vertex\\_dot\\_radius** (*float*) – Radius for the [`Dot`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\") at each vertex.\n* **vertex\\_dot\\_style** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – Style arguments to be passed into [`Dot`](manim.mobject.geometry.arc.Dot.html#manim.mobject.geometry.arc.Dot \"manim.mobject.geometry.arc.Dot\") at each vertex.\n* **kwargs** (*Any*) – Additional arguments to be passed into [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\").\nReturns:\nA VDict containing both the line and dots (if specified). The line can be accessed with: `line_graph[\"line_graph\"]`.\nThe dots can be accessed with: `line_graph[\"vertex_dots\"]`.\nReturn type:\n[`VDict`](manim.mobject.types.vectorized_mobject.VDict.html#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\")\nExamples\nExample: LineGraphExample [¶](#linegraphexample)\n![../_images/LineGraphExample-1.png](../_images/LineGraphExample-1.png)\n```\nfrom manim import *\nclass LineGraphExample(Scene):\n    def construct(self):\n        plane = NumberPlane(\n            x_range = (0, 7),\n            y_range = (0, 5),\n            x_length = 7,\n            axis_config={\"include_numbers\": True},\n        )\n        plane.center()\n        line_graph = plane.plot_line_graph(\n            x_values = [0, 1.5, 2, 2.8, 4, 6.25],\n            y_values = [1, 3, 2.25, 4, 2.5, 1.75],\n            line_color=GOLD_E,\n            vertex_dot_style=dict(stroke_width=3,  fill_color=PURPLE),\n            stroke_width = 4,\n        )\n        self.add(plane, line_graph)\n```\n```\nclass LineGraphExample(Scene):\n    def construct(self):\n        plane = NumberPlane(\n            x_range = (0, 7),\n            y_range = (0, 5),\n            x_length = 7,\n            axis_config={\"include_numbers\": True},\n        )\n        plane.center()\n        line_graph = plane.plot_line_graph(\n            x_values = [0, 1.5, 2, 2.8, 4, 6.25],\n            y_values = [1, 3, 2.25, 4, 2.5, 1.75],\n            line_color=GOLD_E,\n            vertex_dot_style=dict(stroke_width=3,  fill_color=PURPLE),\n            stroke_width = 4,\n        )\n        self.add(plane, line_graph)\n```\npoint\\_to\\_coords(*point*)[\\[source]](../_modules/manim/mobject/graphing/coordinate_systems.html#Axes.point_to_coords)[¶](#manim.mobject.graphing.coordinate_systems.Axes.point_to_coords \"Link to this definition\")\nAccepts a point from the scene and returns its coordinates with respect to the axes.\nParameters:\n**point** (*Sequence**\\[**float**]*) – The point, i.e. `RIGHT` or `[0, 1, 0]`.\nAlso accepts a list of points as `[RIGHT, [0, 1, 0]]`.\nReturns:\nThe coordinates on the axes, i.e. `[4.0, 7.0]`.\nOr a list of coordinates if point is a list of points.\nReturn type:\nnp.ndarray\\[float]\nExamples\n```\n>>> from manim import Axes, RIGHT\n>>> import numpy as np\n>>> ax = Axes(x_range=[0, 10, 2])\n>>> np.around(ax.point_to_coords(RIGHT), 2)\narray([5.83, 0.  ])\n>>> np.around(ax.point_to_coords([[0, 0, 1], [1, 0, 0]]), 2)\narray([[5.  , 0.  ],\n       [5.83, 0.  ]])\n```\nExample: PointToCoordsExample [¶](#pointtocoordsexample)\n![../_images/PointToCoordsExample-1.png](../_images/PointToCoordsExample-1.png)\n```\nfrom manim import *\nclass PointToCoordsExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=[0, 10, 2]).add_coordinates()\n        circ = Circle(radius=0.5).shift(UR * 2)\n        # get the coordinates of the circle with respect to the axes\n        coords = np.around(ax.point_to_coords(circ.get_right()), decimals=2)\n        label = (\n            Matrix([[coords[0]], [coords[1]]]).scale(0.75).next_to(circ, RIGHT)\n        )\n        self.add(ax, circ, label, Dot(circ.get_right()))\n```\n```\nclass PointToCoordsExample(Scene):\n    def construct(self):\n        ax = Axes(x_range=[0, 10, 2]).add_coordinates()\n        circ = Circle(radius=0.5).shift(UR * 2)\n        # get the coordinates of the circle with respect to the axes\n        coords = np.around(ax.point_to_coords(circ.get_right()), decimals=2)\n        label = (\n            Matrix([[coords[0]], [coords[1]]]).scale(0.75).next_to(circ, RIGHT)\n        )\n        self.add(ax, circ, label, Dot(circ.get_right()))\n```",
  "scraped_at": "2025-06-24T17:51:47.520450",
  "content_length": 20426,
  "domain": "docs.manim.community",
  "word_count": 1710,
  "inspection_status": "pending",
  "filename": "Axes - Manim Community v0.19.0_20250624_175147.json",
  "saved_at": "2025-06-24T17:51:47.520743"
}