{
  "doc_id": "95803912fd272e51488515da324cacfd",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.shape_matchers.BackgroundRectangle.html",
  "title": "BackgroundRectangle - Manim Community v0.19.0",
  "content": "BackgroundRectangle[¶](#backgroundrectangle \"Link to this heading\")\n===================================================================\nQualified name: `manim.mobject.geometry.shape\\_matchers.BackgroundRectangle`\n*class* BackgroundRectangle(*\\*mobjects*, *color\\=None*, *stroke\\_width\\=0*, *stroke\\_opacity\\=0*, *fill\\_opacity\\=0\\.75*, *buff\\=0*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/shape_matchers.html#BackgroundRectangle)[¶](#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"Link to this definition\")\nBases: [`SurroundingRectangle`](manim.mobject.geometry.shape_matchers.SurroundingRectangle.html#manim.mobject.geometry.shape_matchers.SurroundingRectangle \"manim.mobject.geometry.shape_matchers.SurroundingRectangle\")\nA background rectangle. Its default color is the background color\nof the scene.\nExamples\nExample: ExampleBackgroundRectangle [¶](#examplebackgroundrectangle)\n![../_images/ExampleBackgroundRectangle-1.png](../_images/ExampleBackgroundRectangle-1.png)\n```\nfrom manim import *\nclass ExampleBackgroundRectangle(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        circle.set_stroke(color=GREEN, width=20)\n        triangle = Triangle().shift(2 * RIGHT)\n        triangle.set_fill(PINK, opacity=0.5)\n        backgroundRectangle1 = BackgroundRectangle(circle, color=WHITE, fill_opacity=0.15)\n        backgroundRectangle2 = BackgroundRectangle(triangle, color=WHITE, fill_opacity=0.15)\n        self.add(backgroundRectangle1)\n        self.add(backgroundRectangle2)\n        self.add(circle)\n        self.add(triangle)\n        self.play(Rotate(backgroundRectangle1, PI / 4))\n        self.play(Rotate(backgroundRectangle2, PI / 2))\n```\n```\nclass ExampleBackgroundRectangle(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        circle.set_stroke(color=GREEN, width=20)\n        triangle = Triangle().shift(2 * RIGHT)\n        triangle.set_fill(PINK, opacity=0.5)\n        backgroundRectangle1 = BackgroundRectangle(circle, color=WHITE, fill_opacity=0.15)\n        backgroundRectangle2 = BackgroundRectangle(triangle, color=WHITE, fill_opacity=0.15)\n        self.add(backgroundRectangle1)\n        self.add(backgroundRectangle2)\n        self.add(circle)\n        self.add(triangle)\n        self.play(Rotate(backgroundRectangle1, PI / 4))\n        self.play(Rotate(backgroundRectangle2, PI / 2))\n```\nMethods\n| [`get_fill_color`](#manim.mobject.geometry.shape_matchers.BackgroundRectangle.get_fill_color \"manim.mobject.geometry.shape_matchers.BackgroundRectangle.get_fill_color\") | If there are multiple colors (for gradient) this returns the first one |\n| --- | --- |\n| [`pointwise_become_partial`](#manim.mobject.geometry.shape_matchers.BackgroundRectangle.pointwise_become_partial \"manim.mobject.geometry.shape_matchers.BackgroundRectangle.pointwise_become_partial\") | Given a 2nd [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") `vmobject`, a lower bound `a` and an upper bound `b`, modify this [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")'s points to match the portion of the Bézier spline described by `vmobject.points` with the parameter `t` between `a` and `b`. |\n| `set_style` |  |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\nParameters:\n* **mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **stroke\\_width** (*float*)\n* **stroke\\_opacity** (*float*)\n* **fill\\_opacity** (*float*)\n* **buff** (*float*)\n* **kwargs** (*Any*)\n\\_original\\_\\_init\\_\\_(*\\*mobjects*, *color\\=None*, *stroke\\_width\\=0*, *stroke\\_opacity\\=0*, *fill\\_opacity\\=0\\.75*, *buff\\=0*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.shape_matchers.BackgroundRectangle._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **stroke\\_width** (*float*)\n* **stroke\\_opacity** (*float*)\n* **fill\\_opacity** (*float*)\n* **buff** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone\nget\\_fill\\_color()[\\[source]](../_modules/manim/mobject/geometry/shape_matchers.html#BackgroundRectangle.get_fill_color)[¶](#manim.mobject.geometry.shape_matchers.BackgroundRectangle.get_fill_color \"Link to this definition\")\nIf there are multiple colors (for gradient)\nthis returns the first one\nReturn type:\n[*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\npointwise\\_become\\_partial(*mobject*, *a*, *b*)[\\[source]](../_modules/manim/mobject/geometry/shape_matchers.html#BackgroundRectangle.pointwise_become_partial)[¶](#manim.mobject.geometry.shape_matchers.BackgroundRectangle.pointwise_become_partial \"Link to this definition\")\nGiven a 2nd [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") `vmobject`, a lower bound `a` and\nan upper bound `b`, modify this [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")’s points to\nmatch the portion of the Bézier spline described by `vmobject.points`\nwith the parameter `t` between `a` and `b`.\nParameters:\n* **vmobject** – The [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") that will serve as a model.\n* **a** (*Any*) – The lower bound for `t`.\n* **b** (*float*) – The upper bound for `t`\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturns:\nThe [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") itself, after the transformation.\nReturn type:\n[`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nRaises:\n**TypeError** – If `vmobject` is not an instance of `VMobject`.",
  "scraped_at": "2025-06-24T17:50:57.159354",
  "content_length": 7180,
  "domain": "docs.manim.community",
  "word_count": 478,
  "inspection_status": "pending",
  "filename": "BackgroundRectangle - Manim Community v0.19.0_20250624_175057.json",
  "saved_at": "2025-06-24T17:50:57.159437"
}