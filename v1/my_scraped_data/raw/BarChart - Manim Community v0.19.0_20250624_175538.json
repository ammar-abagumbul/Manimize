{
  "doc_id": "21689a924dd19fd558ad4f1fe6ac2131",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.probability.BarChart.html",
  "title": "BarChart - Manim Community v0.19.0",
  "content": "BarChart[¶](#barchart \"Link to this heading\")\n=============================================\nQualified name: `manim.mobject.graphing.probability.BarChart`\n*class* BarChart(*values*, *bar\\_names\\=None*, *y\\_range\\=None*, *x\\_length\\=None*, *y\\_length\\=None*, *bar\\_colors\\=\\['\\#003f5c', '\\#58508d', '\\#bc5090', '\\#ff6361', '\\#ffa600']*, *bar\\_width\\=0\\.6*, *bar\\_fill\\_opacity\\=0\\.7*, *bar\\_stroke\\_width\\=3*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart)[¶](#manim.mobject.graphing.probability.BarChart \"Link to this definition\")\nBases: [`Axes`](manim.mobject.graphing.coordinate_systems.Axes.html#manim.mobject.graphing.coordinate_systems.Axes \"manim.mobject.graphing.coordinate_systems.Axes\")\nCreates a bar chart. Inherits from [`Axes`](manim.mobject.graphing.coordinate_systems.Axes.html#manim.mobject.graphing.coordinate_systems.Axes \"manim.mobject.graphing.coordinate_systems.Axes\"), so it shares its methods\nand attributes. Each axis inherits from [`NumberLine`](manim.mobject.graphing.number_line.NumberLine.html#manim.mobject.graphing.number_line.NumberLine \"manim.mobject.graphing.number_line.NumberLine\"), so pass in `x_axis_config`/`y_axis_config`\nto control their attributes.\nParameters:\n* **values** (*MutableSequence**\\[**float**]*) – A sequence of values that determines the height of each bar. Accepts negative values.\n* **bar\\_names** (*Sequence**\\[**str**]* *\\|* *None*) – A sequence of names for each bar. Does not have to match the length of `values`.\n* **y\\_range** (*Sequence**\\[**float**]* *\\|* *None*) – The y\\_axis range of values. If `None`, the range will be calculated based on the\nmin/max of `values` and the step will be calculated based on `y_length`.\n* **x\\_length** (*float* *\\|* *None*) – The length of the x\\-axis. If `None`, it is automatically calculated based on\nthe number of values and the width of the screen.\n* **y\\_length** (*float* *\\|* *None*) – The length of the y\\-axis.\n* **bar\\_colors** (*Iterable**\\[**str**]*) – The color for the bars. Accepts a sequence of colors (can contain just one item).\nIf the length of\\`\\`bar\\_colors\\`\\` does not match that of `values`,\nintermediate colors will be automatically determined.\n* **bar\\_width** (*float*) – The length of a bar. Must be between 0 and 1\\.\n* **bar\\_fill\\_opacity** (*float*) – The fill opacity of the bars.\n* **bar\\_stroke\\_width** (*float*) – The stroke width of the bars.\nExamples\nExample: BarChartExample [¶](#barchartexample)\n![../_images/BarChartExample-1.png](../_images/BarChartExample-1.png)\n```\nfrom manim import *\nclass BarChartExample(Scene):\n    def construct(self):\n        chart = BarChart(\n            values=[-5, 40, -10, 20, -3],\n            bar_names=[\"one\", \"two\", \"three\", \"four\", \"five\"],\n            y_range=[-20, 50, 10],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36},\n        )\n        c_bar_lbls = chart.get_bar_labels(font_size=48)\n        self.add(chart, c_bar_lbls)\n```\n```\nclass BarChartExample(Scene):\n    def construct(self):\n        chart = BarChart(\n            values=[-5, 40, -10, 20, -3],\n            bar_names=[\"one\", \"two\", \"three\", \"four\", \"five\"],\n            y_range=[-20, 50, 10],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36},\n        )\n        c_bar_lbls = chart.get_bar_labels(font_size=48)\n        self.add(chart, c_bar_lbls)\n```\nMethods\n| [`change_bar_values`](#manim.mobject.graphing.probability.BarChart.change_bar_values \"manim.mobject.graphing.probability.BarChart.change_bar_values\") | Updates the height of the bars of the chart. |\n| --- | --- |\n| [`get_bar_labels`](#manim.mobject.graphing.probability.BarChart.get_bar_labels \"manim.mobject.graphing.probability.BarChart.get_bar_labels\") | Annotates each bar with its corresponding value. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_add\\_x\\_axis\\_labels()[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart._add_x_axis_labels)[¶](#manim.mobject.graphing.probability.BarChart._add_x_axis_labels \"Link to this definition\")\nEssentially :meth\\`:\\~.NumberLine.add\\_labels\\`, but differs in that\nthe direction of the label with respect to the x\\_axis changes to UP or DOWN\ndepending on the value.\nUP for negative values and DOWN for positive values.\n\\_create\\_bar(*bar\\_number*, *value*)[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart._create_bar)[¶](#manim.mobject.graphing.probability.BarChart._create_bar \"Link to this definition\")\nCreates a positioned bar on the chart.\nParameters:\n* **bar\\_number** (*int*) – Determines the x\\-position of the bar.\n* **value** (*float*) – The value that determines the height of the bar.\nReturns:\nA positioned rectangle representing a bar on the chart.\nReturn type:\n[Rectangle](manim.mobject.geometry.polygram.Rectangle.html#manim.mobject.geometry.polygram.Rectangle \"manim.mobject.geometry.polygram.Rectangle\")\n\\_original\\_\\_init\\_\\_(*values*, *bar\\_names\\=None*, *y\\_range\\=None*, *x\\_length\\=None*, *y\\_length\\=None*, *bar\\_colors\\=\\['\\#003f5c', '\\#58508d', '\\#bc5090', '\\#ff6361', '\\#ffa600']*, *bar\\_width\\=0\\.6*, *bar\\_fill\\_opacity\\=0\\.7*, *bar\\_stroke\\_width\\=3*, *\\*\\*kwargs*)[¶](#manim.mobject.graphing.probability.BarChart._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **values** (*MutableSequence**\\[**float**]*)\n* **bar\\_names** (*Sequence**\\[**str**]* *\\|* *None*)\n* **y\\_range** (*Sequence**\\[**float**]* *\\|* *None*)\n* **x\\_length** (*float* *\\|* *None*)\n* **y\\_length** (*float* *\\|* *None*)\n* **bar\\_colors** (*Iterable**\\[**str**]*)\n* **bar\\_width** (*float*)\n* **bar\\_fill\\_opacity** (*float*)\n* **bar\\_stroke\\_width** (*float*)\n\\_update\\_colors()[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart._update_colors)[¶](#manim.mobject.graphing.probability.BarChart._update_colors \"Link to this definition\")\nInitialize the colors of the bars of the chart.\nSets the color of `self.bars` via `self.bar_colors`.\nPrimarily used when the bars are initialized with `self._add_bars`\nor updated via `self.change_bar_values`.\nchange\\_bar\\_values(*values*, *update\\_colors\\=True*)[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart.change_bar_values)[¶](#manim.mobject.graphing.probability.BarChart.change_bar_values \"Link to this definition\")\nUpdates the height of the bars of the chart.\nParameters:\n* **values** (*Iterable**\\[**float**]*) – The values that will be used to update the height of the bars.\nDoes not have to match the number of bars.\n* **update\\_colors** (*bool*) – Whether to re\\-initalize the colors of the bars based on `self.bar_colors`.\nExamples\nExample: ChangeBarValuesExample [¶](#changebarvaluesexample)\n![../_images/ChangeBarValuesExample-1.png](../_images/ChangeBarValuesExample-1.png)\n```\nfrom manim import *\nclass ChangeBarValuesExample(Scene):\n    def construct(self):\n        values=[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n        chart = BarChart(\n            values,\n            y_range=[-10, 10, 2],\n            y_axis_config={\"font_size\": 24},\n        )\n        self.add(chart)\n        chart.change_bar_values(list(reversed(values)))\n        self.add(chart.get_bar_labels(font_size=24))\n```\n```\nclass ChangeBarValuesExample(Scene):\n    def construct(self):\n        values=[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n        chart = BarChart(\n            values,\n            y_range=[-10, 10, 2],\n            y_axis_config={\"font_size\": 24},\n        )\n        self.add(chart)\n        chart.change_bar_values(list(reversed(values)))\n        self.add(chart.get_bar_labels(font_size=24))\n```\nget\\_bar\\_labels(*color\\=None*, *font\\_size\\=24*, *buff\\=0\\.25*, *label\\_constructor\\=\\<class 'manim.mobject.text.tex\\_mobject.Tex'\\>*)[\\[source]](../_modules/manim/mobject/graphing/probability.html#BarChart.get_bar_labels)[¶](#manim.mobject.graphing.probability.BarChart.get_bar_labels \"Link to this definition\")\nAnnotates each bar with its corresponding value. Use `self.bar_labels` to access the\nlabels after creation.\nParameters:\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of each label. By default `None` and is based on the parent’s bar color.\n* **font\\_size** (*float*) – The font size of each label.\n* **buff** (*float*) – The distance from each label to its bar. By default 0\\.4\\.\n* **label\\_constructor** (*type**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*) – The Mobject class to construct the labels, by default [`Tex`](manim.mobject.text.tex_mobject.Tex.html#manim.mobject.text.tex_mobject.Tex \"manim.mobject.text.tex_mobject.Tex\").\nExamples\nExample: GetBarLabelsExample [¶](#getbarlabelsexample)\n![../_images/GetBarLabelsExample-1.png](../_images/GetBarLabelsExample-1.png)\n```\nfrom manim import *\nclass GetBarLabelsExample(Scene):\n    def construct(self):\n        chart = BarChart(values=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], y_range=[0, 10, 1])\n        c_bar_lbls = chart.get_bar_labels(\n            color=WHITE, label_constructor=MathTex, font_size=36\n        )\n        self.add(chart, c_bar_lbls)\n```\n```\nclass GetBarLabelsExample(Scene):\n    def construct(self):\n        chart = BarChart(values=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], y_range=[0, 10, 1])\n        c_bar_lbls = chart.get_bar_labels(\n            color=WHITE, label_constructor=MathTex, font_size=36\n        )\n        self.add(chart, c_bar_lbls)\n```",
  "scraped_at": "2025-06-24T17:55:38.303758",
  "content_length": 10028,
  "domain": "docs.manim.community",
  "word_count": 901,
  "inspection_status": "pending",
  "filename": "BarChart - Manim Community v0.19.0_20250624_175538.json",
  "saved_at": "2025-06-24T17:55:38.303852"
}