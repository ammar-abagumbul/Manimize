{
  "doc_id": "69b61754ff66418924d0619758e2c445",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.speedmodifier.ChangeSpeed.html",
  "title": "ChangeSpeed - Manim Community v0.19.0",
  "content": "ChangeSpeed[¶](#changespeed \"Link to this heading\")\n===================================================\nQualified name: `manim.animation.speedmodifier.ChangeSpeed`\n*class* ChangeSpeed(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed)[¶](#manim.animation.speedmodifier.ChangeSpeed \"Link to this definition\")\nBases: [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nModifies the speed of passed animation.\n`AnimationGroup` with different `lag_ratio` can also be used\nwhich combines multiple animations into one.\nThe `run_time` of the passed animation is changed to modify the speed.\nParameters:\n* **anim** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\") *\\|* *\\_AnimationBuilder*) – Animation of which the speed is to be modified.\n* **speedinfo** (*dict**\\[**float**,* *float**]*) – Contains nodes (percentage of `run_time`) and its corresponding speed factor.\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]* *\\|* *None*) – Overrides `rate_func` of passed animation, applied before changing speed.\n* **affects\\_speed\\_updaters** (*bool*)\nExamples\nExample: SpeedModifierExample [¶](#speedmodifierexample)\n```\nfrom manim import *\nclass SpeedModifierExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        b = Dot().shift(RIGHT * 4)\n        self.add(a, b)\n        self.play(\n            ChangeSpeed(\n                AnimationGroup(\n                    a.animate(run_time=1).shift(RIGHT * 8),\n                    b.animate(run_time=1).shift(LEFT * 8),\n                ),\n                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},\n                rate_func=linear,\n            )\n        )\n```\n```\nclass SpeedModifierExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        b = Dot().shift(RIGHT * 4)\n        self.add(a, b)\n        self.play(\n            ChangeSpeed(\n                AnimationGroup(\n                    a.animate(run_time=1).shift(RIGHT * 8),\n                    b.animate(run_time=1).shift(LEFT * 8),\n                ),\n                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},\n                rate_func=linear,\n            )\n        )\n```\nExample: SpeedModifierUpdaterExample [¶](#speedmodifierupdaterexample)\n```\nfrom manim import *\nclass SpeedModifierUpdaterExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.play(\n            ChangeSpeed(\n                Wait(2),\n                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},\n                affects_speed_updaters=True,\n            )\n        )\n```\n```\nclass SpeedModifierUpdaterExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.play(\n            ChangeSpeed(\n                Wait(2),\n                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},\n                affects_speed_updaters=True,\n            )\n        )\n```\nExample: SpeedModifierUpdaterExample2 [¶](#speedmodifierupdaterexample2)\n```\nfrom manim import *\nclass SpeedModifierUpdaterExample2(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.wait()\n        self.play(\n            ChangeSpeed(\n                Wait(),\n                speedinfo={1: 0},\n                affects_speed_updaters=True,\n            )\n        )\n```\n```\nclass SpeedModifierUpdaterExample2(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        self.add(a)\n        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))\n        self.wait()\n        self.play(\n            ChangeSpeed(\n                Wait(),\n                speedinfo={1: 0},\n                affects_speed_updaters=True,\n            )\n        )\n```\nMethods\n| [`add_updater`](#manim.animation.speedmodifier.ChangeSpeed.add_updater \"manim.animation.speedmodifier.ChangeSpeed.add_updater\") | This static method can be used to apply speed change to updaters. |\n| --- | --- |\n| [`begin`](#manim.animation.speedmodifier.ChangeSpeed.begin \"manim.animation.speedmodifier.ChangeSpeed.begin\") | Begin the animation. |\n| [`clean_up_from_scene`](#manim.animation.speedmodifier.ChangeSpeed.clean_up_from_scene \"manim.animation.speedmodifier.ChangeSpeed.clean_up_from_scene\") | Clean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation. |\n| [`finish`](#manim.animation.speedmodifier.ChangeSpeed.finish \"manim.animation.speedmodifier.ChangeSpeed.finish\") | Finish the animation. |\n| [`get_scaled_total_time`](#manim.animation.speedmodifier.ChangeSpeed.get_scaled_total_time \"manim.animation.speedmodifier.ChangeSpeed.get_scaled_total_time\") | The time taken by the animation under the assumption that the `run_time` is 1\\. |\n| [`interpolate`](#manim.animation.speedmodifier.ChangeSpeed.interpolate \"manim.animation.speedmodifier.ChangeSpeed.interpolate\") | Set the animation progress. |\n| `setup` |  |\n| [`update_mobjects`](#manim.animation.speedmodifier.ChangeSpeed.update_mobjects \"manim.animation.speedmodifier.ChangeSpeed.update_mobjects\") | Updates things like starting\\_mobject, and (for Transforms) target\\_mobject. |\nAttributes\n| `dt` |  |\n| --- | --- |\n| `is_changing_dt` |  |\n| `run_time` |  |\n\\_original\\_\\_init\\_\\_(*anim*, *speedinfo*, *rate\\_func\\=None*, *affects\\_speed\\_updaters\\=True*, *\\*\\*kwargs*)[¶](#manim.animation.speedmodifier.ChangeSpeed._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **anim** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\") *\\|* *\\_AnimationBuilder*)\n* **speedinfo** (*dict**\\[**float**,* *float**]*)\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]* *\\|* *None*)\n* **affects\\_speed\\_updaters** (*bool*)\nReturn type:\nNone\n\\_setup\\_scene(*scene*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed._setup_scene)[¶](#manim.animation.speedmodifier.ChangeSpeed._setup_scene \"Link to this definition\")\nSetup up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") before starting the animation.\nThis includes to [`add()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.add \"manim.scene.scene.Scene.add\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is an introducer.\nParameters:\n**scene** – The scene the animation should be cleaned up from.\nReturn type:\nNone\n*classmethod* add\\_updater(*mobject*, *update\\_function*, *index\\=None*, *call\\_updater\\=False*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.add_updater)[¶](#manim.animation.speedmodifier.ChangeSpeed.add_updater \"Link to this definition\")\nThis static method can be used to apply speed change to updaters.\nThis updater will follow speed and rate function of any [`ChangeSpeed`](#manim.animation.speedmodifier.ChangeSpeed \"manim.animation.speedmodifier.ChangeSpeed\")\nanimation that is playing with `affects_speed_updaters=True`. By default,\nupdater functions added via the usual [`Mobject.add_updater()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\") method\ndo not respect the change of animation speed.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject to which the updater should be attached.\n* **update\\_function** (*Updater*) – The function that is called whenever a new frame is rendered.\n* **index** (*int* *\\|* *None*) – The position in the list of the mobject’s updaters at which the\nfunction should be inserted.\n* **call\\_updater** (*bool*) – If `True`, calls the update function when attaching it to the\nmobject.\nSee also\n[`ChangeSpeed`](#manim.animation.speedmodifier.ChangeSpeed \"manim.animation.speedmodifier.ChangeSpeed\"), [`Mobject.add_updater()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\")\nbegin()[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.begin)[¶](#manim.animation.speedmodifier.ChangeSpeed.begin \"Link to this definition\")\nBegin the animation.\nThis method is called right as an animation is being played. As much\ninitialization as possible, especially any mobject copying, should live in this\nmethod.\nReturn type:\nNone\nclean\\_up\\_from\\_scene(*scene*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.clean_up_from_scene)[¶](#manim.animation.speedmodifier.ChangeSpeed.clean_up_from_scene \"Link to this definition\")\nClean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation.\nThis includes to [`remove()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is a remover.\nParameters:\n**scene** ([*Scene*](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\")) – The scene the animation should be cleaned up from.\nReturn type:\nNone\nfinish()[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.finish)[¶](#manim.animation.speedmodifier.ChangeSpeed.finish \"Link to this definition\")\nFinish the animation.\nThis method gets called when the animation is over.\nReturn type:\nNone\nget\\_scaled\\_total\\_time()[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.get_scaled_total_time)[¶](#manim.animation.speedmodifier.ChangeSpeed.get_scaled_total_time \"Link to this definition\")\nThe time taken by the animation under the assumption that the `run_time` is 1\\.\nReturn type:\nfloat\ninterpolate(*alpha*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.interpolate)[¶](#manim.animation.speedmodifier.ChangeSpeed.interpolate \"Link to this definition\")\nSet the animation progress.\nThis method gets called for every frame during an animation.\nParameters:\n**alpha** (*float*) – The relative time to set the animation to, 0 meaning the start, 1 meaning\nthe end.\nReturn type:\nNone\nupdate\\_mobjects(*dt*)[\\[source]](../_modules/manim/animation/speedmodifier.html#ChangeSpeed.update_mobjects)[¶](#manim.animation.speedmodifier.ChangeSpeed.update_mobjects \"Link to this definition\")\nUpdates things like starting\\_mobject, and (for\nTransforms) target\\_mobject. Note, since typically\n(always?) self.mobject will have its updating\nsuspended during the animation, this will do\nnothing to self.mobject.\nParameters:\n**dt** (*float*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:43:08.490835",
  "content_length": 11200,
  "domain": "docs.manim.community",
  "word_count": 869,
  "inspection_status": "pending",
  "filename": "ChangeSpeed - Manim Community v0.19.0_20250624_174308.json",
  "saved_at": "2025-06-24T17:43:08.490908"
}