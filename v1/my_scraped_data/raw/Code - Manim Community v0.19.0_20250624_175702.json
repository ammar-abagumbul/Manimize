{
  "doc_id": "f646fca9b57466b85d01d0d4b15d318b",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.text.code_mobject.Code.html",
  "title": "Code - Manim Community v0.19.0",
  "content": "Code[¶](#code \"Link to this heading\")\n=====================================\nQualified name: `manim.mobject.text.code\\_mobject.Code`\n*class* Code(*code\\_file\\=None*, *code\\_string\\=None*, *language\\=None*, *formatter\\_style\\='vim'*, *tab\\_width\\=4*, *add\\_line\\_numbers\\=True*, *line\\_numbers\\_from\\=1*, *background\\='rectangle'*, *background\\_config\\=None*, *paragraph\\_config\\=None*)[\\[source]](../_modules/manim/mobject/text/code_mobject.html#Code)[¶](#manim.mobject.text.code_mobject.Code \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA highlighted source code listing.\nExamples\nNormal usage:\n```\nlisting = Code(\n    \"helloworldcpp.cpp\",\n    tab_width=4,\n    formatter_style=\"emacs\",\n    background=\"window\",\n    language=\"cpp\",\n    background_config={\"stroke_color\": WHITE},\n    paragraph_config={\"font\": \"Noto Sans Mono\"},\n)\n```\nWe can also render code passed as a string. As the automatic language\ndetection can be a bit flaky, it is recommended to specify the language\nexplicitly:\nExample: CodeFromString [¶](#codefromstring)\n![../_images/CodeFromString-1.png](../_images/CodeFromString-1.png)\n```\nfrom manim import *\nclass CodeFromString(Scene):\n    def construct(self):\n        code = '''from manim import Scene, Square\nclass FadeInSquare(Scene):\n    def construct(self):\n        s = Square()\n        self.play(FadeIn(s))\n        self.play(s.animate.scale(2))\n        self.wait()'''\n        rendered_code = Code(\n            code_string=code,\n            language=\"python\",\n            background=\"window\",\n            background_config={\"stroke_color\": \"maroon\"},\n        )\n        self.add(rendered_code)\n```\n```\nclass CodeFromString(Scene):\n    def construct(self):\n        code = '''from manim import Scene, Square\nclass FadeInSquare(Scene):\n    def construct(self):\n        s = Square()\n        self.play(FadeIn(s))\n        self.play(s.animate.scale(2))\n        self.wait()'''\n        rendered_code = Code(\n            code_string=code,\n            language=\"python\",\n            background=\"window\",\n            background_config={\"stroke_color\": \"maroon\"},\n        )\n        self.add(rendered_code)\n```\nParameters:\n* **code\\_file** ([*StrPath*](manim.typing.html#manim.typing.StrPath \"manim.typing.StrPath\") *\\|* *None*) – The path to the code file to display.\n* **code\\_string** (*str* *\\|* *None*) – Alternatively, the code string to display.\n* **language** (*str* *\\|* *None*) – The programming language of the code. If not specified, it will be\nguessed from the file extension or the code itself.\n* **formatter\\_style** (*str*) – The style to use for the code highlighting. Defaults to `\"vim\"`.\nA list of all available styles can be obtained by calling\n[`Code.get_styles_list()`](#manim.mobject.text.code_mobject.Code.get_styles_list \"manim.mobject.text.code_mobject.Code.get_styles_list\").\n* **tab\\_width** (*int*) – The width of a tab character in spaces. Defaults to 4\\.\n* **add\\_line\\_numbers** (*bool*) – Whether to display line numbers. Defaults to `True`.\n* **line\\_numbers\\_from** (*int*) – The first line number to display. Defaults to 1\\.\n* **background** (*Literal**\\[**'rectangle'**,* *'window'**]*) – The type of background to use. Can be either `\"rectangle\"` (the\ndefault) or `\"window\"`.\n* **background\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – Keyword arguments passed to the background constructor. Default\nsettings are stored in the class attribute\n`default_background_config` (which can also be modified\ndirectly).\n* **paragraph\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – Keyword arguments passed to the constructor of the\n[`Paragraph`](manim.mobject.text.text_mobject.Paragraph.html#manim.mobject.text.text_mobject.Paragraph \"manim.mobject.text.text_mobject.Paragraph\") objects holding the code, and the line\nnumbers. Default settings are stored in the class attribute\n`default_paragraph_config` (which can also be modified\ndirectly).\nMethods\n| [`get_styles_list`](#manim.mobject.text.code_mobject.Code.get_styles_list \"manim.mobject.text.code_mobject.Code.get_styles_list\") | Get the list of all available formatter styles. |\n| --- | --- |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `default_background_config` |  |\n| `default_paragraph_config` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*code\\_file\\=None*, *code\\_string\\=None*, *language\\=None*, *formatter\\_style\\='vim'*, *tab\\_width\\=4*, *add\\_line\\_numbers\\=True*, *line\\_numbers\\_from\\=1*, *background\\='rectangle'*, *background\\_config\\=None*, *paragraph\\_config\\=None*)[¶](#manim.mobject.text.code_mobject.Code._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **code\\_file** ([*StrPath*](manim.typing.html#manim.typing.StrPath \"manim.typing.StrPath\") *\\|* *None*)\n* **code\\_string** (*str* *\\|* *None*)\n* **language** (*str* *\\|* *None*)\n* **formatter\\_style** (*str*)\n* **tab\\_width** (*int*)\n* **add\\_line\\_numbers** (*bool*)\n* **line\\_numbers\\_from** (*int*)\n* **background** (*Literal**\\[**'rectangle'**,* *'window'**]*)\n* **background\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n* **paragraph\\_config** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\n*classmethod* get\\_styles\\_list()[\\[source]](../_modules/manim/mobject/text/code_mobject.html#Code.get_styles_list)[¶](#manim.mobject.text.code_mobject.Code.get_styles_list \"Link to this definition\")\nGet the list of all available formatter styles.\nReturn type:\nlist\\[str]",
  "scraped_at": "2025-06-24T17:57:02.885085",
  "content_length": 5945,
  "domain": "docs.manim.community",
  "word_count": 557,
  "inspection_status": "pending",
  "filename": "Code - Manim Community v0.19.0_20250624_175702.json",
  "saved_at": "2025-06-24T17:57:02.885146"
}