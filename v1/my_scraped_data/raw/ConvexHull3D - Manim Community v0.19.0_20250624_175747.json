{
  "doc_id": "a53f3a1064af318e2a1941a1f6d5cb5e",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.three_d.polyhedra.ConvexHull3D.html",
  "title": "ConvexHull3D - Manim Community v0.19.0",
  "content": "ConvexHull3D[¶](#convexhull3d \"Link to this heading\")\n=====================================================\nQualified name: `manim.mobject.three\\_d.polyhedra.ConvexHull3D`\n*class* ConvexHull3D(*\\*points*, *tolerance\\=1e\\-05*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/polyhedra.html#ConvexHull3D)[¶](#manim.mobject.three_d.polyhedra.ConvexHull3D \"Link to this definition\")\nBases: [`Polyhedron`](manim.mobject.three_d.polyhedra.Polyhedron.html#manim.mobject.three_d.polyhedra.Polyhedron \"manim.mobject.three_d.polyhedra.Polyhedron\")\nA convex hull for a set of points\nParameters:\n* **points** ([*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")) – The points to consider.\n* **tolerance** (*float*) – The tolerance used for quickhull.\n* **kwargs** – Forwarded to the parent constructor.\nExamples\nExample: ConvexHull3DExample [¶](#convexhull3dexample)\n![../_images/ConvexHull3DExample-1.png](../_images/ConvexHull3DExample-1.png)\n```\nfrom manim import *\nclass ConvexHull3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        points = [\n            [ 1.93192757,  0.44134585, -1.52407061],\n            [-0.93302521,  1.23206983,  0.64117067],\n            [-0.44350918, -0.61043677,  0.21723705],\n            [-0.42640268, -1.05260843,  1.61266094],\n            [-1.84449637,  0.91238739, -1.85172623],\n            [ 1.72068132, -0.11880457,  0.51881751],\n            [ 0.41904805,  0.44938012, -1.86440686],\n            [ 0.83864666,  1.66653337,  1.88960123],\n            [ 0.22240514, -0.80986286,  1.34249326],\n            [-1.29585759,  1.01516189,  0.46187522],\n            [ 1.7776499,  -1.59550796, -1.70240747],\n            [ 0.80065226, -0.12530398,  1.70063977],\n            [ 1.28960948, -1.44158255,  1.39938582],\n            [-0.93538943,  1.33617705, -0.24852643],\n            [-1.54868271,  1.7444399,  -0.46170734]\n        ]\n        hull = ConvexHull3D(\n            *points,\n            faces_config = {\"stroke_opacity\": 0},\n            graph_config = {\n                \"vertex_type\": Dot3D,\n                \"edge_config\": {\n                    \"stroke_color\": BLUE,\n                    \"stroke_width\": 2,\n                    \"stroke_opacity\": 0.05,\n                }\n            }\n        )\n        dots = VGroup(*[Dot3D(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```\n```\nclass ConvexHull3DExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        points = [\n            [ 1.93192757,  0.44134585, -1.52407061],\n            [-0.93302521,  1.23206983,  0.64117067],\n            [-0.44350918, -0.61043677,  0.21723705],\n            [-0.42640268, -1.05260843,  1.61266094],\n            [-1.84449637,  0.91238739, -1.85172623],\n            [ 1.72068132, -0.11880457,  0.51881751],\n            [ 0.41904805,  0.44938012, -1.86440686],\n            [ 0.83864666,  1.66653337,  1.88960123],\n            [ 0.22240514, -0.80986286,  1.34249326],\n            [-1.29585759,  1.01516189,  0.46187522],\n            [ 1.7776499,  -1.59550796, -1.70240747],\n            [ 0.80065226, -0.12530398,  1.70063977],\n            [ 1.28960948, -1.44158255,  1.39938582],\n            [-0.93538943,  1.33617705, -0.24852643],\n            [-1.54868271,  1.7444399,  -0.46170734]\n        ]\n        hull = ConvexHull3D(\n            *points,\n            faces_config = {\"stroke_opacity\": 0},\n            graph_config = {\n                \"vertex_type\": Dot3D,\n                \"edge_config\": {\n                    \"stroke_color\": BLUE,\n                    \"stroke_width\": 2,\n                    \"stroke_opacity\": 0.05,\n                }\n            }\n        )\n        dots = VGroup(*[Dot3D(point) for point in points])\n        self.add(hull)\n        self.add(dots)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*points*, *tolerance\\=1e\\-05*, *\\*\\*kwargs*)[¶](#manim.mobject.three_d.polyhedra.ConvexHull3D._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **points** ([*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\"))\n* **tolerance** (*float*)",
  "scraped_at": "2025-06-24T17:57:47.439822",
  "content_length": 4658,
  "domain": "docs.manim.community",
  "word_count": 374,
  "inspection_status": "pending",
  "filename": "ConvexHull3D - Manim Community v0.19.0_20250624_175747.json",
  "saved_at": "2025-06-24T17:57:47.439877"
}