{
  "doc_id": "23f2997bcc931e09dec49cda453624aa",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.types.vectorized_mobject.DashedVMobject.html",
  "title": "DashedVMobject - Manim Community v0.19.0",
  "content": "DashedVMobject[¶](#dashedvmobject \"Link to this heading\")\n=========================================================\nQualified name: `manim.mobject.types.vectorized\\_mobject.DashedVMobject`\n*class* DashedVMobject(*vmobject*, *num\\_dashes\\=15*, *dashed\\_ratio\\=0\\.5*, *dash\\_offset\\=0*, *color\\=ManimColor('\\#FFFFFF')*, *equal\\_lengths\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#DashedVMobject)[¶](#manim.mobject.types.vectorized_mobject.DashedVMobject \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") composed of dashes instead of lines.\nParameters:\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The object that will get dashed\n* **num\\_dashes** (*int*) – Number of dashes to add.\n* **dashed\\_ratio** (*float*) – Ratio of dash to empty space.\n* **dash\\_offset** (*float*) – Shifts the starting point of dashes along the\npath. Value 1 shifts by one full dash length.\n* **equal\\_lengths** (*bool*) – If `True`, dashes will be (approximately) equally long.\nIf `False`, dashes will be split evenly in the curve’s\ninput t variable (legacy behavior).\n* **color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\nExamples\nExample: DashedVMobjectExample [¶](#dashedvmobjectexample)\n![../_images/DashedVMobjectExample-1.png](../_images/DashedVMobjectExample-1.png)\n```\nfrom manim import *\nclass DashedVMobjectExample(Scene):\n    def construct(self):\n        r = 0.5\n        top_row = VGroup()  # Increasing num_dashes\n        for dashes in range(1, 12):\n            circ = DashedVMobject(Circle(radius=r, color=WHITE), num_dashes=dashes)\n            top_row.add(circ)\n        middle_row = VGroup()  # Increasing dashed_ratio\n        for ratio in np.arange(1 / 11, 1, 1 / 11):\n            circ = DashedVMobject(\n                Circle(radius=r, color=WHITE), dashed_ratio=ratio\n            )\n            middle_row.add(circ)\n        func1 = FunctionGraph(lambda t: t**5,[-1,1],color=WHITE)\n        func_even = DashedVMobject(func1,num_dashes=6,equal_lengths=True)\n        func_stretched = DashedVMobject(func1, num_dashes=6, equal_lengths=False)\n        bottom_row = VGroup(func_even,func_stretched)\n        top_row.arrange(buff=0.3)\n        middle_row.arrange()\n        bottom_row.arrange(buff=1)\n        everything = VGroup(top_row, middle_row, bottom_row).arrange(DOWN, buff=1)\n        self.add(everything)\n```\n```\nclass DashedVMobjectExample(Scene):\n    def construct(self):\n        r = 0.5\n        top_row = VGroup()  # Increasing num_dashes\n        for dashes in range(1, 12):\n            circ = DashedVMobject(Circle(radius=r, color=WHITE), num_dashes=dashes)\n            top_row.add(circ)\n        middle_row = VGroup()  # Increasing dashed_ratio\n        for ratio in np.arange(1 / 11, 1, 1 / 11):\n            circ = DashedVMobject(\n                Circle(radius=r, color=WHITE), dashed_ratio=ratio\n            )\n            middle_row.add(circ)\n        func1 = FunctionGraph(lambda t: t**5,[-1,1],color=WHITE)\n        func_even = DashedVMobject(func1,num_dashes=6,equal_lengths=True)\n        func_stretched = DashedVMobject(func1, num_dashes=6, equal_lengths=False)\n        bottom_row = VGroup(func_even,func_stretched)\n        top_row.arrange(buff=0.3)\n        middle_row.arrange()\n        bottom_row.arrange(buff=1)\n        everything = VGroup(top_row, middle_row, bottom_row).arrange(DOWN, buff=1)\n        self.add(everything)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*vmobject*, *num\\_dashes\\=15*, *dashed\\_ratio\\=0\\.5*, *dash\\_offset\\=0*, *color\\=ManimColor('\\#FFFFFF')*, *equal\\_lengths\\=True*, *\\*\\*kwargs*)[¶](#manim.mobject.types.vectorized_mobject.DashedVMobject._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vmobject** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\"))\n* **num\\_dashes** (*int*)\n* **dashed\\_ratio** (*float*)\n* **dash\\_offset** (*float*)\n* **color** ([*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"))\n* **equal\\_lengths** (*bool*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:59:13.485926",
  "content_length": 5141,
  "domain": "docs.manim.community",
  "word_count": 403,
  "inspection_status": "pending",
  "filename": "DashedVMobject - Manim Community v0.19.0_20250624_175913.json",
  "saved_at": "2025-06-24T17:59:13.485987"
}