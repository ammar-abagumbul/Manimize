{
  "doc_id": "03fdaad7eeb4bf7ab3aa1fb4cb096d0b",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.functions.FunctionGraph.html",
  "title": "FunctionGraph - Manim Community v0.19.0",
  "content": "FunctionGraph[¶](#functiongraph \"Link to this heading\")\n=======================================================\nQualified name: `manim.mobject.graphing.functions.FunctionGraph`\n*class* FunctionGraph(*function*, *x\\_range\\=None*, *color\\=ManimColor('\\#FFFF00')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/functions.html#FunctionGraph)[¶](#manim.mobject.graphing.functions.FunctionGraph \"Link to this definition\")\nBases: [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\")\nA [`ParametricFunction`](manim.mobject.graphing.functions.ParametricFunction.html#manim.mobject.graphing.functions.ParametricFunction \"manim.mobject.graphing.functions.ParametricFunction\") that spans the length of the scene by default.\nExamples\nExample: ExampleFunctionGraph [¶](#examplefunctiongraph)\n![../_images/ExampleFunctionGraph-1.png](../_images/ExampleFunctionGraph-1.png)\n```\nfrom manim import *\nclass ExampleFunctionGraph(Scene):\n    def construct(self):\n        cos_func = FunctionGraph(\n            lambda t: np.cos(t) + 0.5 * np.cos(7 * t) + (1 / 7) * np.cos(14 * t),\n            color=RED,\n        )\n        sin_func_1 = FunctionGraph(\n            lambda t: np.sin(t) + 0.5 * np.sin(7 * t) + (1 / 7) * np.sin(14 * t),\n            color=BLUE,\n        )\n        sin_func_2 = FunctionGraph(\n            lambda t: np.sin(t) + 0.5 * np.sin(7 * t) + (1 / 7) * np.sin(14 * t),\n            x_range=[-4, 4],\n            color=GREEN,\n        ).move_to([0, 1, 0])\n        self.add(cos_func, sin_func_1, sin_func_2)\n```\n```\nclass ExampleFunctionGraph(Scene):\n    def construct(self):\n        cos_func = FunctionGraph(\n            lambda t: np.cos(t) + 0.5 * np.cos(7 * t) + (1 / 7) * np.cos(14 * t),\n            color=RED,\n        )\n        sin_func_1 = FunctionGraph(\n            lambda t: np.sin(t) + 0.5 * np.sin(7 * t) + (1 / 7) * np.sin(14 * t),\n            color=BLUE,\n        )\n        sin_func_2 = FunctionGraph(\n            lambda t: np.sin(t) + 0.5 * np.sin(7 * t) + (1 / 7) * np.sin(14 * t),\n            x_range=[-4, 4],\n            color=GREEN,\n        ).move_to([0, 1, 0])\n        self.add(cos_func, sin_func_1, sin_func_2)\n```\nMethods\n| `get_function` |  |\n| --- | --- |\n| `get_point_from_function` |  |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*function*, *x\\_range\\=None*, *color\\=ManimColor('\\#FFFF00')*, *\\*\\*kwargs*)[¶](#manim.mobject.graphing.functions.FunctionGraph._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.",
  "scraped_at": "2025-06-24T17:52:05.709690",
  "content_length": 3028,
  "domain": "docs.manim.community",
  "word_count": 312,
  "inspection_status": "pending",
  "filename": "FunctionGraph - Manim Community v0.19.0_20250624_175205.json",
  "saved_at": "2025-06-24T17:52:05.709744"
}