{
  "doc_id": "e2334f0701cba7439c54f577ca87ef69",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.movement.Homotopy.html",
  "title": "Homotopy - Manim Community v0.19.0",
  "content": "Homotopy[¶](#homotopy \"Link to this heading\")\n=============================================\nQualified name: `manim.animation.movement.Homotopy`\n*class* Homotopy(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/movement.html#Homotopy)[¶](#manim.animation.movement.Homotopy \"Link to this definition\")\nBases: [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nA Homotopy.\nThis is an animation transforming the points of a mobject according\nto the specified transformation function. With the parameter \\\\(t\\\\)\nmoving from 0 to 1 throughout the animation and \\\\((x, y, z)\\\\)\ndescribing the coordinates of the point of a mobject,\nthe function passed to the `homotopy` keyword argument should\ntransform the tuple \\\\((x, y, z, t)\\\\) to \\\\((x', y', z')\\\\),\nthe coordinates the original point is transformed to at time \\\\(t\\\\).\nParameters:\n* **homotopy** (*Callable**\\[**\\[**float**,* *float**,* *float**,* *float**]**,* *tuple**\\[**float**,* *float**,* *float**]**]*) – A function mapping \\\\((x, y, z, t)\\\\) to \\\\((x', y', z')\\\\).\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject transformed under the given homotopy.\n* **run\\_time** (*float*) – The run time of the animation.\n* **apply\\_function\\_kwargs** (*dict**\\[**str**,* *Any**]* *\\|* *None*) – Keyword arguments propagated to `Mobject.apply_function()`.\n* **kwargs** – Further keyword arguments passed to the parent class.\nExamples\nExample: HomotopyExample [¶](#homotopyexample)\n```\nfrom manim import *\nclass HomotopyExample(Scene):\n    def construct(self):\n        square = Square()\n        def homotopy(x, y, z, t):\n            if t <= 0.25:\n                progress = t / 0.25\n                return (x, y + progress * 0.2 * np.sin(x), z)\n            else:\n                wave_progress = (t - 0.25) / 0.75\n                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)\n        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))\n```\n```\nclass HomotopyExample(Scene):\n    def construct(self):\n        square = Square()\n        def homotopy(x, y, z, t):\n            if t <= 0.25:\n                progress = t / 0.25\n                return (x, y + progress * 0.2 * np.sin(x), z)\n            else:\n                wave_progress = (t - 0.25) / 0.75\n                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)\n        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))\n```\nMethods\n| `function_at_time_t` |  |\n| --- | --- |\n| `interpolate_submobject` |  |\nAttributes\n| `run_time` |  |\n| --- | --- |\n\\_original\\_\\_init\\_\\_(*homotopy*, *mobject*, *run\\_time\\=3*, *apply\\_function\\_kwargs\\=None*, *\\*\\*kwargs*)[¶](#manim.animation.movement.Homotopy._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **homotopy** (*Callable**\\[**\\[**float**,* *float**,* *float**,* *float**]**,* *tuple**\\[**float**,* *float**,* *float**]**]*)\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **run\\_time** (*float*)\n* **apply\\_function\\_kwargs** (*dict**\\[**str**,* *Any**]* *\\|* *None*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:42:34.578903",
  "content_length": 3360,
  "domain": "docs.manim.community",
  "word_count": 352,
  "inspection_status": "pending",
  "filename": "Homotopy - Manim Community v0.19.0_20250624_174234.json",
  "saved_at": "2025-06-24T17:42:34.578965"
}