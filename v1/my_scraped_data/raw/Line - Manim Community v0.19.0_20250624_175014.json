{
  "doc_id": "edd13487f9bf0d1dde4eb9df2d8b6030",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.line.Line.html",
  "title": "Line - Manim Community v0.19.0",
  "content": "Line[¶](#line \"Link to this heading\")\n=====================================\nQualified name: `manim.mobject.geometry.line.Line`\n*class* Line(*start\\=array(\\[\\-1\\., 0\\., 0\\.])*, *end\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0*, *path\\_arc\\=0*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Line)[¶](#manim.mobject.geometry.line.Line \"Link to this definition\")\nBases: [`TipableVMobject`](manim.mobject.geometry.arc.TipableVMobject.html#manim.mobject.geometry.arc.TipableVMobject \"manim.mobject.geometry.arc.TipableVMobject\")\nA straight or curved line segment between two points or mobjects.\nParameters:\n* **start** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The starting point or Mobject of the line.\n* **end** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The ending point or Mobject of the line.\n* **buff** (*float*) – The distance to shorten the line from both ends.\n* **path\\_arc** (*float*) – If nonzero, the line will be curved into an arc with this angle (in radians).\n* **kwargs** (*Any*) – Additional arguments to be passed to `TipableVMobject`\nExamples\nExample: LineExample [¶](#lineexample)\n![../_images/LineExample-1.png](../_images/LineExample-1.png)\n```\nfrom manim import *\nclass LineExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT*2, RIGHT*2)\n        line2 = Line(LEFT*2, RIGHT*2, buff=0.5)\n        line3 = Line(LEFT*2, RIGHT*2, path_arc=PI/2)\n        grp = VGroup(line1,line2,line3).arrange(DOWN, buff=2)\n        self.add(grp)\n```\n```\nclass LineExample(Scene):\n    def construct(self):\n        line1 = Line(LEFT*2, RIGHT*2)\n        line2 = Line(LEFT*2, RIGHT*2, buff=0.5)\n        line3 = Line(LEFT*2, RIGHT*2, path_arc=PI/2)\n        grp = VGroup(line1,line2,line3).arrange(DOWN, buff=2)\n        self.add(grp)\n```\nMethods\n| [`generate_points`](#manim.mobject.geometry.line.Line.generate_points \"manim.mobject.geometry.line.Line.generate_points\") | Initializes `points` and therefore the shape. |\n| --- | --- |\n| `get_angle` |  |\n| [`get_projection`](#manim.mobject.geometry.line.Line.get_projection \"manim.mobject.geometry.line.Line.get_projection\") | Returns the projection of a point onto a line. |\n| `get_slope` |  |\n| `get_unit_vector` |  |\n| `get_vector` |  |\n| [`init_points`](#manim.mobject.geometry.line.Line.init_points \"manim.mobject.geometry.line.Line.init_points\") | Initializes `points` and therefore the shape. |\n| [`put_start_and_end_on`](#manim.mobject.geometry.line.Line.put_start_and_end_on \"manim.mobject.geometry.line.Line.put_start_and_end_on\") | Sets starts and end coordinates of a line. |\n| `set_angle` |  |\n| `set_length` |  |\n| `set_path_arc` |  |\n| [`set_points_by_ends`](#manim.mobject.geometry.line.Line.set_points_by_ends \"manim.mobject.geometry.line.Line.set_points_by_ends\") | Sets the points of the line based on its start and end points. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*start\\=array(\\[\\-1\\., 0\\., 0\\.])*, *end\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0*, *path\\_arc\\=0*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.line.Line._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **start** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **end** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **buff** (*float*)\n* **path\\_arc** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone\n\\_pointify(*mob\\_or\\_point*, *direction\\=None*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Line._pointify)[¶](#manim.mobject.geometry.line.Line._pointify \"Link to this definition\")\nTransforms a mobject into its corresponding point. Does nothing if a point is passed.\n`direction` determines the location of the point along its bounding box in that direction.\nParameters:\n* **mob\\_or\\_point** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The mobject or point.\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\") *\\|* *None*) – The direction.\nReturn type:\n[Point3D](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\ngenerate\\_points()[\\[source]](../_modules/manim/mobject/geometry/line.html#Line.generate_points)[¶](#manim.mobject.geometry.line.Line.generate_points \"Link to this definition\")\nInitializes `points` and therefore the shape.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nNone\nget\\_projection(*point*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Line.get_projection)[¶](#manim.mobject.geometry.line.Line.get_projection \"Link to this definition\")\nReturns the projection of a point onto a line.\nParameters:\n**point** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The point to which the line is projected.\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\ninit\\_points()[¶](#manim.mobject.geometry.line.Line.init_points \"Link to this definition\")\nInitializes `points` and therefore the shape.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nNone\nput\\_start\\_and\\_end\\_on(*start*, *end*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Line.put_start_and_end_on)[¶](#manim.mobject.geometry.line.Line.put_start_and_end_on \"Link to this definition\")\nSets starts and end coordinates of a line.\nExamples\nExample: LineExample [¶](#lineexample)\n```\nfrom manim import *\nclass LineExample(Scene):\n    def construct(self):\n        d = VGroup()\n        for i in range(0,10):\n            d.add(Dot())\n        d.arrange_in_grid(buff=1)\n        self.add(d)\n        l= Line(d[0], d[1])\n        self.add(l)\n        self.wait()\n        l.put_start_and_end_on(d[1].get_center(), d[2].get_center())\n        self.wait()\n        l.put_start_and_end_on(d[4].get_center(), d[7].get_center())\n        self.wait()\n```\n```\nclass LineExample(Scene):\n    def construct(self):\n        d = VGroup()\n        for i in range(0,10):\n            d.add(Dot())\n        d.arrange_in_grid(buff=1)\n        self.add(d)\n        l= Line(d[0], d[1])\n        self.add(l)\n        self.wait()\n        l.put_start_and_end_on(d[1].get_center(), d[2].get_center())\n        self.wait()\n        l.put_start_and_end_on(d[4].get_center(), d[7].get_center())\n        self.wait()\n```\nParameters:\n* **start** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **end** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\nReturn type:\nSelf\nset\\_points\\_by\\_ends(*start*, *end*, *buff\\=0*, *path\\_arc\\=0*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Line.set_points_by_ends)[¶](#manim.mobject.geometry.line.Line.set_points_by_ends \"Link to this definition\")\nSets the points of the line based on its start and end points.\nUnlike [`put_start_and_end_on()`](#manim.mobject.geometry.line.Line.put_start_and_end_on \"manim.mobject.geometry.line.Line.put_start_and_end_on\"), this method respects self.buff and\nMobject bounding boxes.\nParameters:\n* **start** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The start point or Mobject of the line.\n* **end** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The end point or Mobject of the line.\n* **buff** (*float*) – The empty space between the start and end of the line, by default 0\\.\n* **path\\_arc** (*float*) – The angle of a circle spanned by this arc, by default 0 which is a straight line.\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:50:14.691486",
  "content_length": 8927,
  "domain": "docs.manim.community",
  "word_count": 747,
  "inspection_status": "pending",
  "filename": "Line - Manim Community v0.19.0_20250624_175014.json",
  "saved_at": "2025-06-24T17:50:14.691557"
}