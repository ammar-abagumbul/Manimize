{
  "doc_id": "4898c831956b2af13034ab182d578a80",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.three_d.three_dimensions.Line3D.html",
  "title": "Line3D - Manim Community v0.19.0",
  "content": "Line3D[¶](#line3d \"Link to this heading\")\n=========================================\nQualified name: `manim.mobject.three\\_d.three\\_dimensions.Line3D`\n*class* Line3D(*start\\=array(\\[\\-1\\., 0\\., 0\\.])*, *end\\=array(\\[1\\., 0\\., 0\\.])*, *thickness\\=0\\.02*, *color\\=None*, *resolution\\=24*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D)[¶](#manim.mobject.three_d.three_dimensions.Line3D \"Link to this definition\")\nBases: [`Cylinder`](manim.mobject.three_d.three_dimensions.Cylinder.html#manim.mobject.three_d.three_dimensions.Cylinder \"manim.mobject.three_d.three_dimensions.Cylinder\")\nA cylindrical line, for use in ThreeDScene.\nParameters:\n* **start** (*np.ndarray*) – The start point of the line.\n* **end** (*np.ndarray*) – The end point of the line.\n* **thickness** (*float*) – The thickness of the line.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the line.\n* **resolution** (*int* *\\|* *Sequence**\\[**int**]*) – The resolution of the line.\nBy default this value is the number of points the line will sampled at.\nIf you want the line to also come out checkered, use a tuple.\nFor example, for a line made of 24 points with 4 checker points on each\ncylinder, pass the tuple (4, 24\\).\nExamples\nExample: ExampleLine3D [¶](#exampleline3d)\n![../_images/ExampleLine3D-1.png](../_images/ExampleLine3D-1.png)\n```\nfrom manim import *\nclass ExampleLine3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        line = Line3D(start=np.array([0, 0, 0]), end=np.array([2, 2, 2]))\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, line)\n```\n```\nclass ExampleLine3D(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        line = Line3D(start=np.array([0, 0, 0]), end=np.array([2, 2, 2]))\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, line)\n```\nMethods\n| [`get_end`](#manim.mobject.three_d.three_dimensions.Line3D.get_end \"manim.mobject.three_d.three_dimensions.Line3D.get_end\") | Returns the ending point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\"). |\n| --- | --- |\n| [`get_start`](#manim.mobject.three_d.three_dimensions.Line3D.get_start \"manim.mobject.three_d.three_dimensions.Line3D.get_start\") | Returns the starting point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\"). |\n| [`parallel_to`](#manim.mobject.three_d.three_dimensions.Line3D.parallel_to \"manim.mobject.three_d.three_dimensions.Line3D.parallel_to\") | Returns a line parallel to another line going through a given point. |\n| [`perpendicular_to`](#manim.mobject.three_d.three_dimensions.Line3D.perpendicular_to \"manim.mobject.three_d.three_dimensions.Line3D.perpendicular_to\") | Returns a line perpendicular to another line going through a given point. |\n| [`pointify`](#manim.mobject.three_d.three_dimensions.Line3D.pointify \"manim.mobject.three_d.three_dimensions.Line3D.pointify\") | Gets a point representing the center of the [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`set_start_and_end_attrs`](#manim.mobject.three_d.three_dimensions.Line3D.set_start_and_end_attrs \"manim.mobject.three_d.three_dimensions.Line3D.set_start_and_end_attrs\") | Sets the start and end points of the line. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*start\\=array(\\[\\-1\\., 0\\., 0\\.])*, *end\\=array(\\[1\\., 0\\., 0\\.])*, *thickness\\=0\\.02*, *color\\=None*, *resolution\\=24*, *\\*\\*kwargs*)[¶](#manim.mobject.three_d.three_dimensions.Line3D._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **start** (*np.ndarray*)\n* **end** (*np.ndarray*)\n* **thickness** (*float*)\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **resolution** (*int* *\\|* *Sequence**\\[**int**]*)\nget\\_end()[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.get_end)[¶](#manim.mobject.three_d.three_dimensions.Line3D.get_end \"Link to this definition\")\nReturns the ending point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\").\nReturns:\n**end** – Ending point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\").\nReturn type:\n`numpy.array`\nget\\_start()[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.get_start)[¶](#manim.mobject.three_d.three_dimensions.Line3D.get_start \"Link to this definition\")\nReturns the starting point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\").\nReturns:\n**start** – Starting point of the [`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\").\nReturn type:\n`numpy.array`\n*classmethod* parallel\\_to(*line*, *point\\=array(\\[0\\., 0\\., 0\\.])*, *length\\=5*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.parallel_to)[¶](#manim.mobject.three_d.three_dimensions.Line3D.parallel_to \"Link to this definition\")\nReturns a line parallel to another line going through\na given point.\nParameters:\n* **line** ([*Line3D*](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\")) – The line to be parallel to.\n* **point** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The point to pass through.\n* **length** (*float*) – Length of the parallel line.\n* **kwargs** – Additional parameters to be passed to the class.\nReturns:\nLine parallel to `line`.\nReturn type:\n[`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\")\nExamples\nExample: ParallelLineExample [¶](#parallellineexample)\n![../_images/ParallelLineExample-1.png](../_images/ParallelLineExample-1.png)\n```\nfrom manim import *\nclass ParallelLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.parallel_to(line1, color=YELLOW)\n        self.add(ax, line1, line2)\n```\n```\nclass ParallelLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.parallel_to(line1, color=YELLOW)\n        self.add(ax, line1, line2)\n```\n*classmethod* perpendicular\\_to(*line*, *point\\=array(\\[0\\., 0\\., 0\\.])*, *length\\=5*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.perpendicular_to)[¶](#manim.mobject.three_d.three_dimensions.Line3D.perpendicular_to \"Link to this definition\")\nReturns a line perpendicular to another line going through\na given point.\nParameters:\n* **line** ([*Line3D*](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\")) – The line to be perpendicular to.\n* **point** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The point to pass through.\n* **length** (*float*) – Length of the perpendicular line.\n* **kwargs** – Additional parameters to be passed to the class.\nReturns:\nLine perpendicular to `line`.\nReturn type:\n[`Line3D`](#manim.mobject.three_d.three_dimensions.Line3D \"manim.mobject.three_d.three_dimensions.Line3D\")\nExamples\nExample: PerpLineExample [¶](#perplineexample)\n![../_images/PerpLineExample-1.png](../_images/PerpLineExample-1.png)\n```\nfrom manim import *\nclass PerpLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.perpendicular_to(line1, color=BLUE)\n        self.add(ax, line1, line2)\n```\n```\nclass PerpLineExample(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(PI / 3, -PI / 4)\n        ax = ThreeDAxes((-5, 5), (-5, 5), (-5, 5), 10, 10, 10)\n        line1 = Line3D(RIGHT * 2, UP + OUT, color=RED)\n        line2 = Line3D.perpendicular_to(line1, color=BLUE)\n        self.add(ax, line1, line2)\n```\npointify(*mob\\_or\\_point*, *direction\\=None*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.pointify)[¶](#manim.mobject.three_d.three_dimensions.Line3D.pointify \"Link to this definition\")\nGets a point representing the center of the [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n* **mob\\_or\\_point** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") or point whose center should be returned.\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – If an edge of a [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") should be returned, the direction of the edge.\nReturns:\nCenter of the [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") or point, or edge if direction is given.\nReturn type:\n`numpy.array`\nset\\_start\\_and\\_end\\_attrs(*start*, *end*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Line3D.set_start_and_end_attrs)[¶](#manim.mobject.three_d.three_dimensions.Line3D.set_start_and_end_attrs \"Link to this definition\")\nSets the start and end points of the line.\nIf either `start` or `end` are [`Mobjects`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"),\nthis gives their centers.\nParameters:\n* **start** (*ndarray*) – Starting point or `Mobject`.\n* **end** (*ndarray*) – Ending point or `Mobject`.\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:58:21.201088",
  "content_length": 10926,
  "domain": "docs.manim.community",
  "word_count": 905,
  "inspection_status": "pending",
  "filename": "Line3D - Manim Community v0.19.0_20250624_175821.json",
  "saved_at": "2025-06-24T17:58:21.201160"
}