{
  "doc_id": "254681e10913370eb5dd813fdfd9c535",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.color.core.ManimColor.html",
  "title": "ManimColor - Manim Community v0.19.0",
  "content": "ManimColor[¶](#manimcolor \"Link to this heading\")\n=================================================\nQualified name: `manim.utils.color.core.ManimColor`\n*class* ManimColor(*value*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor)[¶](#manim.utils.color.core.ManimColor \"Link to this definition\")\nBases: `object`\nInternal representation of a color.\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") class is the main class for the representation of a color.\nIts internal representation is an array of 4 floats corresponding to a `[r,g,b,a]`\nvalue where `r,g,b,a` can be between 0\\.0 and 1\\.0\\.\nThis is done in order to reduce the amount of color inconsistencies by constantly\ncasting between integers and floats which introduces errors.\nThe class can accept any value of type [`ParsableManimColor`](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") i.e.\n`ManimColor, int, str, RGB_Tuple_Int, RGB_Tuple_Float, RGBA_Tuple_Int, RGBA_Tuple_Float, RGB_Array_Int,\nRGB_Array_Float, RGBA_Array_Int, RGBA_Array_Float`\n[`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") itself only accepts singular values and will directly interpret\nthem into a single color if possible. Be careful when passing strings to\n[`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"): it can create a big overhead for the color processing.\nIf you want to parse a list of colors, use the [`parse()`](#manim.utils.color.core.ManimColor.parse \"manim.utils.color.core.ManimColor.parse\") method, which assumes\nthat you’re going to pass a list of colors so that arrays will not be interpreted as\na single color.\nWarning\nIf you pass an array of numbers to [`parse()`](#manim.utils.color.core.ManimColor.parse \"manim.utils.color.core.ManimColor.parse\"), it will interpret the\n`r,g,b,a` numbers in that array as colors: Instead of the expected\nsingular color, you will get an array with 4 colors.\nFor conversion behaviors, see the `_internal` functions for further documentation.\nYou can create a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") instance via its classmethods. See the\nrespective methods for more info.\n```\nmycolor = ManimColor.from_rgb((0, 1, 0.4, 0.5))\nmyothercolor = ManimColor.from_rgb((153, 255, 255))\n```\nYou can also convert between different color spaces:\n```\nmycolor_hex = mycolor.to_hex()\nmyoriginalcolor = ManimColor.from_hex(mycolor_hex).to_hsv()\n```\nParameters:\n* **value** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – Some representation of a color (e.g., a string or\na suitable tuple). The default `None` is `BLACK`.\n* **alpha** (*float*) – The opacity of the color. By default, colors are\nfully opaque (value 1\\.0\\).\nMethods\n| [`contrasting`](#manim.utils.color.core.ManimColor.contrasting \"manim.utils.color.core.ManimColor.contrasting\") | Return one of two colors, light or dark (by default white or black), that contrasts with the current color (depending on its luminance). |\n| --- | --- |\n| [`darker`](#manim.utils.color.core.ManimColor.darker \"manim.utils.color.core.ManimColor.darker\") | Return a new color that is darker than the current color, i.e. interpolated with `BLACK`. |\n| [`from_hex`](#manim.utils.color.core.ManimColor.from_hex \"manim.utils.color.core.ManimColor.from_hex\") | Create a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from a hex string. |\n| [`from_hsl`](#manim.utils.color.core.ManimColor.from_hsl \"manim.utils.color.core.ManimColor.from_hsl\") | Create a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from an HSL array. |\n| [`from_hsv`](#manim.utils.color.core.ManimColor.from_hsv \"manim.utils.color.core.ManimColor.from_hsv\") | Create a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from an HSV array. |\n| [`from_rgb`](#manim.utils.color.core.ManimColor.from_rgb \"manim.utils.color.core.ManimColor.from_rgb\") | Create a ManimColor from an RGB array. |\n| [`from_rgba`](#manim.utils.color.core.ManimColor.from_rgba \"manim.utils.color.core.ManimColor.from_rgba\") | Create a ManimColor from an RGBA Array. |\n| [`gradient`](#manim.utils.color.core.ManimColor.gradient \"manim.utils.color.core.ManimColor.gradient\") | This method is currently not implemented. |\n| [`interpolate`](#manim.utils.color.core.ManimColor.interpolate \"manim.utils.color.core.ManimColor.interpolate\") | Interpolate between the current and the given [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"), and return the result. |\n| [`into`](#manim.utils.color.core.ManimColor.into \"manim.utils.color.core.ManimColor.into\") | Convert the current color into a different colorspace given by `class_type`, without changing the [`_internal_value`](#manim.utils.color.core.ManimColor._internal_value \"manim.utils.color.core.ManimColor._internal_value\"). |\n| [`invert`](#manim.utils.color.core.ManimColor.invert \"manim.utils.color.core.ManimColor.invert\") | Return a new, linearly inverted version of this [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") (no inplace changes). |\n| [`lighter`](#manim.utils.color.core.ManimColor.lighter \"manim.utils.color.core.ManimColor.lighter\") | Return a new color that is lighter than the current color, i.e. interpolated with `WHITE`. |\n| [`opacity`](#manim.utils.color.core.ManimColor.opacity \"manim.utils.color.core.ManimColor.opacity\") | Create a new [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") with the given opacity and the same color values as before. |\n| [`parse`](#manim.utils.color.core.ManimColor.parse \"manim.utils.color.core.ManimColor.parse\") | Parse one color as a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") or a sequence of colors as a list of [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")'s. |\n| [`to_hex`](#manim.utils.color.core.ManimColor.to_hex \"manim.utils.color.core.ManimColor.to_hex\") | Convert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to a hexadecimal representation of the color. |\n| [`to_hsl`](#manim.utils.color.core.ManimColor.to_hsl \"manim.utils.color.core.ManimColor.to_hsl\") | Convert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to an HSL array. |\n| [`to_hsv`](#manim.utils.color.core.ManimColor.to_hsv \"manim.utils.color.core.ManimColor.to_hsv\") | Convert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to an HSV array. |\n| [`to_int_rgb`](#manim.utils.color.core.ManimColor.to_int_rgb \"manim.utils.color.core.ManimColor.to_int_rgb\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGB array of integers. |\n| [`to_int_rgba`](#manim.utils.color.core.ManimColor.to_int_rgba \"manim.utils.color.core.ManimColor.to_int_rgba\") | Convert the current ManimColor into an RGBA array of integers. |\n| [`to_int_rgba_with_alpha`](#manim.utils.color.core.ManimColor.to_int_rgba_with_alpha \"manim.utils.color.core.ManimColor.to_int_rgba_with_alpha\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of integers. |\n| [`to_integer`](#manim.utils.color.core.ManimColor.to_integer \"manim.utils.color.core.ManimColor.to_integer\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an integer. |\n| [`to_rgb`](#manim.utils.color.core.ManimColor.to_rgb \"manim.utils.color.core.ManimColor.to_rgb\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGB array of floats. |\n| [`to_rgba`](#manim.utils.color.core.ManimColor.to_rgba \"manim.utils.color.core.ManimColor.to_rgba\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of floats. |\n| [`to_rgba_with_alpha`](#manim.utils.color.core.ManimColor.to_rgba_with_alpha \"manim.utils.color.core.ManimColor.to_rgba_with_alpha\") | Convert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of floats. |\n*classmethod* \\_construct\\_from\\_space(*\\_space*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._construct_from_space)[¶](#manim.utils.color.core.ManimColor._construct_from_space \"Link to this definition\")\nThis function is used as a proxy for constructing a color with an internal\nvalue. This can be used by subclasses to hook into the construction of new\nobjects using the internal value format.\nParameters:\n**\\_space** (*ndarray**\\[**tuple**\\[**Any**,* *...**]**,* *dtype**\\[**TypeAliasForwardRef**(**'\\~manim.typing.ManimFloat'**)**]**]* *\\|* *tuple**\\[**float**,* *float**,* *float**]* *\\|* *tuple**\\[**float**,* *float**,* *float**,* *float**]*)\nReturn type:\n*Self*\n*classmethod* \\_from\\_internal(*value*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._from_internal)[¶](#manim.utils.color.core.ManimColor._from_internal \"Link to this definition\")\nThis method is intended to be overwritten by custom color space classes\nwhich are subtypes of [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nThe method constructs a new object of the given class by transforming the value\nin the internal format `[r,g,b,a]` into a format which the constructor of the\ncustom class can understand. Look at [`HSV`](manim.utils.color.core.HSV.html#manim.utils.color.core.HSV \"manim.utils.color.core.HSV\") for an example.\nParameters:\n**value** ([*ManimColorInternal*](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\"))\nReturn type:\n*Self*\n*static* \\_internal\\_from\\_hex\\_string(*hex\\_*, *alpha*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_hex_string)[¶](#manim.utils.color.core.ManimColor._internal_from_hex_string \"Link to this definition\")\nInternal function for converting a hex string into the internal representation\nof a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nWarning\nThis does not accept any prefixes like \\# or similar in front of the hex string.\nThis is just intended for the raw hex part.\n*For internal use only*\nParameters:\n* **hex** – Hex string to be parsed.\n* **alpha** (*float*) – Alpha value used for the color, if the color is only 3 bytes long. Otherwise,\nif the color is 4 bytes long, this parameter will not be used.\n* **hex\\_** (*str*)\nReturns:\nInternal color representation\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\n*static* \\_internal\\_from\\_int\\_rgb(*rgb*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_int_rgb)[¶](#manim.utils.color.core.ManimColor._internal_from_int_rgb \"Link to this definition\")\nInternal function for converting an RGB tuple of integers into the internal\nrepresentation of a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\n*For internal use only*\nParameters:\n* **rgb** ([*RGB\\_Tuple\\_Int*](manim.typing.html#manim.typing.RGB_Tuple_Int \"manim.typing.RGB_Tuple_Int\")) – Integer RGB tuple to be parsed\n* **alpha** (*float*) – Optional alpha value. Default is 1\\.0\\.\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\n*static* \\_internal\\_from\\_int\\_rgba(*rgba*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_int_rgba)[¶](#manim.utils.color.core.ManimColor._internal_from_int_rgba \"Link to this definition\")\nInternal function for converting an RGBA tuple of integers into the internal\nrepresentation of a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\n*For internal use only*\nParameters:\n**rgba** ([*RGBA\\_Tuple\\_Int*](manim.typing.html#manim.typing.RGBA_Tuple_Int \"manim.typing.RGBA_Tuple_Int\")) – Int RGBA tuple to be parsed.\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\n*static* \\_internal\\_from\\_rgb(*rgb*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_rgb)[¶](#manim.utils.color.core.ManimColor._internal_from_rgb \"Link to this definition\")\nInternal function for converting a rgb tuple of floats into the internal\nrepresentation of a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\n*For internal use only*\nParameters:\n* **rgb** ([*RGB\\_Tuple\\_Float*](manim.typing.html#manim.typing.RGB_Tuple_Float \"manim.typing.RGB_Tuple_Float\")) – Float RGB tuple to be parsed.\n* **alpha** (*float*) – Optional alpha value. Default is 1\\.0\\.\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\n*static* \\_internal\\_from\\_rgba(*rgba*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_rgba)[¶](#manim.utils.color.core.ManimColor._internal_from_rgba \"Link to this definition\")\nInternal function for converting an RGBA tuple of floats into the internal\nrepresentation of a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\n*For internal use only*\nParameters:\n**rgba** ([*RGBA\\_Tuple\\_Float*](manim.typing.html#manim.typing.RGBA_Tuple_Float \"manim.typing.RGBA_Tuple_Float\")) – Int RGBA tuple to be parsed.\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\n*static* \\_internal\\_from\\_string(*name*, *alpha*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor._internal_from_string)[¶](#manim.utils.color.core.ManimColor._internal_from_string \"Link to this definition\")\nInternal function for converting a string into the internal representation of\na [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"). This is not used for hex strings: please refer to\n`_internal_from_hex()` for this functionality.\n*For internal use only*\nParameters:\n* **name** (*str*) – The color name to be parsed into a color. Refer to the different color\nmodules in the documentation page to find the corresponding color names.\n* **alpha** (*float*)\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\nRaises:\n**ValueError** – If the color name is not present in Manim.\n*property* \\_internal\\_space*: ndarray\\[tuple\\[Any, ...], dtype\\[TypeAliasForwardRef('\\~manim.typing.ManimFloat')]]*[¶](#manim.utils.color.core.ManimColor._internal_space \"Link to this definition\")\nThis is a readonly property which is a custom representation for color space\noperations. It is used for operators and can be used when implementing a custom\ncolor space.\n*property* \\_internal\\_value*: [ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")*[¶](#manim.utils.color.core.ManimColor._internal_value \"Link to this definition\")\nReturn the internal value of the current Manim color `[r,g,b,a]` float\narray.\nReturns:\nInternal color representation.\nReturn type:\n[ManimColorInternal](manim.typing.html#manim.typing.ManimColorInternal \"manim.typing.ManimColorInternal\")\ncontrasting(*threshold\\=0\\.5*, *light\\=None*, *dark\\=None*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.contrasting)[¶](#manim.utils.color.core.ManimColor.contrasting \"Link to this definition\")\nReturn one of two colors, light or dark (by default white or black),\nthat contrasts with the current color (depending on its luminance).\nThis is typically used to set text in a contrasting color that ensures\nit is readable against a background of the current color.\nParameters:\n* **threshold** (*float*) – The luminance threshold which dictates whether the current color is\nconsidered light or dark (and thus whether to return the dark or\nlight color, respectively). Default is 0\\.5\\.\n* **light** (*Self* *\\|* *None*) – The light color to return if the current color is considered dark.\nDefault is `None`: in this case, pure `WHITE` will be returned.\n* **dark** (*Self* *\\|* *None*) – The dark color to return if the current color is considered light,\nDefault is `None`: in this case, pure `BLACK` will be returned.\nReturns:\nThe contrasting [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\ndarker(*blend\\=0\\.2*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.darker)[¶](#manim.utils.color.core.ManimColor.darker \"Link to this definition\")\nReturn a new color that is darker than the current color, i.e.\ninterpolated with `BLACK`. The opacity is unchanged.\nParameters:\n**blend** (*float*) – The blend ratio for the interpolation, from 0\\.0 (the current color\nunchanged) to 1\\.0 (pure black). Default is 0\\.2, which results in a\nslightly darker color.\nReturns:\nThe darker [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\nSee also\n[`lighter()`](#manim.utils.color.core.ManimColor.lighter \"manim.utils.color.core.ManimColor.lighter\")\n*classmethod* from\\_hex(*hex\\_str*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.from_hex)[¶](#manim.utils.color.core.ManimColor.from_hex \"Link to this definition\")\nCreate a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from a hex string.\nParameters:\n* **hex\\_str** (*str*) – The hex string to be converted. The allowed prefixes for this string are\n`#` and `0x`. Currently, this method only supports 6 nibbles, i.e. only\nstrings in the format `#XXXXXX` or `0xXXXXXX`.\n* **alpha** (*float*) – Alpha value to be used for the hex string. Default is 1\\.0\\.\nReturns:\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") represented by the hex string.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*classmethod* from\\_hsl(*hsl*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.from_hsl)[¶](#manim.utils.color.core.ManimColor.from_hsl \"Link to this definition\")\nCreate a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from an HSL array.\nParameters:\n* **hsl** ([*HSL\\_Array\\_Float*](manim.typing.html#manim.typing.HSL_Array_Float \"manim.typing.HSL_Array_Float\") *\\|* [*HSL\\_Tuple\\_Float*](manim.typing.html#manim.typing.HSL_Tuple_Float \"manim.typing.HSL_Tuple_Float\")) – Any iterable containing 3 floats from 0\\.0 to 1\\.0\\.\n* **alpha** (*float*) – The alpha value to be used. Default is 1\\.0\\.\nReturns:\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") with the corresponding RGB values to the given HSL\narray.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*classmethod* from\\_hsv(*hsv*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.from_hsv)[¶](#manim.utils.color.core.ManimColor.from_hsv \"Link to this definition\")\nCreate a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") from an HSV array.\nParameters:\n* **hsv** ([*HSV\\_Array\\_Float*](manim.typing.html#manim.typing.HSV_Array_Float \"manim.typing.HSV_Array_Float\") *\\|* [*HSV\\_Tuple\\_Float*](manim.typing.html#manim.typing.HSV_Tuple_Float \"manim.typing.HSV_Tuple_Float\")) – Any iterable containing 3 floats from 0\\.0 to 1\\.0\\.\n* **alpha** (*float*) – The alpha value to be used. Default is 1\\.0\\.\nReturns:\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") with the corresponding RGB values to the given HSV\narray.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*classmethod* from\\_rgb(*rgb*, *alpha\\=1\\.0*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.from_rgb)[¶](#manim.utils.color.core.ManimColor.from_rgb \"Link to this definition\")\nCreate a ManimColor from an RGB array. Automagically decides which type it\nis: `int` or `float`.\nWarning\nPlease make sure that your elements are not floats if you want integers. A\n`5.0` will result in the input being interpreted as if it was an RGB float\narray with the value `5.0` and not the integer `5`.\nParameters:\n* **rgb** ([*RGB\\_Array\\_Float*](manim.typing.html#manim.typing.RGB_Array_Float \"manim.typing.RGB_Array_Float\") *\\|* [*RGB\\_Tuple\\_Float*](manim.typing.html#manim.typing.RGB_Tuple_Float \"manim.typing.RGB_Tuple_Float\") *\\|* [*RGB\\_Array\\_Int*](manim.typing.html#manim.typing.RGB_Array_Int \"manim.typing.RGB_Array_Int\") *\\|* [*RGB\\_Tuple\\_Int*](manim.typing.html#manim.typing.RGB_Tuple_Int \"manim.typing.RGB_Tuple_Int\")) – Any iterable of 3 floats or 3 integers.\n* **alpha** (*float*) – Alpha value to be used in the color. Default is 1\\.0\\.\nReturns:\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") which corresponds to the given `rgb`.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*classmethod* from\\_rgba(*rgba*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.from_rgba)[¶](#manim.utils.color.core.ManimColor.from_rgba \"Link to this definition\")\nCreate a ManimColor from an RGBA Array. Automagically decides which type it\nis: `int` or `float`.\nWarning\nPlease make sure that your elements are not floats if you want integers. A\n`5.0` will result in the input being interpreted as if it was a float RGB\narray with the float `5.0` and not the integer `5`.\nParameters:\n**rgba** ([*RGBA\\_Array\\_Float*](manim.typing.html#manim.typing.RGBA_Array_Float \"manim.typing.RGBA_Array_Float\") *\\|* [*RGBA\\_Tuple\\_Float*](manim.typing.html#manim.typing.RGBA_Tuple_Float \"manim.typing.RGBA_Tuple_Float\") *\\|* [*RGBA\\_Array\\_Int*](manim.typing.html#manim.typing.RGBA_Array_Int \"manim.typing.RGBA_Array_Int\") *\\|* [*RGBA\\_Tuple\\_Int*](manim.typing.html#manim.typing.RGBA_Tuple_Int \"manim.typing.RGBA_Tuple_Int\")) – Any iterable of 4 floats or 4 integers.\nReturns:\nThe [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") corresponding to the given `rgba`.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*static* gradient(*colors*, *length*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.gradient)[¶](#manim.utils.color.core.ManimColor.gradient \"Link to this definition\")\nThis method is currently not implemented. Refer to [`color_gradient()`](manim.utils.color.core.html#manim.utils.color.core.color_gradient \"manim.utils.color.core.color_gradient\") for\na working implementation for now.\nParameters:\n* **colors** (*list**\\[*[*ManimColor*](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")*]*)\n* **length** (*int*)\nReturn type:\n[*ManimColor*](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") \\| list\\[[*ManimColor*](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")]\ninterpolate(*other*, *alpha*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.interpolate)[¶](#manim.utils.color.core.ManimColor.interpolate \"Link to this definition\")\nInterpolate between the current and the given [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\"), and return\nthe result.\nParameters:\n* **other** (*Self*) – The other [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to be used for interpolation.\n* **alpha** (*float*) – A point on the line in RGBA colorspace connecting the two colors, i.e. the\ninterpolation point. 0\\.0 corresponds to the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") and\n1\\.0 corresponds to the other [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturns:\nThe interpolated [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\ninto(*class\\_type*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.into)[¶](#manim.utils.color.core.ManimColor.into \"Link to this definition\")\nConvert the current color into a different colorspace given by `class_type`,\nwithout changing the [`_internal_value`](#manim.utils.color.core.ManimColor._internal_value \"manim.utils.color.core.ManimColor._internal_value\").\nParameters:\n**class\\_type** (*type**\\[*[*ManimColorT*](manim.utils.color.core.html#manim.utils.color.core.ManimColorT \"manim.utils.color.core.ManimColorT\")*]*) – The class that is used for conversion. It must be a subclass of\n[`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") which respects the specification HSV, RGBA, …\nReturns:\nA new color object of type `class_type` and the same\n[`_internal_value`](#manim.utils.color.core.ManimColor._internal_value \"manim.utils.color.core.ManimColor._internal_value\") as the original color.\nReturn type:\n[ManimColorT](manim.utils.color.core.html#manim.utils.color.core.ManimColorT \"manim.utils.color.core.ManimColorT\")\ninvert(*with\\_alpha\\=False*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.invert)[¶](#manim.utils.color.core.ManimColor.invert \"Link to this definition\")\nReturn a new, linearly inverted version of this [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") (no\ninplace changes).\nParameters:\n**with\\_alpha** (*bool*) – If `True`, the alpha value will be inverted too. Default is `False`.\nNote\nSetting `with_alpha=True` can result in unintended behavior where\nobjects are not displayed because their new alpha value is suddenly 0 or\nvery low.\nReturns:\nThe linearly inverted [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\nlighter(*blend\\=0\\.2*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.lighter)[¶](#manim.utils.color.core.ManimColor.lighter \"Link to this definition\")\nReturn a new color that is lighter than the current color, i.e.\ninterpolated with `WHITE`. The opacity is unchanged.\nParameters:\n**blend** (*float*) – The blend ratio for the interpolation, from 0\\.0 (the current color\nunchanged) to 1\\.0 (pure white). Default is 0\\.2, which results in a\nslightly lighter color.\nReturns:\nThe lighter [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\").\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\nSee also\n[`darker()`](#manim.utils.color.core.ManimColor.darker \"manim.utils.color.core.ManimColor.darker\")\nopacity(*opacity*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.opacity)[¶](#manim.utils.color.core.ManimColor.opacity \"Link to this definition\")\nCreate a new [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") with the given opacity and the same color\nvalues as before.\nParameters:\n**opacity** (*float*) – The new opacity value to be used.\nReturns:\nThe new [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") with the same color values and the new opacity.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\n*classmethod* parse(*color: [ParsableManimColor](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") \\| None*, *alpha: float \\= 1\\.0*) → Self[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.parse)[¶](#manim.utils.color.core.ManimColor.parse \"Link to this definition\")\n*classmethod* parse(*color: Sequence\\[[ParsableManimColor](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")]*, *alpha: float \\= 1\\.0*) → list\\[Self]\nParse one color as a [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") or a sequence of colors as a list of\n[`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")’s.\nParameters:\n* **color** – The color or list of colors to parse. Note that this function can not accept\ntuples: it will assume that you mean `Sequence[ParsableManimColor]` and will\nreturn a `list[ManimColor]`.\n* **alpha** – The alpha (opacity) value to use for the passed color(s).\nReturns:\nEither a list of colors or a singular color, depending on the input.\nReturn type:\n[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") \\| list\\[[ManimColor](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")]\nto\\_hex(*with\\_alpha\\=False*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_hex)[¶](#manim.utils.color.core.ManimColor.to_hex \"Link to this definition\")\nConvert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to a hexadecimal representation of the color.\nParameters:\n**with\\_alpha** (*bool*) – If `True`, append 2 extra characters to the hex string which represent the\nalpha value of the color between 0 and 255\\. Default is `False`.\nReturns:\nA hex string starting with a `#`, with either 6 or 8 nibbles depending on\nthe `with_alpha` parameter. By default, it has 6 nibbles, i.e. `#XXXXXX`.\nReturn type:\nstr\nto\\_hsl()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_hsl)[¶](#manim.utils.color.core.ManimColor.to_hsl \"Link to this definition\")\nConvert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to an HSL array.\nNote\nBe careful: this returns an array in the form `[h, s, l]`, where the\nelements are floats. This might be confusing, because RGB can also be an array\nof floats. You might want to annotate the usage of this function in your code\nby typing your HSL array variables as `HSL_Array_Float` in order to\ndifferentiate them from RGB arrays.\nReturns:\nAn HSL array of 3 floats from 0\\.0 to 1\\.0\\.\nReturn type:\n[HSL\\_Array\\_Float](manim.typing.html#manim.typing.HSL_Array_Float \"manim.typing.HSL_Array_Float\")\nto\\_hsv()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_hsv)[¶](#manim.utils.color.core.ManimColor.to_hsv \"Link to this definition\")\nConvert the [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") to an HSV array.\nNote\nBe careful: this returns an array in the form `[h, s, v]`, where the\nelements are floats. This might be confusing, because RGB can also be an array\nof floats. You might want to annotate the usage of this function in your code\nby typing your HSV array variables as `HSV_Array_Float` in order to\ndifferentiate them from RGB arrays.\nReturns:\nAn HSV array of 3 floats from 0\\.0 to 1\\.0\\.\nReturn type:\n[HSV\\_Array\\_Float](manim.typing.html#manim.typing.HSV_Array_Float \"manim.typing.HSV_Array_Float\")\nto\\_int\\_rgb()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_int_rgb)[¶](#manim.utils.color.core.ManimColor.to_int_rgb \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGB array of integers.\nReturns:\nRGB array of 3 integers from 0 to 255\\.\nReturn type:\n[RGB\\_Array\\_Int](manim.typing.html#manim.typing.RGB_Array_Int \"manim.typing.RGB_Array_Int\")\nto\\_int\\_rgba()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_int_rgba)[¶](#manim.utils.color.core.ManimColor.to_int_rgba \"Link to this definition\")\nConvert the current ManimColor into an RGBA array of integers.\nReturns:\nRGBA array of 4 integers from 0 to 255\\.\nReturn type:\n[RGBA\\_Array\\_Int](manim.typing.html#manim.typing.RGBA_Array_Int \"manim.typing.RGBA_Array_Int\")\nto\\_int\\_rgba\\_with\\_alpha(*alpha*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_int_rgba_with_alpha)[¶](#manim.utils.color.core.ManimColor.to_int_rgba_with_alpha \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of integers. This\nis similar to [`to_int_rgba()`](#manim.utils.color.core.ManimColor.to_int_rgba \"manim.utils.color.core.ManimColor.to_int_rgba\"), but you can change the alpha value.\nParameters:\n**alpha** (*float*) – Alpha value to be used for the return value. Pass a float between 0\\.0 and\n1\\.0: it will automatically be scaled to an integer between 0 and 255\\.\nReturns:\nRGBA array of 4 integers from 0 to 255\\.\nReturn type:\n[RGBA\\_Array\\_Int](manim.typing.html#manim.typing.RGBA_Array_Int \"manim.typing.RGBA_Array_Int\")\nto\\_integer()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_integer)[¶](#manim.utils.color.core.ManimColor.to_integer \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an integer.\nWarning\nThis will return only the RGB part of the color.\nReturns:\nInteger representation of the color.\nReturn type:\nint\nto\\_rgb()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_rgb)[¶](#manim.utils.color.core.ManimColor.to_rgb \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGB array of floats.\nReturns:\nRGB array of 3 floats from 0\\.0 to 1\\.0\\.\nReturn type:\n[RGB\\_Array\\_Float](manim.typing.html#manim.typing.RGB_Array_Float \"manim.typing.RGB_Array_Float\")\nto\\_rgba()[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_rgba)[¶](#manim.utils.color.core.ManimColor.to_rgba \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of floats.\nReturns:\nRGBA array of 4 floats from 0\\.0 to 1\\.0\\.\nReturn type:\n[RGBA\\_Array\\_Float](manim.typing.html#manim.typing.RGBA_Array_Float \"manim.typing.RGBA_Array_Float\")\nto\\_rgba\\_with\\_alpha(*alpha*)[\\[source]](../_modules/manim/utils/color/core.html#ManimColor.to_rgba_with_alpha)[¶](#manim.utils.color.core.ManimColor.to_rgba_with_alpha \"Link to this definition\")\nConvert the current [`ManimColor`](#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\") into an RGBA array of floats. This is\nsimilar to [`to_rgba()`](#manim.utils.color.core.ManimColor.to_rgba \"manim.utils.color.core.ManimColor.to_rgba\"), but you can change the alpha value.\nParameters:\n**alpha** (*float*) – Alpha value to be used in the return value.\nReturns:\nRGBA array of 4 floats from 0\\.0 to 1\\.0\\.\nReturn type:\n[RGBA\\_Array\\_Float](manim.typing.html#manim.typing.RGBA_Array_Float \"manim.typing.RGBA_Array_Float\")",
  "scraped_at": "2025-06-24T18:35:01.383450",
  "content_length": 35619,
  "domain": "docs.manim.community",
  "word_count": 2958,
  "inspection_status": "pending",
  "filename": "ManimColor - Manim Community v0.19.0_20250624_183501.json",
  "saved_at": "2025-06-24T18:35:01.383652"
}