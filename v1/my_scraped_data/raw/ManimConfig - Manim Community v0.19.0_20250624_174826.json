{
  "doc_id": "b00e519fae236b698821096f581cdcca",
  "url": "https://docs.manim.community/en/latest/reference/manim._config.utils.ManimConfig.html",
  "title": "ManimConfig - Manim Community v0.19.0",
  "content": "ManimConfig[¶](#manimconfig \"Link to this heading\")\n===================================================\nQualified name: `manim.\\_config.utils.ManimConfig`\n*class* ManimConfig[\\[source]](../_modules/manim/_config/utils.html#ManimConfig)[¶](#manim._config.utils.ManimConfig \"Link to this definition\")\nBases: `MutableMapping`\nDict\\-like class storing all config options.\nThe global `config` object is an instance of this class, and acts as a\nsingle source of truth for all of the library’s customizable behavior.\nThe global `config` object is capable of digesting different types of\nsources and converting them into a uniform interface. These sources are\n(in ascending order of precedence): configuration files, command line\narguments, and programmatic changes. Regardless of how the user chooses to\nset a config option, she can access its current value using\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\")’s attributes and properties.\nNotes\nEach config option is implemented as a property of this class.\nEach config option can be set via a config file, using the full name of the\nproperty. If a config option has an associated CLI flag, then the flag is\nequal to the full name of the property. Those that admit an alternative\nflag or no flag at all are documented in the individual property’s\ndocstring.\nExamples\nWe use a copy of the global configuration object in the following\nexamples for the sake of demonstration; you can skip these lines\nand just import `config` directly if you actually want to modify\nthe configuration:\n```\n>>> from manim import config as global_config\n>>> config = global_config.copy()\n```\nEach config option allows for dict syntax and attribute syntax. For\nexample, the following two lines are equivalent,\n```\n>>> from manim import WHITE\n>>> config.background_color = WHITE\n>>> config[\"background_color\"] = WHITE\n```\nThe former is preferred; the latter is provided mostly for backwards\ncompatibility.\nThe config options are designed to keep internal consistency. For example,\nsetting `frame_y_radius` will affect `frame_height`:\n```\n>>> config.frame_height\n8.0\n>>> config.frame_y_radius = 5.0\n>>> config.frame_height\n10.0\n```\nThere are many ways of interacting with config options. Take for example\nthe config option `background_color`. There are three ways to change it:\nvia a config file, via CLI flags, or programmatically.\nTo set the background color via a config file, save the following\n`manim.cfg` file with the following contents.\n```\n[CLI]\nbackground_color = WHITE\n```\nIn order to have this `.cfg` file apply to a manim scene, it needs to be\nplaced in the same directory as the script,\n```\nproject/\n├─scene.py\n└─manim.cfg\n```\nNow, when the user executes\n```\nmanim scene.py\n```\nthe background of the scene will be set to `WHITE`. This applies regardless\nof where the manim command is invoked from.\nCommand line arguments override `.cfg` files. In the previous example,\nexecuting\n```\nmanim scene.py -c BLUE\n```\nwill set the background color to BLUE, regardless of the contents of\n`manim.cfg`.\nFinally, any programmatic changes made within the scene script itself will\noverride the command line arguments. For example, if `scene.py` contains\nthe following\n```\nfrom manim import *\nconfig.background_color = RED\nclass MyScene(Scene): ...\n```\nthe background color will be set to RED, regardless of the contents of\n`manim.cfg` or the CLI arguments used when invoking manim.\nMethods\n| [`copy`](#manim._config.utils.ManimConfig.copy \"manim._config.utils.ManimConfig.copy\") | Deepcopy the contents of this ManimConfig. |\n| --- | --- |\n| [`digest_args`](#manim._config.utils.ManimConfig.digest_args \"manim._config.utils.ManimConfig.digest_args\") | Process the config options present in CLI arguments. |\n| [`digest_file`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\") | Process the config options present in a `.cfg` file. |\n| [`digest_parser`](#manim._config.utils.ManimConfig.digest_parser \"manim._config.utils.ManimConfig.digest_parser\") | Process the config options present in a `ConfigParser` object. |\n| [`get_dir`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\") | Resolve a config option that stores a directory. |\n| `resolve_movie_file_extension` |  |\n| [`update`](#manim._config.utils.ManimConfig.update \"manim._config.utils.ManimConfig.update\") | Digest the options found in another [`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\") or in a dict. |\nAttributes\n| [`aspect_ratio`](#manim._config.utils.ManimConfig.aspect_ratio \"manim._config.utils.ManimConfig.aspect_ratio\") | Aspect ratio (width / height) in pixels (\\-\\-resolution, \\-r). |\n| --- | --- |\n| [`assets_dir`](#manim._config.utils.ManimConfig.assets_dir \"manim._config.utils.ManimConfig.assets_dir\") | Directory to locate video assets (no flag). |\n| [`background_color`](#manim._config.utils.ManimConfig.background_color \"manim._config.utils.ManimConfig.background_color\") | Background color of the scene (\\-c). |\n| [`background_opacity`](#manim._config.utils.ManimConfig.background_opacity \"manim._config.utils.ManimConfig.background_opacity\") | A number between 0\\.0 (fully transparent) and 1\\.0 (fully opaque). |\n| [`bottom`](#manim._config.utils.ManimConfig.bottom \"manim._config.utils.ManimConfig.bottom\") | Coordinate at the center bottom of the frame. |\n| [`custom_folders`](#manim._config.utils.ManimConfig.custom_folders \"manim._config.utils.ManimConfig.custom_folders\") | Whether to use custom folder output. |\n| [`disable_caching`](#manim._config.utils.ManimConfig.disable_caching \"manim._config.utils.ManimConfig.disable_caching\") | Whether to use scene caching. |\n| [`disable_caching_warning`](#manim._config.utils.ManimConfig.disable_caching_warning \"manim._config.utils.ManimConfig.disable_caching_warning\") | Whether a warning is raised if there are too much submobjects to hash. |\n| [`dry_run`](#manim._config.utils.ManimConfig.dry_run \"manim._config.utils.ManimConfig.dry_run\") | Whether dry run is enabled. |\n| [`enable_gui`](#manim._config.utils.ManimConfig.enable_gui \"manim._config.utils.ManimConfig.enable_gui\") | Enable GUI interaction. |\n| [`enable_wireframe`](#manim._config.utils.ManimConfig.enable_wireframe \"manim._config.utils.ManimConfig.enable_wireframe\") | Whether to enable wireframe debugging mode in opengl. |\n| [`ffmpeg_loglevel`](#manim._config.utils.ManimConfig.ffmpeg_loglevel \"manim._config.utils.ManimConfig.ffmpeg_loglevel\") | Verbosity level of ffmpeg (no flag). |\n| [`flush_cache`](#manim._config.utils.ManimConfig.flush_cache \"manim._config.utils.ManimConfig.flush_cache\") | Whether to delete all the cached partial movie files. |\n| [`force_window`](#manim._config.utils.ManimConfig.force_window \"manim._config.utils.ManimConfig.force_window\") | Whether to force window when using the opengl renderer. |\n| [`format`](#manim._config.utils.ManimConfig.format \"manim._config.utils.ManimConfig.format\") | File format; \"png\", \"gif\", \"mp4\", \"webm\" or \"mov\". |\n| [`frame_height`](#manim._config.utils.ManimConfig.frame_height \"manim._config.utils.ManimConfig.frame_height\") | Frame height in logical units (no flag). |\n| [`frame_rate`](#manim._config.utils.ManimConfig.frame_rate \"manim._config.utils.ManimConfig.frame_rate\") | Frame rate in frames per second. |\n| [`frame_size`](#manim._config.utils.ManimConfig.frame_size \"manim._config.utils.ManimConfig.frame_size\") | Tuple with (pixel width, pixel height) (no flag). |\n| [`frame_width`](#manim._config.utils.ManimConfig.frame_width \"manim._config.utils.ManimConfig.frame_width\") | Frame width in logical units (no flag). |\n| [`frame_x_radius`](#manim._config.utils.ManimConfig.frame_x_radius \"manim._config.utils.ManimConfig.frame_x_radius\") | Half the frame width (no flag). |\n| [`frame_y_radius`](#manim._config.utils.ManimConfig.frame_y_radius \"manim._config.utils.ManimConfig.frame_y_radius\") | Half the frame height (no flag). |\n| [`from_animation_number`](#manim._config.utils.ManimConfig.from_animation_number \"manim._config.utils.ManimConfig.from_animation_number\") | Start rendering animations at this number (\\-n). |\n| [`fullscreen`](#manim._config.utils.ManimConfig.fullscreen \"manim._config.utils.ManimConfig.fullscreen\") | Expand the window to its maximum possible size. |\n| [`gui_location`](#manim._config.utils.ManimConfig.gui_location \"manim._config.utils.ManimConfig.gui_location\") | Location parameters for the GUI window (e.g., screen coordinates or layout settings). |\n| [`images_dir`](#manim._config.utils.ManimConfig.images_dir \"manim._config.utils.ManimConfig.images_dir\") | Directory to place images (no flag). |\n| [`input_file`](#manim._config.utils.ManimConfig.input_file \"manim._config.utils.ManimConfig.input_file\") | Input file name. |\n| [`left_side`](#manim._config.utils.ManimConfig.left_side \"manim._config.utils.ManimConfig.left_side\") | Coordinate at the middle left of the frame. |\n| [`log_dir`](#manim._config.utils.ManimConfig.log_dir \"manim._config.utils.ManimConfig.log_dir\") | Directory to place logs. |\n| [`log_to_file`](#manim._config.utils.ManimConfig.log_to_file \"manim._config.utils.ManimConfig.log_to_file\") | Whether to save logs to a file. |\n| [`max_files_cached`](#manim._config.utils.ManimConfig.max_files_cached \"manim._config.utils.ManimConfig.max_files_cached\") | Maximum number of files cached. |\n| [`media_dir`](#manim._config.utils.ManimConfig.media_dir \"manim._config.utils.ManimConfig.media_dir\") | Main output directory. |\n| [`media_embed`](#manim._config.utils.ManimConfig.media_embed \"manim._config.utils.ManimConfig.media_embed\") | Whether to embed videos in Jupyter notebook. |\n| [`media_width`](#manim._config.utils.ManimConfig.media_width \"manim._config.utils.ManimConfig.media_width\") | Media width in Jupyter notebook. |\n| [`movie_file_extension`](#manim._config.utils.ManimConfig.movie_file_extension \"manim._config.utils.ManimConfig.movie_file_extension\") | Either .mp4, .webm or .mov. |\n| [`no_latex_cleanup`](#manim._config.utils.ManimConfig.no_latex_cleanup \"manim._config.utils.ManimConfig.no_latex_cleanup\") | Prevents deletion of .aux, .dvi, and .log files produced by Tex and MathTex. |\n| [`notify_outdated_version`](#manim._config.utils.ManimConfig.notify_outdated_version \"manim._config.utils.ManimConfig.notify_outdated_version\") | Whether to notify if there is a version update available. |\n| [`output_file`](#manim._config.utils.ManimConfig.output_file \"manim._config.utils.ManimConfig.output_file\") | Output file name (\\-o). |\n| [`partial_movie_dir`](#manim._config.utils.ManimConfig.partial_movie_dir \"manim._config.utils.ManimConfig.partial_movie_dir\") | Directory to place partial movie files (no flag). |\n| [`pixel_height`](#manim._config.utils.ManimConfig.pixel_height \"manim._config.utils.ManimConfig.pixel_height\") | Frame height in pixels (\\-\\-resolution, \\-r). |\n| [`pixel_width`](#manim._config.utils.ManimConfig.pixel_width \"manim._config.utils.ManimConfig.pixel_width\") | Frame width in pixels (\\-\\-resolution, \\-r). |\n| [`plugins`](#manim._config.utils.ManimConfig.plugins \"manim._config.utils.ManimConfig.plugins\") | List of plugins to enable. |\n| [`preview`](#manim._config.utils.ManimConfig.preview \"manim._config.utils.ManimConfig.preview\") | Whether to play the rendered movie (\\-p). |\n| `preview_command` |  |\n| [`progress_bar`](#manim._config.utils.ManimConfig.progress_bar \"manim._config.utils.ManimConfig.progress_bar\") | Whether to show progress bars while rendering animations. |\n| [`quality`](#manim._config.utils.ManimConfig.quality \"manim._config.utils.ManimConfig.quality\") | Video quality (\\-q). |\n| [`renderer`](#manim._config.utils.ManimConfig.renderer \"manim._config.utils.ManimConfig.renderer\") | The currently active renderer. |\n| [`right_side`](#manim._config.utils.ManimConfig.right_side \"manim._config.utils.ManimConfig.right_side\") | Coordinate at the middle right of the frame. |\n| [`save_as_gif`](#manim._config.utils.ManimConfig.save_as_gif \"manim._config.utils.ManimConfig.save_as_gif\") | Whether to save the rendered scene in .gif format (\\-i). |\n| [`save_last_frame`](#manim._config.utils.ManimConfig.save_last_frame \"manim._config.utils.ManimConfig.save_last_frame\") | Whether to save the last frame of the scene as an image file (\\-s). |\n| [`save_pngs`](#manim._config.utils.ManimConfig.save_pngs \"manim._config.utils.ManimConfig.save_pngs\") | Whether to save all frames in the scene as images files (\\-g). |\n| [`save_sections`](#manim._config.utils.ManimConfig.save_sections \"manim._config.utils.ManimConfig.save_sections\") | Whether to save single videos for each section in addition to the movie file. |\n| [`scene_names`](#manim._config.utils.ManimConfig.scene_names \"manim._config.utils.ManimConfig.scene_names\") | Scenes to play from file. |\n| [`sections_dir`](#manim._config.utils.ManimConfig.sections_dir \"manim._config.utils.ManimConfig.sections_dir\") | Directory to place section videos (no flag). |\n| [`show_in_file_browser`](#manim._config.utils.ManimConfig.show_in_file_browser \"manim._config.utils.ManimConfig.show_in_file_browser\") | Whether to show the output file in the file browser (\\-f). |\n| [`tex_dir`](#manim._config.utils.ManimConfig.tex_dir \"manim._config.utils.ManimConfig.tex_dir\") | Directory to place tex (no flag). |\n| [`tex_template`](#manim._config.utils.ManimConfig.tex_template \"manim._config.utils.ManimConfig.tex_template\") | Template used when rendering Tex. |\n| [`tex_template_file`](#manim._config.utils.ManimConfig.tex_template_file \"manim._config.utils.ManimConfig.tex_template_file\") | File to read Tex template from (no flag). |\n| [`text_dir`](#manim._config.utils.ManimConfig.text_dir \"manim._config.utils.ManimConfig.text_dir\") | Directory to place text (no flag). |\n| [`top`](#manim._config.utils.ManimConfig.top \"manim._config.utils.ManimConfig.top\") | Coordinate at the center top of the frame. |\n| [`transparent`](#manim._config.utils.ManimConfig.transparent \"manim._config.utils.ManimConfig.transparent\") | Whether the background opacity is less than 1\\.0 (\\-t). |\n| [`upto_animation_number`](#manim._config.utils.ManimConfig.upto_animation_number \"manim._config.utils.ManimConfig.upto_animation_number\") | Stop rendering animations at this number. |\n| [`use_projection_fill_shaders`](#manim._config.utils.ManimConfig.use_projection_fill_shaders \"manim._config.utils.ManimConfig.use_projection_fill_shaders\") | Use shaders for OpenGLVMobject fill which are compatible with transformation matrices. |\n| [`use_projection_stroke_shaders`](#manim._config.utils.ManimConfig.use_projection_stroke_shaders \"manim._config.utils.ManimConfig.use_projection_stroke_shaders\") | Use shaders for OpenGLVMobject stroke which are compatible with transformation matrices. |\n| [`verbosity`](#manim._config.utils.ManimConfig.verbosity \"manim._config.utils.ManimConfig.verbosity\") | Logger verbosity; \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", or \"CRITICAL\" (\\-v). |\n| [`video_dir`](#manim._config.utils.ManimConfig.video_dir \"manim._config.utils.ManimConfig.video_dir\") | Directory to place videos (no flag). |\n| [`window_monitor`](#manim._config.utils.ManimConfig.window_monitor \"manim._config.utils.ManimConfig.window_monitor\") | The monitor on which the scene will be rendered. |\n| [`window_position`](#manim._config.utils.ManimConfig.window_position \"manim._config.utils.ManimConfig.window_position\") | Set the position of preview window. |\n| [`window_size`](#manim._config.utils.ManimConfig.window_size \"manim._config.utils.ManimConfig.window_size\") | The size of the opengl window. |\n| [`write_all`](#manim._config.utils.ManimConfig.write_all \"manim._config.utils.ManimConfig.write_all\") | Whether to render all scenes in the input file (\\-a). |\n| [`write_to_movie`](#manim._config.utils.ManimConfig.write_to_movie \"manim._config.utils.ManimConfig.write_to_movie\") | Whether to render the scene to a movie file (\\-w). |\n| [`zero_pad`](#manim._config.utils.ManimConfig.zero_pad \"manim._config.utils.ManimConfig.zero_pad\") | PNG zero padding. |\n\\_set\\_between(*key*, *val*, *lo*, *hi*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_between)[¶](#manim._config.utils.ManimConfig._set_between \"Link to this definition\")\nSet `key` to `val` if lo \\<\\= val \\<\\= hi.\nParameters:\n* **key** (*str*)\n* **val** (*float*)\n* **lo** (*float*)\n* **hi** (*float*)\nReturn type:\nNone\n\\_set\\_boolean(*key*, *val*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_boolean)[¶](#manim._config.utils.ManimConfig._set_boolean \"Link to this definition\")\nSet `key` to `val` if `val` is Boolean.\nParameters:\n* **key** (*str*)\n* **val** (*Any*)\nReturn type:\nNone\n\\_set\\_from\\_enum(*key*, *enum\\_value*, *enum\\_class*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_from_enum)[¶](#manim._config.utils.ManimConfig._set_from_enum \"Link to this definition\")\nSet `key` to the enum object with value `enum_value` in the given\n`enum_class`.\nTests:\n```\n>>> from enum import Enum\n>>> class Fruit(Enum):\n...     APPLE = 1\n...     BANANA = 2\n...     CANTALOUPE = 3\n>>> test_config = ManimConfig()\n>>> test_config._set_from_enum(\"fruit\", 1, Fruit)\n>>> test_config._d['fruit']\n<Fruit.APPLE: 1>\n>>> test_config._set_from_enum(\"fruit\", Fruit.BANANA, Fruit)\n>>> test_config._d['fruit']\n<Fruit.BANANA: 2>\n>>> test_config._set_from_enum(\"fruit\", 42, Fruit)\nTraceback (most recent call last):\n...\nValueError: 42 is not a valid Fruit\n```\nParameters:\n* **key** (*str*)\n* **enum\\_value** (*Any*)\n* **enum\\_class** (*EnumMeta*)\nReturn type:\nNone\n\\_set\\_from\\_list(*key*, *val*, *values*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_from_list)[¶](#manim._config.utils.ManimConfig._set_from_list \"Link to this definition\")\nSet `key` to `val` if `val` is contained in `values`.\nParameters:\n* **key** (*str*)\n* **val** (*Any*)\n* **values** (*list**\\[**Any**]*)\nReturn type:\nNone\n\\_set\\_int\\_between(*key*, *val*, *lo*, *hi*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_int_between)[¶](#manim._config.utils.ManimConfig._set_int_between \"Link to this definition\")\nSet `key` to `val` if lo \\<\\= val \\<\\= hi.\nParameters:\n* **key** (*str*)\n* **val** (*int*)\n* **lo** (*int*)\n* **hi** (*int*)\nReturn type:\nNone\n\\_set\\_pos\\_number(*key*, *val*, *allow\\_inf*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_pos_number)[¶](#manim._config.utils.ManimConfig._set_pos_number \"Link to this definition\")\nSet `key` to `val` if `val` is a positive integer.\nParameters:\n* **key** (*str*)\n* **val** (*int*)\n* **allow\\_inf** (*bool*)\nReturn type:\nNone\n\\_set\\_str(*key*, *val*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig._set_str)[¶](#manim._config.utils.ManimConfig._set_str \"Link to this definition\")\nSet `key` to `val` if `val` is a string.\nParameters:\n* **key** (*str*)\n* **val** (*Any*)\nReturn type:\nNone\n*property* aspect\\_ratio*: int*[¶](#manim._config.utils.ManimConfig.aspect_ratio \"Link to this definition\")\nAspect ratio (width / height) in pixels (–resolution, \\-r).\n*property* assets\\_dir*: str*[¶](#manim._config.utils.ManimConfig.assets_dir \"Link to this definition\")\nDirectory to locate video assets (no flag).\n*property* background\\_color*: [ManimColor](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")*[¶](#manim._config.utils.ManimConfig.background_color \"Link to this definition\")\nBackground color of the scene (\\-c).\n*property* background\\_opacity*: float*[¶](#manim._config.utils.ManimConfig.background_opacity \"Link to this definition\")\nA number between 0\\.0 (fully transparent) and 1\\.0 (fully opaque).\n*property* bottom*: [Vector3D](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")*[¶](#manim._config.utils.ManimConfig.bottom \"Link to this definition\")\nCoordinate at the center bottom of the frame.\ncopy()[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.copy)[¶](#manim._config.utils.ManimConfig.copy \"Link to this definition\")\nDeepcopy the contents of this ManimConfig.\nReturns:\nA copy of this object containing no shared references.\nReturn type:\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\")\nSee also\n`tempconfig()`\nNotes\nThis is the main mechanism behind `tempconfig()`.\n*property* custom\\_folders*: str*[¶](#manim._config.utils.ManimConfig.custom_folders \"Link to this definition\")\nWhether to use custom folder output.\ndigest\\_args(*args*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.digest_args)[¶](#manim._config.utils.ManimConfig.digest_args \"Link to this definition\")\nProcess the config options present in CLI arguments.\nParameters:\n**args** (*argparse.Namespace*) – An object returned by `main_utils.parse_args()`.\nReturns:\n**self** – This object, after processing the contents of `parser`.\nReturn type:\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\")\nSee also\n`main_utils.parse_args()`, [`digest_parser()`](#manim._config.utils.ManimConfig.digest_parser \"manim._config.utils.ManimConfig.digest_parser\"),\n[`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\")\nNotes\nIf `args.config_file` is a non\\-empty string, `ManimConfig` tries to digest the\ncontents of said file with [`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\") before\ndigesting any other CLI arguments.\ndigest\\_file(*filename*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.digest_file)[¶](#manim._config.utils.ManimConfig.digest_file \"Link to this definition\")\nProcess the config options present in a `.cfg` file.\nThis method processes a single `.cfg` file, whereas\n[`digest_parser()`](#manim._config.utils.ManimConfig.digest_parser \"manim._config.utils.ManimConfig.digest_parser\") can process arbitrary parsers, built\nperhaps from multiple `.cfg` files.\nParameters:\n**filename** ([*StrPath*](manim.typing.html#manim.typing.StrPath \"manim.typing.StrPath\")) – Path to the `.cfg` file.\nReturns:\n**self** – This object, after processing the contents of `filename`.\nReturn type:\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\")\nSee also\n[`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\"), [`digest_args()`](#manim._config.utils.ManimConfig.digest_args \"manim._config.utils.ManimConfig.digest_args\"), [`make_config_parser()`](manim._config.utils.html#manim._config.utils.make_config_parser \"manim._config.utils.make_config_parser\")\nNotes\nIf there are multiple `.cfg` files to process, it is always more\nefficient to parse them into a single `ConfigParser` object\nfirst and digesting them with one call to\n[`digest_parser()`](#manim._config.utils.ManimConfig.digest_parser \"manim._config.utils.ManimConfig.digest_parser\"), instead of calling this method\nmultiple times.\ndigest\\_parser(*parser*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.digest_parser)[¶](#manim._config.utils.ManimConfig.digest_parser \"Link to this definition\")\nProcess the config options present in a `ConfigParser` object.\nThis method processes arbitrary parsers, not only those read from a\nsingle file, whereas [`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\") can only process one\nfile at a time.\nParameters:\n**parser** (*configparser.ConfigParser*) – An object reflecting the contents of one or many `.cfg` files. In\nparticular, it may reflect the contents of multiple files that have\nbeen parsed in a cascading fashion.\nReturns:\n**self** – This object, after processing the contents of `parser`.\nReturn type:\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\")\nSee also\n[`make_config_parser()`](manim._config.utils.html#manim._config.utils.make_config_parser \"manim._config.utils.make_config_parser\"), [`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\"), [`digest_args()`](#manim._config.utils.ManimConfig.digest_args \"manim._config.utils.ManimConfig.digest_args\")\nNotes\nIf there are multiple `.cfg` files to process, it is always more\nefficient to parse them into a single `ConfigParser` object\nfirst, and then call this function once (instead of calling\n[`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\") multiple times).\nExamples\nTo digest the config options set in two files, first create a\nConfigParser and parse both files and then digest the parser:\n```\nparser = configparser.ConfigParser()\nparser.read([file1, file2])\nconfig = ManimConfig().digest_parser(parser)\n```\nIn fact, the global `config` object is initialized like so:\n```\nparser = make_config_parser()\nconfig = ManimConfig().digest_parser(parser)\n```\n*property* disable\\_caching*: bool*[¶](#manim._config.utils.ManimConfig.disable_caching \"Link to this definition\")\nWhether to use scene caching.\n*property* disable\\_caching\\_warning*: bool*[¶](#manim._config.utils.ManimConfig.disable_caching_warning \"Link to this definition\")\nWhether a warning is raised if there are too much submobjects to hash.\n*property* dry\\_run*: bool*[¶](#manim._config.utils.ManimConfig.dry_run \"Link to this definition\")\nWhether dry run is enabled.\n*property* enable\\_gui*: bool*[¶](#manim._config.utils.ManimConfig.enable_gui \"Link to this definition\")\nEnable GUI interaction.\n*property* enable\\_wireframe*: bool*[¶](#manim._config.utils.ManimConfig.enable_wireframe \"Link to this definition\")\nWhether to enable wireframe debugging mode in opengl.\n*property* ffmpeg\\_loglevel*: str*[¶](#manim._config.utils.ManimConfig.ffmpeg_loglevel \"Link to this definition\")\nVerbosity level of ffmpeg (no flag).\n*property* flush\\_cache*: bool*[¶](#manim._config.utils.ManimConfig.flush_cache \"Link to this definition\")\nWhether to delete all the cached partial movie files.\n*property* force\\_window*: bool*[¶](#manim._config.utils.ManimConfig.force_window \"Link to this definition\")\nWhether to force window when using the opengl renderer.\n*property* format*: str*[¶](#manim._config.utils.ManimConfig.format \"Link to this definition\")\nFile format; “png”, “gif”, “mp4”, “webm” or “mov”.\n*property* frame\\_height*: float*[¶](#manim._config.utils.ManimConfig.frame_height \"Link to this definition\")\nFrame height in logical units (no flag).\n*property* frame\\_rate*: float*[¶](#manim._config.utils.ManimConfig.frame_rate \"Link to this definition\")\nFrame rate in frames per second.\n*property* frame\\_size*: tuple\\[int, int]*[¶](#manim._config.utils.ManimConfig.frame_size \"Link to this definition\")\nTuple with (pixel width, pixel height) (no flag).\n*property* frame\\_width*: float*[¶](#manim._config.utils.ManimConfig.frame_width \"Link to this definition\")\nFrame width in logical units (no flag).\n*property* frame\\_x\\_radius*: float*[¶](#manim._config.utils.ManimConfig.frame_x_radius \"Link to this definition\")\nHalf the frame width (no flag).\n*property* frame\\_y\\_radius*: float*[¶](#manim._config.utils.ManimConfig.frame_y_radius \"Link to this definition\")\nHalf the frame height (no flag).\n*property* from\\_animation\\_number*: int*[¶](#manim._config.utils.ManimConfig.from_animation_number \"Link to this definition\")\nStart rendering animations at this number (\\-n).\n*property* fullscreen*: bool*[¶](#manim._config.utils.ManimConfig.fullscreen \"Link to this definition\")\nExpand the window to its maximum possible size.\nget\\_dir(*key*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.get_dir)[¶](#manim._config.utils.ManimConfig.get_dir \"Link to this definition\")\nResolve a config option that stores a directory.\nConfig options that store directories may depend on one another. This\nmethod is used to provide the actual directory to the end user.\nParameters:\n* **key** (*str*) – The config option to be resolved. Must be an option ending in\n`'_dir'`, for example `'media_dir'` or `'video_dir'`.\n* **kwargs** (*Any*) – Any strings to be used when resolving the directory.\nReturns:\nPath to the requested directory. If the path resolves to the empty\nstring, return `None` instead.\nReturn type:\n`pathlib.Path`\nRaises:\n**KeyError** – When `key` is not a config option that stores a directory and\n thus [`get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\") is not appropriate; or when\n `key` is appropriate but there is not enough information to\n resolve the directory.\nNotes\nStandard `str.format()` syntax is used to resolve the paths so the\npaths may contain arbitrary placeholders using f\\-string notation.\nHowever, these will require `kwargs` to contain the required values.\nExamples\nThe value of `config.tex_dir` is `'{media_dir}/Tex'` by default,\ni.e. it is a subfolder of wherever `config.media_dir` is located. In\norder to get the *actual* directory, use [`get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n```\n>>> from manim import config as globalconfig\n>>> config = globalconfig.copy()\n>>> config.tex_dir\n'{media_dir}/Tex'\n>>> config.media_dir\n'./media'\n>>> config.get_dir(\"tex_dir\").as_posix()\n'media/Tex'\n```\nResolving directories is done in a lazy way, at the last possible\nmoment, to reflect any changes in other config options:\n```\n>>> config.media_dir = \"my_media_dir\"\n>>> config.get_dir(\"tex_dir\").as_posix()\n'my_media_dir/Tex'\n```\nSome directories depend on information that is not available to\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\"). For example, the default value of video\\_dir\nincludes the name of the input file and the video quality\n(e.g. 480p15\\). This informamtion has to be supplied via `kwargs`:\n```\n>>> config.video_dir\n'{media_dir}/videos/{module_name}/{quality}'\n>>> config.get_dir(\"video_dir\")\nTraceback (most recent call last):\nKeyError: 'video_dir {media_dir}/videos/{module_name}/{quality} requires the following keyword arguments: module_name'\n>>> config.get_dir(\"video_dir\", module_name=\"myfile\").as_posix()\n'my_media_dir/videos/myfile/1080p60'\n```\nNote the quality does not need to be passed as keyword argument since\n[`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\") does store information about quality.\nDirectories may be recursively defined. For example, the config option\n`partial_movie_dir` depends on `video_dir`, which in turn depends\non `media_dir`:\n```\n>>> config.partial_movie_dir\n'{video_dir}/partial_movie_files/{scene_name}'\n>>> config.get_dir(\"partial_movie_dir\")\nTraceback (most recent call last):\nKeyError: 'partial_movie_dir {video_dir}/partial_movie_files/{scene_name} requires the following keyword arguments: scene_name'\n>>> config.get_dir(\n...     \"partial_movie_dir\", module_name=\"myfile\", scene_name=\"myscene\"\n... ).as_posix()\n'my_media_dir/videos/myfile/1080p60/partial_movie_files/myscene'\n```\nStandard f\\-string syntax is used. Arbitrary names can be used when\ndefining directories, as long as the corresponding values are passed to\n[`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\") via `kwargs`.\n```\n>>> config.media_dir = \"{dir1}/{dir2}\"\n>>> config.get_dir(\"media_dir\")\nTraceback (most recent call last):\nKeyError: 'media_dir {dir1}/{dir2} requires the following keyword arguments: dir1'\n>>> config.get_dir(\"media_dir\", dir1=\"foo\", dir2=\"bar\").as_posix()\n'foo/bar'\n>>> config.media_dir = \"./media\"\n>>> config.get_dir(\"media_dir\").as_posix()\n'media'\n```\n*property* gui\\_location*: tuple\\[Any]*[¶](#manim._config.utils.ManimConfig.gui_location \"Link to this definition\")\nLocation parameters for the GUI window (e.g., screen coordinates or layout settings).\n*property* images\\_dir*: str*[¶](#manim._config.utils.ManimConfig.images_dir \"Link to this definition\")\nDirectory to place images (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* input\\_file*: str*[¶](#manim._config.utils.ManimConfig.input_file \"Link to this definition\")\nInput file name.\n*property* left\\_side*: [Vector3D](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")*[¶](#manim._config.utils.ManimConfig.left_side \"Link to this definition\")\nCoordinate at the middle left of the frame.\n*property* log\\_dir*: str*[¶](#manim._config.utils.ManimConfig.log_dir \"Link to this definition\")\nDirectory to place logs. See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* log\\_to\\_file*: bool*[¶](#manim._config.utils.ManimConfig.log_to_file \"Link to this definition\")\nWhether to save logs to a file.\n*property* max\\_files\\_cached*: int*[¶](#manim._config.utils.ManimConfig.max_files_cached \"Link to this definition\")\nMaximum number of files cached. Use \\-1 for infinity (no flag).\n*property* media\\_dir*: str*[¶](#manim._config.utils.ManimConfig.media_dir \"Link to this definition\")\nMain output directory. See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* media\\_embed*: bool*[¶](#manim._config.utils.ManimConfig.media_embed \"Link to this definition\")\nWhether to embed videos in Jupyter notebook.\n*property* media\\_width*: str*[¶](#manim._config.utils.ManimConfig.media_width \"Link to this definition\")\nMedia width in Jupyter notebook.\n*property* movie\\_file\\_extension*: str*[¶](#manim._config.utils.ManimConfig.movie_file_extension \"Link to this definition\")\nEither .mp4, .webm or .mov.\n*property* no\\_latex\\_cleanup*: bool*[¶](#manim._config.utils.ManimConfig.no_latex_cleanup \"Link to this definition\")\nPrevents deletion of .aux, .dvi, and .log files produced by Tex and MathTex.\n*property* notify\\_outdated\\_version*: bool*[¶](#manim._config.utils.ManimConfig.notify_outdated_version \"Link to this definition\")\nWhether to notify if there is a version update available.\n*property* output\\_file*: str*[¶](#manim._config.utils.ManimConfig.output_file \"Link to this definition\")\nOutput file name (\\-o).\n*property* partial\\_movie\\_dir*: str*[¶](#manim._config.utils.ManimConfig.partial_movie_dir \"Link to this definition\")\nDirectory to place partial movie files (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* pixel\\_height*: int*[¶](#manim._config.utils.ManimConfig.pixel_height \"Link to this definition\")\nFrame height in pixels (–resolution, \\-r).\n*property* pixel\\_width*: int*[¶](#manim._config.utils.ManimConfig.pixel_width \"Link to this definition\")\nFrame width in pixels (–resolution, \\-r).\n*property* plugins*: list\\[str]*[¶](#manim._config.utils.ManimConfig.plugins \"Link to this definition\")\nList of plugins to enable.\n*property* preview*: bool*[¶](#manim._config.utils.ManimConfig.preview \"Link to this definition\")\nWhether to play the rendered movie (\\-p).\n*property* progress\\_bar*: str*[¶](#manim._config.utils.ManimConfig.progress_bar \"Link to this definition\")\nWhether to show progress bars while rendering animations.\n*property* quality*: str \\| None*[¶](#manim._config.utils.ManimConfig.quality \"Link to this definition\")\nVideo quality (\\-q).\n*property* renderer*: [RendererType](manim.constants.RendererType.html#manim.constants.RendererType \"manim.constants.RendererType\")*[¶](#manim._config.utils.ManimConfig.renderer \"Link to this definition\")\nThe currently active renderer.\nPopulated with one of the available renderers in [`RendererType`](manim.constants.RendererType.html#manim.constants.RendererType \"manim.constants.RendererType\").\nTests:\n```\n>>> test_config = ManimConfig()\n>>> test_config.renderer is None  # a new ManimConfig is unpopulated\nTrue\n>>> test_config.renderer = 'opengl'\n>>> test_config.renderer\n<RendererType.OPENGL: 'opengl'>\n>>> test_config.renderer = 42\nTraceback (most recent call last):\n...\nValueError: 42 is not a valid RendererType\n```\nCheck that capitalization of renderer types is irrelevant:\n```\n>>> test_config.renderer = 'OpenGL'\n>>> test_config.renderer = 'cAirO'\n```\n*property* right\\_side*: [Vector3D](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")*[¶](#manim._config.utils.ManimConfig.right_side \"Link to this definition\")\nCoordinate at the middle right of the frame.\n*property* save\\_as\\_gif*: bool*[¶](#manim._config.utils.ManimConfig.save_as_gif \"Link to this definition\")\nWhether to save the rendered scene in .gif format (\\-i).\n*property* save\\_last\\_frame*: bool*[¶](#manim._config.utils.ManimConfig.save_last_frame \"Link to this definition\")\nWhether to save the last frame of the scene as an image file (\\-s).\n*property* save\\_pngs*: bool*[¶](#manim._config.utils.ManimConfig.save_pngs \"Link to this definition\")\nWhether to save all frames in the scene as images files (\\-g).\n*property* save\\_sections*: bool*[¶](#manim._config.utils.ManimConfig.save_sections \"Link to this definition\")\nWhether to save single videos for each section in addition to the movie file.\n*property* scene\\_names*: list\\[str]*[¶](#manim._config.utils.ManimConfig.scene_names \"Link to this definition\")\nScenes to play from file.\n*property* sections\\_dir*: str*[¶](#manim._config.utils.ManimConfig.sections_dir \"Link to this definition\")\nDirectory to place section videos (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* show\\_in\\_file\\_browser*: bool*[¶](#manim._config.utils.ManimConfig.show_in_file_browser \"Link to this definition\")\nWhether to show the output file in the file browser (\\-f).\n*property* tex\\_dir*: str*[¶](#manim._config.utils.ManimConfig.tex_dir \"Link to this definition\")\nDirectory to place tex (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* tex\\_template*: [TexTemplate](manim.utils.tex.TexTemplate.html#manim.utils.tex.TexTemplate \"manim.utils.tex.TexTemplate\")*[¶](#manim._config.utils.ManimConfig.tex_template \"Link to this definition\")\nTemplate used when rendering Tex. See [`TexTemplate`](manim.utils.tex.TexTemplate.html#manim.utils.tex.TexTemplate \"manim.utils.tex.TexTemplate\").\n*property* tex\\_template\\_file*: Path*[¶](#manim._config.utils.ManimConfig.tex_template_file \"Link to this definition\")\nFile to read Tex template from (no flag). See [`TexTemplate`](manim.utils.tex.TexTemplate.html#manim.utils.tex.TexTemplate \"manim.utils.tex.TexTemplate\").\n*property* text\\_dir*: str*[¶](#manim._config.utils.ManimConfig.text_dir \"Link to this definition\")\nDirectory to place text (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* top*: [Vector3D](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")*[¶](#manim._config.utils.ManimConfig.top \"Link to this definition\")\nCoordinate at the center top of the frame.\n*property* transparent*: bool*[¶](#manim._config.utils.ManimConfig.transparent \"Link to this definition\")\nWhether the background opacity is less than 1\\.0 (\\-t).\nupdate(*obj*)[\\[source]](../_modules/manim/_config/utils.html#ManimConfig.update)[¶](#manim._config.utils.ManimConfig.update \"Link to this definition\")\nDigest the options found in another [`ManimConfig`](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\") or in a dict.\nSimilar to `dict.update()`, replaces the values of this object with\nthose of `obj`.\nParameters:\n**obj** ([*ManimConfig*](#manim._config.utils.ManimConfig \"manim._config.utils.ManimConfig\") *\\|* *dict**\\[**str**,* *Any**]*) – The object to copy values from.\nReturn type:\nNone\nRaises:\n**AttributeError** – If `obj` is a dict but contains keys that do not belong to any\n config options.\nSee also\n[`digest_file()`](#manim._config.utils.ManimConfig.digest_file \"manim._config.utils.ManimConfig.digest_file\"), [`digest_args()`](#manim._config.utils.ManimConfig.digest_args \"manim._config.utils.ManimConfig.digest_args\"), [`digest_parser()`](#manim._config.utils.ManimConfig.digest_parser \"manim._config.utils.ManimConfig.digest_parser\")\n*property* upto\\_animation\\_number*: int*[¶](#manim._config.utils.ManimConfig.upto_animation_number \"Link to this definition\")\nStop rendering animations at this number. Use \\-1 to avoid skipping (\\-n).\n*property* use\\_projection\\_fill\\_shaders*: bool*[¶](#manim._config.utils.ManimConfig.use_projection_fill_shaders \"Link to this definition\")\nUse shaders for OpenGLVMobject fill which are compatible with transformation matrices.\n*property* use\\_projection\\_stroke\\_shaders*: bool*[¶](#manim._config.utils.ManimConfig.use_projection_stroke_shaders \"Link to this definition\")\nUse shaders for OpenGLVMobject stroke which are compatible with transformation matrices.\n*property* verbosity*: str*[¶](#manim._config.utils.ManimConfig.verbosity \"Link to this definition\")\nLogger verbosity; “DEBUG”, “INFO”, “WARNING”, “ERROR”, or “CRITICAL” (\\-v).\n*property* video\\_dir*: str*[¶](#manim._config.utils.ManimConfig.video_dir \"Link to this definition\")\nDirectory to place videos (no flag). See [`ManimConfig.get_dir()`](#manim._config.utils.ManimConfig.get_dir \"manim._config.utils.ManimConfig.get_dir\").\n*property* window\\_monitor*: int*[¶](#manim._config.utils.ManimConfig.window_monitor \"Link to this definition\")\nThe monitor on which the scene will be rendered.\n*property* window\\_position*: str*[¶](#manim._config.utils.ManimConfig.window_position \"Link to this definition\")\nSet the position of preview window. You can use directions, e.g. UL/DR/ORIGIN/LEFT…or the position(pixel) of the upper left corner of the window, e.g. ‘960,540’.\n*property* window\\_size*: str*[¶](#manim._config.utils.ManimConfig.window_size \"Link to this definition\")\nThe size of the opengl window. ‘default’ to automatically scale the window based on the display monitor.\n*property* write\\_all*: bool*[¶](#manim._config.utils.ManimConfig.write_all \"Link to this definition\")\nWhether to render all scenes in the input file (\\-a).\n*property* write\\_to\\_movie*: bool*[¶](#manim._config.utils.ManimConfig.write_to_movie \"Link to this definition\")\nWhether to render the scene to a movie file (\\-w).\n*property* zero\\_pad*: int*[¶](#manim._config.utils.ManimConfig.zero_pad \"Link to this definition\")\nPNG zero padding. A number between 0 (no zero padding) and 9 (9 columns minimum).",
  "scraped_at": "2025-06-24T17:48:26.776672",
  "content_length": 42376,
  "domain": "docs.manim.community",
  "word_count": 3808,
  "inspection_status": "pending",
  "filename": "ManimConfig - Manim Community v0.19.0_20250624_174826.json",
  "saved_at": "2025-06-24T17:48:26.776851"
}