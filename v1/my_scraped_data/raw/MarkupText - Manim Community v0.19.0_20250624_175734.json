{
  "doc_id": "b3ec9030faaeafa60d5e27fa0816fabf",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.text.text_mobject.MarkupText.html",
  "title": "MarkupText - Manim Community v0.19.0",
  "content": "MarkupText[¶](#markuptext \"Link to this heading\")\n=================================================\nQualified name: `manim.mobject.text.text\\_mobject.MarkupText`\n*class* MarkupText(*text*, *fill\\_opacity\\=1*, *stroke\\_width\\=0*, *color\\=None*, *font\\_size\\=48*, *line\\_spacing\\=\\-1*, *font\\=''*, *slant\\='NORMAL'*, *weight\\='NORMAL'*, *justify\\=False*, *gradient\\=None*, *tab\\_width\\=4*, *height\\=None*, *width\\=None*, *should\\_center\\=True*, *disable\\_ligatures\\=False*, *warn\\_missing\\_font\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText)[¶](#manim.mobject.text.text_mobject.MarkupText \"Link to this definition\")\nBases: [`SVGMobject`](manim.mobject.svg.svg_mobject.SVGMobject.html#manim.mobject.svg.svg_mobject.SVGMobject \"manim.mobject.svg.svg_mobject.SVGMobject\")\nDisplay (non\\-LaTeX) text rendered using [Pango](https://pango.org/).\nText objects behave like a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\\-like iterable of all characters\nin the given text. In particular, slicing is possible.\n**What is PangoMarkup?**\nPangoMarkup is a small markup language like html and it helps you avoid using\n“range of characters” while coloring or styling a piece a Text. You can use\nthis language with [`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\").\nA simple example of a marked\\-up string might be:\n```\n<span foreground=\"blue\" size=\"x-large\">Blue text</span> is <i>cool</i>!\"\n```\nand it can be used with [`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\") as\nExample: MarkupExample [¶](#markupexample)\n![../_images/MarkupExample-1.png](../_images/MarkupExample-1.png)\n```\nfrom manim import *\nclass MarkupExample(Scene):\n    def construct(self):\n        text = MarkupText('<span foreground=\"blue\" size=\"x-large\">Blue text</span> is <i>cool</i>!\"')\n        self.add(text)\n```\n```\nclass MarkupExample(Scene):\n    def construct(self):\n        text = MarkupText('Blue text is cool!\"')\n        self.add(text)\n```\nA more elaborate example would be:\nExample: MarkupElaborateExample [¶](#markupelaborateexample)\n![../_images/MarkupElaborateExample-1.png](../_images/MarkupElaborateExample-1.png)\n```\nfrom manim import *\nclass MarkupElaborateExample(Scene):\n    def construct(self):\n        text = MarkupText(\n            '<span foreground=\"purple\">ا</span><span foreground=\"red\">َ</span>'\n            'ل<span foreground=\"blue\">ْ</span>ع<span foreground=\"red\">َ</span>ر'\n            '<span foreground=\"red\">َ</span>ب<span foreground=\"red\">ِ</span>ي'\n            '<span foreground=\"green\">ّ</span><span foreground=\"red\">َ</span>ة'\n            '<span foreground=\"blue\">ُ</span>'\n        )\n        self.add(text)\n```\n```\nclass MarkupElaborateExample(Scene):\n    def construct(self):\n        text = MarkupText(\n            'اَ'\n            'لْعَر'\n            'َبِي'\n            'َّة'\n            'ُ'\n        )\n        self.add(text)\n```\nPangoMarkup can also contain XML features such as numeric character\nentities such as `&#169;` for © can be used too.\nThe most general markup tag is `<span>`, then there are some\nconvenience tags.\nHere is a list of supported tags:\n* `<b>bold</b>`, `<i>italic</i>` and `<b><i>bold+italic</i></b>`\n* `<u>underline</u>` and `<s>strike through</s>`\n* `<tt>typewriter font</tt>`\n* `<big>bigger font</big>` and `<small>smaller font</small>`\n* `<sup>superscript</sup>` and `<sub>subscript</sub>`\n* `<span underline=\"double\" underline_color=\"green\">double underline</span>`\n* `<span underline=\"error\">error underline</span>`\n* `<span overline=\"single\" overline_color=\"green\">overline</span>`\n* `<span strikethrough=\"true\" strikethrough_color=\"red\">strikethrough</span>`\n* `<span font_family=\"sans\">temporary change of font</span>`\n* `<span foreground=\"red\">temporary change of color</span>`\n* `<span fgcolor=\"red\">temporary change of color</span>`\n* `<gradient from=\"YELLOW\" to=\"RED\">temporary gradient</gradient>`\nFor `<span>` markup, colors can be specified either as\nhex triples like `#aabbcc` or as named CSS colors like\n`AliceBlue`.\nThe `<gradient>` tag is handled by Manim rather than\nPango, and supports hex triplets or Manim constants like\n`RED` or `RED_A`.\nIf you want to use Manim constants like `RED_A` together\nwith `<span>`, you will need to use Python’s f\\-String\nsyntax as follows:\n```\nMarkupText(f'<span foreground=\"{RED_A}\">here you go</span>')\n```\nIf your text contains ligatures, the [`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\") class may\nincorrectly determine the first and last letter when creating the\ngradient. This is due to the fact that `fl` are two separate characters,\nbut might be set as one single glyph \\- a ligature. If your language\ndoes not depend on ligatures, consider setting `disable_ligatures`\nto `True`. If you must use ligatures, the `gradient` tag supports an optional\nattribute `offset` which can be used to compensate for that error.\nFor example:\n* `<gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">example</gradient>` to *start* the gradient one letter earlier\n* `<gradient from=\"RED\" to=\"YELLOW\" offset=\",1\">example</gradient>` to *end* the gradient one letter earlier\n* `<gradient from=\"RED\" to=\"YELLOW\" offset=\"2,1\">example</gradient>` to *start* the gradient two letters earlier and *end* it one letter earlier\nSpecifying a second offset may be necessary if the text to be colored does\nitself contain ligatures. The same can happen when using HTML entities for\nspecial chars.\nWhen using `underline`, `overline` or `strikethrough` together with\n`<gradient>` tags, you will also need to use the offset, because\nunderlines are additional paths in the final `SVGMobject`.\nCheck out the following example.\nEscaping of special characters: `>` **should** be written as `&gt;`\nwhereas `<` and `&` *must* be written as `&lt;` and\n`&amp;`.\nYou can find more information about Pango markup formatting at the\ncorresponding documentation page:\n[Pango Markup](https://docs.gtk.org/Pango/pango_markup.html).\nPlease be aware that not all features are supported by this class and that\nthe `<gradient>` tag mentioned above is not supported by Pango.\nParameters:\n* **text** (*str*) – The text that needs to be created as mobject.\n* **fill\\_opacity** (*float*) – The fill opacity, with 1 meaning opaque and 0 meaning transparent.\n* **stroke\\_width** (*float*) – Stroke width.\n* **font\\_size** (*float*) – Font size.\n* **line\\_spacing** (*int*) – Line spacing.\n* **font** (*str*) – Global font setting for the entire text. Local overrides are possible.\n* **slant** (*str*) – Global slant setting, e.g. NORMAL or ITALIC. Local overrides are possible.\n* **weight** (*str*) – Global weight setting, e.g. NORMAL or BOLD. Local overrides are possible.\n* **gradient** (*tuple*) – Global gradient setting. Local overrides are possible.\n* **warn\\_missing\\_font** (*bool*) – If True (default), Manim will issue a warning if the font does not exist in the\n(case\\-sensitive) list of fonts returned from manimpango.list\\_fonts().\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **justify** (*bool*)\n* **tab\\_width** (*int*)\n* **height** (*int*)\n* **width** (*int*)\n* **should\\_center** (*bool*)\n* **disable\\_ligatures** (*bool*)\nReturns:\nThe text displayed in form of a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\\-like mobject.\nReturn type:\n[`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\")\nExamples\nExample: BasicMarkupExample [¶](#basicmarkupexample)\n![../_images/BasicMarkupExample-1.png](../_images/BasicMarkupExample-1.png)\n```\nfrom manim import *\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"<b>foo</b> <i>bar</i> <b><i>foobar</i></b>\")\n        text2 = MarkupText(\"<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>\")\n        text3 = MarkupText(\"H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>\")\n        text4 = MarkupText(\"type <tt>help</tt> for help\")\n        text5 = MarkupText(\n            '<span underline=\"double\">foo</span> <span underline=\"error\">bar</span>'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```\n```\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"foo bar foobar\")\n        text2 = MarkupText(\"foo bar big small\")\n        text3 = MarkupText(\"H2O and H3O+\")\n        text4 = MarkupText(\"type help for help\")\n        text5 = MarkupText(\n            'foo bar'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```\nExample: ColorExample [¶](#colorexample)\n![../_images/ColorExample-1.png](../_images/ColorExample-1.png)\n```\nfrom manim import *\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice <gradient from=\"RED\" to=\"YELLOW\">intermediate</gradient> gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\">causing trouble</gradient> here'\n        )\n        text5 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">defeated</gradient> with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">floating</gradient> inside'\n        )\n        text7 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1,1\">floating</gradient> inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)\n        self.add(group)\n```\n```\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red except this', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice intermediate gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature causing trouble here'\n        )\n        text5 = MarkupText(\n            'fl ligature defeated with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature floating inside'\n        )\n        text7 = MarkupText(\n            'fl ligature floating inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)\n        self.add(group)\n```\nExample: UnderlineExample [¶](#underlineexample)\n![../_images/UnderlineExample-1.png](../_images/UnderlineExample-1.png)\n```\nfrom manim import *\nclass UnderlineExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">bla</span>'\n        )\n        text2 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text3 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-1\">aabb</gradient>y'\n        )\n        text4 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text5 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-2\">aabb</gradient>y'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```\n```\nclass UnderlineExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            'bla'\n        )\n        text2 = MarkupText(\n            'xxxaabby'\n        )\n        text3 = MarkupText(\n            'xxxaabby'\n        )\n        text4 = MarkupText(\n            'xxxaabby'\n        )\n        text5 = MarkupText(\n            'xxxaabby'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)\n```\nExample: FontExample [¶](#fontexample)\n![../_images/FontExample-1.png](../_images/FontExample-1.png)\n```\nfrom manim import *\nclass FontExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            'all in sans <span font_family=\"serif\">except this</span>', font=\"sans\"\n        )\n        text2 = MarkupText(\n            '<span font_family=\"serif\">mixing</span> <span font_family=\"sans\">fonts</span> <span font_family=\"monospace\">is ugly</span>'\n        )\n        text3 = MarkupText(\"special char > or &gt;\")\n        text4 = MarkupText(\"special char &lt; and &amp;\")\n        group = VGroup(text1, text2, text3, text4).arrange(DOWN)\n        self.add(group)\n```\n```\nclass FontExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            'all in sans except this', font=\"sans\"\n        )\n        text2 = MarkupText(\n            'mixing fonts is ugly'\n        )\n        text3 = MarkupText(\"special char > or >\")\n        text4 = MarkupText(\"special char < and &\")\n        group = VGroup(text1, text2, text3, text4).arrange(DOWN)\n        self.add(group)\n```\nExample: NewlineExample [¶](#newlineexample)\n![../_images/NewlineExample-1.png](../_images/NewlineExample-1.png)\n```\nfrom manim import *\nclass NewlineExample(Scene):\n    def construct(self):\n        text = MarkupText('foooo<span foreground=\"red\">oo\\nbaa</span>aar')\n        self.add(text)\n```\n```\nclass NewlineExample(Scene):\n    def construct(self):\n        text = MarkupText('foooooo\\nbaaaar')\n        self.add(text)\n```\nExample: NoLigaturesExample [¶](#noligaturesexample)\n![../_images/NoLigaturesExample-1.png](../_images/NoLigaturesExample-1.png)\n```\nfrom manim import *\nclass NoLigaturesExample(Scene):\n    def construct(self):\n        text1 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing')\n        text2 = MarkupText('fl<gradient from=\"RED\" to=\"GREEN\">oat</gradient>ing', disable_ligatures=True)\n        group = VGroup(text1, text2).arrange(DOWN)\n        self.add(group)\n```\n```\nclass NoLigaturesExample(Scene):\n    def construct(self):\n        text1 = MarkupText('floating')\n        text2 = MarkupText('floating', disable_ligatures=True)\n        group = VGroup(text1, text2).arrange(DOWN)\n        self.add(group)\n```\nAs [`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\") uses Pango to render text, rendering non\\-English\ncharacters is easily possible:\nExample: MultiLanguage [¶](#multilanguage)\n![../_images/MultiLanguage-1.png](../_images/MultiLanguage-1.png)\n```\nfrom manim import *\nclass MultiLanguage(Scene):\n    def construct(self):\n        morning = MarkupText(\"வணக்கம்\", font=\"sans-serif\")\n        japanese = MarkupText(\n            '<span fgcolor=\"blue\">日本</span>へようこそ'\n        )  # works as in ``Text``.\n        mess = MarkupText(\"Multi-Language\", weight=BOLD)\n        russ = MarkupText(\"Здравствуйте मस नम म \", font=\"sans-serif\")\n        hin = MarkupText(\"नमस्ते\", font=\"sans-serif\")\n        chinese = MarkupText(\"臂猿「黛比」帶著孩子\", font=\"sans-serif\")\n        group = VGroup(morning, japanese, mess, russ, hin, chinese).arrange(DOWN)\n        self.add(group)\n```\n```\nclass MultiLanguage(Scene):\n    def construct(self):\n        morning = MarkupText(\"வணக்கம்\", font=\"sans-serif\")\n        japanese = MarkupText(\n            '日本へようこそ'\n        )  # works as in ``Text``.\n        mess = MarkupText(\"Multi-Language\", weight=BOLD)\n        russ = MarkupText(\"Здравствуйте मस नम म \", font=\"sans-serif\")\n        hin = MarkupText(\"नमस्ते\", font=\"sans-serif\")\n        chinese = MarkupText(\"臂猿「黛比」帶著孩子\", font=\"sans-serif\")\n        group = VGroup(morning, japanese, mess, russ, hin, chinese).arrange(DOWN)\n        self.add(group)\n```\nYou can justify the text by passing `justify` parameter.\nExample: JustifyText [¶](#justifytext)\n```\nfrom manim import *\nclass JustifyText(Scene):\n    def construct(self):\n        ipsum_text = (\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            \"Praesent feugiat metus sit amet iaculis pulvinar. Nulla posuere \"\n            \"quam a ex aliquam, eleifend consectetur tellus viverra. Aliquam \"\n            \"fermentum interdum justo, nec rutrum elit pretium ac. Nam quis \"\n            \"leo pulvinar, dignissim est at, venenatis nisi.\"\n        )\n        justified_text = MarkupText(ipsum_text, justify=True).scale(0.4)\n        not_justified_text = MarkupText(ipsum_text, justify=False).scale(0.4)\n        just_title = Title(\"Justified\")\n        njust_title = Title(\"Not Justified\")\n        self.add(njust_title, not_justified_text)\n        self.play(\n            FadeOut(not_justified_text),\n            FadeIn(justified_text),\n            FadeOut(njust_title),\n            FadeIn(just_title),\n        )\n        self.wait(1)\n```\n```\nclass JustifyText(Scene):\n    def construct(self):\n        ipsum_text = (\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            \"Praesent feugiat metus sit amet iaculis pulvinar. Nulla posuere \"\n            \"quam a ex aliquam, eleifend consectetur tellus viverra. Aliquam \"\n            \"fermentum interdum justo, nec rutrum elit pretium ac. Nam quis \"\n            \"leo pulvinar, dignissim est at, venenatis nisi.\"\n        )\n        justified_text = MarkupText(ipsum_text, justify=True).scale(0.4)\n        not_justified_text = MarkupText(ipsum_text, justify=False).scale(0.4)\n        just_title = Title(\"Justified\")\n        njust_title = Title(\"Not Justified\")\n        self.add(njust_title, not_justified_text)\n        self.play(\n            FadeOut(not_justified_text),\n            FadeIn(justified_text),\n            FadeOut(njust_title),\n            FadeIn(just_title),\n        )\n        self.wait(1)\n```\nTests\nCheck that the creation of [`MarkupText`](#manim.mobject.text.text_mobject.MarkupText \"manim.mobject.text.text_mobject.MarkupText\") works:\n```\n>>> MarkupText('The horse does not eat cucumber salad.')\nMarkupText('The horse does not eat cucumber salad.')\n```\nMethods\n| `font_list` |  |\n| --- | --- |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `font_size` |  |\n| `hash_seed` | A unique hash representing the result of the generated mobject points. |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_count\\_real\\_chars(*s*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._count_real_chars)[¶](#manim.mobject.text.text_mobject.MarkupText._count_real_chars \"Link to this definition\")\nCounts characters that will be displayed.\nThis is needed for partial coloring or gradients, because space\ncounts to the text’s len, but has no corresponding character.\n\\_extract\\_color\\_tags()[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._extract_color_tags)[¶](#manim.mobject.text.text_mobject.MarkupText._extract_color_tags \"Link to this definition\")\nUsed to determine which parts (if any) of the string should be formatted\nwith a custom color.\nRemoves the `<color>` tag, as it is not part of Pango’s markup and would cause an error.\nNote: Using the `<color>` tags is deprecated. As soon as the legacy syntax is gone, this function\nwill be removed.\n\\_extract\\_gradient\\_tags()[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._extract_gradient_tags)[¶](#manim.mobject.text.text_mobject.MarkupText._extract_gradient_tags \"Link to this definition\")\nUsed to determine which parts (if any) of the string should be formatted\nwith a gradient.\nRemoves the `<gradient>` tag, as it is not part of Pango’s markup and would cause an error.\n\\_original\\_\\_init\\_\\_(*text*, *fill\\_opacity\\=1*, *stroke\\_width\\=0*, *color\\=None*, *font\\_size\\=48*, *line\\_spacing\\=\\-1*, *font\\=''*, *slant\\='NORMAL'*, *weight\\='NORMAL'*, *justify\\=False*, *gradient\\=None*, *tab\\_width\\=4*, *height\\=None*, *width\\=None*, *should\\_center\\=True*, *disable\\_ligatures\\=False*, *warn\\_missing\\_font\\=True*, *\\*\\*kwargs*)[¶](#manim.mobject.text.text_mobject.MarkupText._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **text** (*str*)\n* **fill\\_opacity** (*float*)\n* **stroke\\_width** (*float*)\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)\n* **font\\_size** (*float*)\n* **line\\_spacing** (*int*)\n* **font** (*str*)\n* **slant** (*str*)\n* **weight** (*str*)\n* **justify** (*bool*)\n* **gradient** (*tuple*)\n* **tab\\_width** (*int*)\n* **height** (*int*)\n* **width** (*int*)\n* **should\\_center** (*bool*)\n* **disable\\_ligatures** (*bool*)\n* **warn\\_missing\\_font** (*bool*)\nReturn type:\nNone\n\\_parse\\_color(*col*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._parse_color)[¶](#manim.mobject.text.text_mobject.MarkupText._parse_color \"Link to this definition\")\nParse color given in `<color>` or `<gradient>` tags.\n\\_text2hash(*color*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._text2hash)[¶](#manim.mobject.text.text_mobject.MarkupText._text2hash \"Link to this definition\")\nGenerates `sha256` hash for file name.\nParameters:\n**color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n\\_text2svg(*color*)[\\[source]](../_modules/manim/mobject/text/text_mobject.html#MarkupText._text2svg)[¶](#manim.mobject.text.text_mobject.MarkupText._text2svg \"Link to this definition\")\nConvert the text to SVG using Pango.\nParameters:\n**color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*)",
  "scraped_at": "2025-06-24T17:57:34.974409",
  "content_length": 22430,
  "domain": "docs.manim.community",
  "word_count": 2047,
  "inspection_status": "pending",
  "filename": "MarkupText - Manim Community v0.19.0_20250624_175734.json",
  "saved_at": "2025-06-24T17:57:34.974534"
}