{
  "doc_id": "e6d1e460bdbe73819ee200a97b3b4c85",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.mobject.Mobject.html",
  "title": "Mobject - Manim Community v0.19.0",
  "content": "Mobject[¶](#mobject \"Link to this heading\")\n===========================================\nQualified name: `manim.mobject.mobject.Mobject`\n*class* Mobject(*color\\=ManimColor('\\#FFFFFF')*, *name\\=None*, *dim\\=3*, *target\\=None*, *z\\_index\\=0*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject)[¶](#manim.mobject.mobject.Mobject \"Link to this definition\")\nBases: `object`\nMathematical Object: base class for objects that can be displayed on screen.\nThere is a compatibility layer that allows for\ngetting and setting generic attributes with `get_*`\nand `set_*` methods. See [`set()`](#manim.mobject.mobject.Mobject.set \"manim.mobject.mobject.Mobject.set\") for more details.\nParameters:\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *list**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]*)\n* **name** (*str* *\\|* *None*)\n* **dim** (*int*)\n* **z\\_index** (*float*)\nsubmobjects[¶](#manim.mobject.mobject.Mobject.submobjects \"Link to this definition\")\nThe contained objects.\nType:\nList\\[[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\npoints[¶](#manim.mobject.mobject.Mobject.points \"Link to this definition\")\nThe points of the objects.\nSee also\n[`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nType:\n`numpy.ndarray`\nMethods\n| [`add`](#manim.mobject.mobject.Mobject.add \"manim.mobject.mobject.Mobject.add\") | Add mobjects as submobjects. |\n| --- | --- |\n| [`add_animation_override`](#manim.mobject.mobject.Mobject.add_animation_override \"manim.mobject.mobject.Mobject.add_animation_override\") | Add an animation override. |\n| [`add_background_rectangle`](#manim.mobject.mobject.Mobject.add_background_rectangle \"manim.mobject.mobject.Mobject.add_background_rectangle\") | Add a BackgroundRectangle as submobject. |\n| `add_background_rectangle_to_family_members_with_points` |  |\n| `add_background_rectangle_to_submobjects` |  |\n| `add_n_more_submobjects` |  |\n| [`add_to_back`](#manim.mobject.mobject.Mobject.add_to_back \"manim.mobject.mobject.Mobject.add_to_back\") | Add all passed mobjects to the back of the submobjects. |\n| [`add_updater`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\") | Add an update function to this mobject. |\n| [`align_data`](#manim.mobject.mobject.Mobject.align_data \"manim.mobject.mobject.Mobject.align_data\") | Aligns the family structure and data of this mobject with another mobject. |\n| [`align_on_border`](#manim.mobject.mobject.Mobject.align_on_border \"manim.mobject.mobject.Mobject.align_on_border\") | Direction just needs to be a vector pointing towards side or corner in the 2d plane. |\n| `align_points` |  |\n| `align_points_with_larger` |  |\n| `align_submobjects` |  |\n| [`align_to`](#manim.mobject.mobject.Mobject.align_to \"manim.mobject.mobject.Mobject.align_to\") | Aligns mobject to another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") in a certain direction. |\n| [`animation_override_for`](#manim.mobject.mobject.Mobject.animation_override_for \"manim.mobject.mobject.Mobject.animation_override_for\") | Returns the function defining a specific animation override for this class. |\n| [`apply_complex_function`](#manim.mobject.mobject.Mobject.apply_complex_function \"manim.mobject.mobject.Mobject.apply_complex_function\") | Applies a complex function to a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| `apply_function` |  |\n| `apply_function_to_position` |  |\n| `apply_function_to_submobject_positions` |  |\n| `apply_matrix` |  |\n| `apply_over_attr_arrays` |  |\n| `apply_points_function_about_point` |  |\n| [`apply_to_family`](#manim.mobject.mobject.Mobject.apply_to_family \"manim.mobject.mobject.Mobject.apply_to_family\") | Apply a function to `self` and every submobject with points recursively. |\n| [`arrange`](#manim.mobject.mobject.Mobject.arrange \"manim.mobject.mobject.Mobject.arrange\") | Sorts [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") next to each other on screen. |\n| [`arrange_in_grid`](#manim.mobject.mobject.Mobject.arrange_in_grid \"manim.mobject.mobject.Mobject.arrange_in_grid\") | Arrange submobjects in a grid. |\n| [`arrange_submobjects`](#manim.mobject.mobject.Mobject.arrange_submobjects \"manim.mobject.mobject.Mobject.arrange_submobjects\") | Arrange the position of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") with a small buffer. |\n| [`become`](#manim.mobject.mobject.Mobject.become \"manim.mobject.mobject.Mobject.become\") | Edit points, colors and submobjects to be identical to another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| [`center`](#manim.mobject.mobject.Mobject.center \"manim.mobject.mobject.Mobject.center\") | Moves the center of the mobject to the center of the scene. |\n| [`clear_updaters`](#manim.mobject.mobject.Mobject.clear_updaters \"manim.mobject.mobject.Mobject.clear_updaters\") | Remove every updater. |\n| [`copy`](#manim.mobject.mobject.Mobject.copy \"manim.mobject.mobject.Mobject.copy\") | Create and return an identical copy of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") including all [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"). |\n| `fade` |  |\n| `fade_to` |  |\n| [`family_members_with_points`](#manim.mobject.mobject.Mobject.family_members_with_points \"manim.mobject.mobject.Mobject.family_members_with_points\") | Filters the list of family members (generated by [`get_family()`](#manim.mobject.mobject.Mobject.get_family \"manim.mobject.mobject.Mobject.get_family\")) to include only mobjects with points. |\n| [`flip`](#manim.mobject.mobject.Mobject.flip \"manim.mobject.mobject.Mobject.flip\") | Flips/Mirrors an mobject about its center. |\n| [`generate_points`](#manim.mobject.mobject.Mobject.generate_points \"manim.mobject.mobject.Mobject.generate_points\") | Initializes [`points`](#manim.mobject.mobject.Mobject.points \"manim.mobject.mobject.Mobject.points\") and therefore the shape. |\n| `generate_target` |  |\n| [`get_all_points`](#manim.mobject.mobject.Mobject.get_all_points \"manim.mobject.mobject.Mobject.get_all_points\") | Return all points from this mobject and all submobjects. |\n| `get_array_attrs` |  |\n| [`get_bottom`](#manim.mobject.mobject.Mobject.get_bottom \"manim.mobject.mobject.Mobject.get_bottom\") | Get bottom Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| `get_boundary_point` |  |\n| [`get_center`](#manim.mobject.mobject.Mobject.get_center \"manim.mobject.mobject.Mobject.get_center\") | Get center Point3Ds |\n| `get_center_of_mass` |  |\n| [`get_color`](#manim.mobject.mobject.Mobject.get_color \"manim.mobject.mobject.Mobject.get_color\") | Returns the color of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| [`get_coord`](#manim.mobject.mobject.Mobject.get_coord \"manim.mobject.mobject.Mobject.get_coord\") | Meant to generalize `get_x`, `get_y` and `get_z` |\n| [`get_corner`](#manim.mobject.mobject.Mobject.get_corner \"manim.mobject.mobject.Mobject.get_corner\") | Get corner Point3Ds for certain direction. |\n| [`get_critical_point`](#manim.mobject.mobject.Mobject.get_critical_point \"manim.mobject.mobject.Mobject.get_critical_point\") | Picture a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`get_edge_center`](#manim.mobject.mobject.Mobject.get_edge_center \"manim.mobject.mobject.Mobject.get_edge_center\") | Get edge Point3Ds for certain direction. |\n| [`get_end`](#manim.mobject.mobject.Mobject.get_end \"manim.mobject.mobject.Mobject.get_end\") | Returns the point, where the stroke that surrounds the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") ends. |\n| `get_extremum_along_dim` |  |\n| [`get_family`](#manim.mobject.mobject.Mobject.get_family \"manim.mobject.mobject.Mobject.get_family\") | Lists all mobjects in the hierarchy (family) of the given mobject, including the mobject itself and all its submobjects recursively. |\n| `get_family_updaters` |  |\n| `get_group_class` |  |\n| `get_image` |  |\n| [`get_left`](#manim.mobject.mobject.Mobject.get_left \"manim.mobject.mobject.Mobject.get_left\") | Get left Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| [`get_merged_array`](#manim.mobject.mobject.Mobject.get_merged_array \"manim.mobject.mobject.Mobject.get_merged_array\") | Return all of a given attribute from this mobject and all submobjects. |\n| [`get_midpoint`](#manim.mobject.mobject.Mobject.get_midpoint \"manim.mobject.mobject.Mobject.get_midpoint\") | Get Point3Ds of the middle of the path that forms the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`get_mobject_type_class`](#manim.mobject.mobject.Mobject.get_mobject_type_class \"manim.mobject.mobject.Mobject.get_mobject_type_class\") | Return the base class of this mobject type. |\n| [`get_nadir`](#manim.mobject.mobject.Mobject.get_nadir \"manim.mobject.mobject.Mobject.get_nadir\") | Get nadir (opposite the zenith) Point3Ds of a box bounding a 3D [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| `get_num_points` |  |\n| `get_pieces` |  |\n| [`get_point_mobject`](#manim.mobject.mobject.Mobject.get_point_mobject \"manim.mobject.mobject.Mobject.get_point_mobject\") | The simplest [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to be transformed to or from self. |\n| `get_points_defining_boundary` |  |\n| [`get_right`](#manim.mobject.mobject.Mobject.get_right \"manim.mobject.mobject.Mobject.get_right\") | Get right Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| [`get_start`](#manim.mobject.mobject.Mobject.get_start \"manim.mobject.mobject.Mobject.get_start\") | Returns the point, where the stroke that surrounds the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") starts. |\n| [`get_start_and_end`](#manim.mobject.mobject.Mobject.get_start_and_end \"manim.mobject.mobject.Mobject.get_start_and_end\") | Returns starting and ending point of a stroke as a `tuple`. |\n| [`get_time_based_updaters`](#manim.mobject.mobject.Mobject.get_time_based_updaters \"manim.mobject.mobject.Mobject.get_time_based_updaters\") | Return all updaters using the `dt` parameter. |\n| [`get_top`](#manim.mobject.mobject.Mobject.get_top \"manim.mobject.mobject.Mobject.get_top\") | Get top Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") |\n| [`get_updaters`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\") | Return all updaters. |\n| [`get_x`](#manim.mobject.mobject.Mobject.get_x \"manim.mobject.mobject.Mobject.get_x\") | Returns x Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float` |\n| [`get_y`](#manim.mobject.mobject.Mobject.get_y \"manim.mobject.mobject.Mobject.get_y\") | Returns y Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float` |\n| [`get_z`](#manim.mobject.mobject.Mobject.get_z \"manim.mobject.mobject.Mobject.get_z\") | Returns z Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float` |\n| `get_z_index_reference_point` |  |\n| [`get_zenith`](#manim.mobject.mobject.Mobject.get_zenith \"manim.mobject.mobject.Mobject.get_zenith\") | Get zenith Point3Ds of a box bounding a 3D [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`has_no_points`](#manim.mobject.mobject.Mobject.has_no_points \"manim.mobject.mobject.Mobject.has_no_points\") | Check if [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *does not* contains points. |\n| [`has_points`](#manim.mobject.mobject.Mobject.has_points \"manim.mobject.mobject.Mobject.has_points\") | Check if [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") contains points. |\n| [`has_time_based_updater`](#manim.mobject.mobject.Mobject.has_time_based_updater \"manim.mobject.mobject.Mobject.has_time_based_updater\") | Test if `self` has a time based updater. |\n| [`init_colors`](#manim.mobject.mobject.Mobject.init_colors \"manim.mobject.mobject.Mobject.init_colors\") | Initializes the colors. |\n| [`insert`](#manim.mobject.mobject.Mobject.insert \"manim.mobject.mobject.Mobject.insert\") | Inserts a mobject at a specific position into self.submobjects |\n| [`interpolate`](#manim.mobject.mobject.Mobject.interpolate \"manim.mobject.mobject.Mobject.interpolate\") | Turns this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") into an interpolation between `mobject1` and `mobject2`. |\n| `interpolate_color` |  |\n| [`invert`](#manim.mobject.mobject.Mobject.invert \"manim.mobject.mobject.Mobject.invert\") | Inverts the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"). |\n| `is_off_screen` |  |\n| [`length_over_dim`](#manim.mobject.mobject.Mobject.length_over_dim \"manim.mobject.mobject.Mobject.length_over_dim\") | Measure the length of an [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") in a certain direction. |\n| [`match_color`](#manim.mobject.mobject.Mobject.match_color \"manim.mobject.mobject.Mobject.match_color\") | Match the color with the color of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_coord`](#manim.mobject.mobject.Mobject.match_coord \"manim.mobject.mobject.Mobject.match_coord\") | Match the Point3Ds with the Point3Ds of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_depth`](#manim.mobject.mobject.Mobject.match_depth \"manim.mobject.mobject.Mobject.match_depth\") | Match the depth with the depth of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_dim_size`](#manim.mobject.mobject.Mobject.match_dim_size \"manim.mobject.mobject.Mobject.match_dim_size\") | Match the specified dimension with the dimension of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_height`](#manim.mobject.mobject.Mobject.match_height \"manim.mobject.mobject.Mobject.match_height\") | Match the height with the height of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_points`](#manim.mobject.mobject.Mobject.match_points \"manim.mobject.mobject.Mobject.match_points\") | Edit points, positions, and submobjects to be identical to another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), while keeping the style unchanged. |\n| [`match_updaters`](#manim.mobject.mobject.Mobject.match_updaters \"manim.mobject.mobject.Mobject.match_updaters\") | Match the updaters of the given mobject. |\n| [`match_width`](#manim.mobject.mobject.Mobject.match_width \"manim.mobject.mobject.Mobject.match_width\") | Match the width with the width of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). |\n| [`match_x`](#manim.mobject.mobject.Mobject.match_x \"manim.mobject.mobject.Mobject.match_x\") | Match x coord. |\n| [`match_y`](#manim.mobject.mobject.Mobject.match_y \"manim.mobject.mobject.Mobject.match_y\") | Match y coord. |\n| [`match_z`](#manim.mobject.mobject.Mobject.match_z \"manim.mobject.mobject.Mobject.match_z\") | Match z coord. |\n| [`move_to`](#manim.mobject.mobject.Mobject.move_to \"manim.mobject.mobject.Mobject.move_to\") | Move center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to certain Point3D. |\n| [`next_to`](#manim.mobject.mobject.Mobject.next_to \"manim.mobject.mobject.Mobject.next_to\") | Move this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") next to another's [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") or Point3D. |\n| `nonempty_submobjects` |  |\n| [`null_point_align`](#manim.mobject.mobject.Mobject.null_point_align \"manim.mobject.mobject.Mobject.null_point_align\") | If a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") with points is being aligned to one without, treat both as groups, and push the one with points into its own submobjects list. |\n| `point_from_proportion` |  |\n| `pose_at_angle` |  |\n| `proportion_from_point` |  |\n| `push_self_into_submobjects` |  |\n| `put_start_and_end_on` |  |\n| [`reduce_across_dimension`](#manim.mobject.mobject.Mobject.reduce_across_dimension \"manim.mobject.mobject.Mobject.reduce_across_dimension\") | Find the min or max value from a dimension across all points in this and submobjects. |\n| [`remove`](#manim.mobject.mobject.Mobject.remove \"manim.mobject.mobject.Mobject.remove\") | Remove [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"). |\n| [`remove_updater`](#manim.mobject.mobject.Mobject.remove_updater \"manim.mobject.mobject.Mobject.remove_updater\") | Remove an updater. |\n| [`repeat`](#manim.mobject.mobject.Mobject.repeat \"manim.mobject.mobject.Mobject.repeat\") | This can make transition animations nicer |\n| `repeat_submobject` |  |\n| `replace` |  |\n| `rescale_to_fit` |  |\n| [`reset_points`](#manim.mobject.mobject.Mobject.reset_points \"manim.mobject.mobject.Mobject.reset_points\") | Sets [`points`](#manim.mobject.mobject.Mobject.points \"manim.mobject.mobject.Mobject.points\") to be an empty array. |\n| [`restore`](#manim.mobject.mobject.Mobject.restore \"manim.mobject.mobject.Mobject.restore\") | Restores the state that was previously saved with [`save_state()`](#manim.mobject.mobject.Mobject.save_state \"manim.mobject.mobject.Mobject.save_state\"). |\n| [`resume_updating`](#manim.mobject.mobject.Mobject.resume_updating \"manim.mobject.mobject.Mobject.resume_updating\") | Enable updating from updaters and animations. |\n| `reverse_points` |  |\n| [`rotate`](#manim.mobject.mobject.Mobject.rotate \"manim.mobject.mobject.Mobject.rotate\") | Rotates the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") around a specified axis and point. |\n| [`rotate_about_origin`](#manim.mobject.mobject.Mobject.rotate_about_origin \"manim.mobject.mobject.Mobject.rotate_about_origin\") | Rotates the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") about the ORIGIN, which is at \\[0,0,0]. |\n| [`save_image`](#manim.mobject.mobject.Mobject.save_image \"manim.mobject.mobject.Mobject.save_image\") | Saves an image of only this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") at its position to a png file. |\n| [`save_state`](#manim.mobject.mobject.Mobject.save_state \"manim.mobject.mobject.Mobject.save_state\") | Save the current state (position, color \\& size). |\n| [`scale`](#manim.mobject.mobject.Mobject.scale \"manim.mobject.mobject.Mobject.scale\") | Scale the size by a factor. |\n| [`scale_to_fit_depth`](#manim.mobject.mobject.Mobject.scale_to_fit_depth \"manim.mobject.mobject.Mobject.scale_to_fit_depth\") | Scales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a depth while keeping width/height proportional. |\n| [`scale_to_fit_height`](#manim.mobject.mobject.Mobject.scale_to_fit_height \"manim.mobject.mobject.Mobject.scale_to_fit_height\") | Scales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a height while keeping width/depth proportional. |\n| [`scale_to_fit_width`](#manim.mobject.mobject.Mobject.scale_to_fit_width \"manim.mobject.mobject.Mobject.scale_to_fit_width\") | Scales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a width while keeping height/depth proportional. |\n| [`set`](#manim.mobject.mobject.Mobject.set \"manim.mobject.mobject.Mobject.set\") | Sets attributes. |\n| [`set_color`](#manim.mobject.mobject.Mobject.set_color \"manim.mobject.mobject.Mobject.set_color\") | Condition is function which takes in one arguments, (x, y, z). |\n| [`set_color_by_gradient`](#manim.mobject.mobject.Mobject.set_color_by_gradient \"manim.mobject.mobject.Mobject.set_color_by_gradient\") |  |\n| `set_colors_by_radial_gradient` |  |\n| `set_coord` |  |\n| [`set_default`](#manim.mobject.mobject.Mobject.set_default \"manim.mobject.mobject.Mobject.set_default\") | Sets the default values of keyword arguments. |\n| `set_submobject_colors_by_gradient` |  |\n| `set_submobject_colors_by_radial_gradient` |  |\n| [`set_x`](#manim.mobject.mobject.Mobject.set_x \"manim.mobject.mobject.Mobject.set_x\") | Set x value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`) |\n| [`set_y`](#manim.mobject.mobject.Mobject.set_y \"manim.mobject.mobject.Mobject.set_y\") | Set y value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`) |\n| [`set_z`](#manim.mobject.mobject.Mobject.set_z \"manim.mobject.mobject.Mobject.set_z\") | Set z value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`) |\n| [`set_z_index`](#manim.mobject.mobject.Mobject.set_z_index \"manim.mobject.mobject.Mobject.set_z_index\") | Sets the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")'s `z_index` to the value specified in z\\_index\\_value. |\n| [`set_z_index_by_z_Point3D`](#manim.mobject.mobject.Mobject.set_z_index_by_z_Point3D \"manim.mobject.mobject.Mobject.set_z_index_by_z_Point3D\") | Sets the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")'s z Point3D to the value of `z_index`. |\n| [`shift`](#manim.mobject.mobject.Mobject.shift \"manim.mobject.mobject.Mobject.shift\") | Shift by the given vectors. |\n| `shift_onto_screen` |  |\n| `show` |  |\n| [`shuffle`](#manim.mobject.mobject.Mobject.shuffle \"manim.mobject.mobject.Mobject.shuffle\") | Shuffles the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"). |\n| [`shuffle_submobjects`](#manim.mobject.mobject.Mobject.shuffle_submobjects \"manim.mobject.mobject.Mobject.shuffle_submobjects\") | Shuffles the order of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") |\n| [`sort`](#manim.mobject.mobject.Mobject.sort \"manim.mobject.mobject.Mobject.sort\") | Sorts the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") by a function defined by `submob_func`. |\n| [`sort_submobjects`](#manim.mobject.mobject.Mobject.sort_submobjects \"manim.mobject.mobject.Mobject.sort_submobjects\") | Sort the [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") |\n| `space_out_submobjects` |  |\n| `split` |  |\n| `stretch` |  |\n| `stretch_about_point` |  |\n| [`stretch_to_fit_depth`](#manim.mobject.mobject.Mobject.stretch_to_fit_depth \"manim.mobject.mobject.Mobject.stretch_to_fit_depth\") | Stretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a depth, not keeping width/height proportional. |\n| [`stretch_to_fit_height`](#manim.mobject.mobject.Mobject.stretch_to_fit_height \"manim.mobject.mobject.Mobject.stretch_to_fit_height\") | Stretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a height, not keeping width/depth proportional. |\n| [`stretch_to_fit_width`](#manim.mobject.mobject.Mobject.stretch_to_fit_width \"manim.mobject.mobject.Mobject.stretch_to_fit_width\") | Stretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a width, not keeping height/depth proportional. |\n| `surround` |  |\n| [`suspend_updating`](#manim.mobject.mobject.Mobject.suspend_updating \"manim.mobject.mobject.Mobject.suspend_updating\") | Disable updating from updaters and animations. |\n| `throw_error_if_no_points` |  |\n| [`to_corner`](#manim.mobject.mobject.Mobject.to_corner \"manim.mobject.mobject.Mobject.to_corner\") | Moves this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to the given corner of the screen. |\n| [`to_edge`](#manim.mobject.mobject.Mobject.to_edge \"manim.mobject.mobject.Mobject.to_edge\") | Moves this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to the given edge of the screen, without affecting its position in the other dimension. |\n| `to_original_color` |  |\n| [`update`](#manim.mobject.mobject.Mobject.update \"manim.mobject.mobject.Mobject.update\") | Apply all updaters. |\nAttributes\n| [`animate`](#manim.mobject.mobject.Mobject.animate \"manim.mobject.mobject.Mobject.animate\") | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| [`depth`](#manim.mobject.mobject.Mobject.depth \"manim.mobject.mobject.Mobject.depth\") | The depth of the mobject. |\n| [`height`](#manim.mobject.mobject.Mobject.height \"manim.mobject.mobject.Mobject.height\") | The height of the mobject. |\n| [`width`](#manim.mobject.mobject.Mobject.width \"manim.mobject.mobject.Mobject.width\") | The width of the mobject. |\n*classmethod* \\_add\\_intrinsic\\_animation\\_overrides()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject._add_intrinsic_animation_overrides)[¶](#manim.mobject.mobject.Mobject._add_intrinsic_animation_overrides \"Link to this definition\")\nInitializes animation overrides marked with the [`override_animation()`](manim.animation.animation.html#manim.animation.animation.override_animation \"manim.animation.animation.override_animation\")\ndecorator.\nReturn type:\nNone\n\\_assert\\_valid\\_submobjects(*submobjects*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject._assert_valid_submobjects)[¶](#manim.mobject.mobject.Mobject._assert_valid_submobjects \"Link to this definition\")\nCheck that all submobjects are actually instances of\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), and that none of them is `self` (a\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") cannot contain itself).\nThis is an auxiliary function called when adding Mobjects to the\n[`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") list.\nThis function is intended to be overridden by subclasses such as\n`VMobject`, which should assert that only other VMobjects\nmay be added into it.\nParameters:\n**submobjects** (*Iterable**\\[*[*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The list containing values to validate.\nReturns:\nThe Mobject itself.\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nRaises:\n* **TypeError** – If any of the values in submobjects is not a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **ValueError** – If there was an attempt to add a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as its own\n submobject.\nadd(*\\*mobjects*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.add)[¶](#manim.mobject.mobject.Mobject.add \"Link to this definition\")\nAdd mobjects as submobjects.\nThe mobjects are added to [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\").\nSubclasses of mobject may implement `+` and `+=` dunder methods.\nParameters:\n**mobjects** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nRaises:\n* **ValueError** – When a mobject tries to add itself.\n* **TypeError** – When trying to add an object that is not an instance of [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nNotes\nA mobject cannot contain itself, and it cannot contain a submobject\nmore than once. If the parent mobject is displayed, the newly\\-added\nsubmobjects will also be displayed (i.e. they are automatically added\nto the parent Scene).\nSee also\n[`remove()`](#manim.mobject.mobject.Mobject.remove \"manim.mobject.mobject.Mobject.remove\"), [`add_to_back()`](#manim.mobject.mobject.Mobject.add_to_back \"manim.mobject.mobject.Mobject.add_to_back\")\nExamples\n```\n>>> outer = Mobject()\n>>> inner = Mobject()\n>>> outer = outer.add(inner)\n```\nDuplicates are not added again:\n```\n>>> outer = outer.add(inner)\n>>> len(outer.submobjects)\n1\n```\nOnly Mobjects can be added:\n```\n>>> outer.add(3)\nTraceback (most recent call last):\n...\nTypeError: Only values of type Mobject can be added as submobjects of Mobject, but the value 3 (at index 0) is of type int.\n```\nAdding an object to itself raises an error:\n```\n>>> outer.add(outer)\nTraceback (most recent call last):\n...\nValueError: Cannot add Mobject as a submobject of itself (at index 0).\n```\nA given mobject cannot be added as a submobject\ntwice to some parent:\n```\n>>> parent = Mobject(name=\"parent\")\n>>> child = Mobject(name=\"child\")\n>>> parent.add(child, child)\n[...] WARNING  ...\nparent\n>>> parent.submobjects\n[child]\n```\n*classmethod* add\\_animation\\_override(*animation\\_class*, *override\\_func*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.add_animation_override)[¶](#manim.mobject.mobject.Mobject.add_animation_override \"Link to this definition\")\nAdd an animation override.\nThis does not apply to subclasses.\nParameters:\n* **animation\\_class** (*type**\\[*[*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The animation type to be overridden\n* **override\\_func** ([*FunctionOverride*](manim.typing.html#manim.typing.FunctionOverride \"manim.typing.FunctionOverride\")) – The function returning an animation replacing the default animation. It gets\npassed the parameters given to the animation constructor.\nRaises:\n**MultiAnimationOverrideException** – If the overridden animation was already overridden.\nReturn type:\nNone\nadd\\_background\\_rectangle(*color\\=None*, *opacity\\=0\\.75*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.add_background_rectangle)[¶](#manim.mobject.mobject.Mobject.add_background_rectangle \"Link to this definition\")\nAdd a BackgroundRectangle as submobject.\nThe BackgroundRectangle is added behind other submobjects.\nThis can be used to increase the mobjects visibility in front of a noisy background.\nParameters:\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – The color of the BackgroundRectangle\n* **opacity** (*float*) – The opacity of the BackgroundRectangle\n* **kwargs** – Additional keyword arguments passed to the BackgroundRectangle constructor\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`add_to_back()`](#manim.mobject.mobject.Mobject.add_to_back \"manim.mobject.mobject.Mobject.add_to_back\"), [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\")\nadd\\_to\\_back(*\\*mobjects*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.add_to_back)[¶](#manim.mobject.mobject.Mobject.add_to_back \"Link to this definition\")\nAdd all passed mobjects to the back of the submobjects.\nIf [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") already contains the given mobjects, they just get moved\nto the back instead.\nParameters:\n**mobjects** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to add.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\nTechnically, this is done by adding (or moving) the mobjects to\nthe head of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"). The head of this list is rendered\nfirst, which places the corresponding mobjects behind the\nsubsequent list members.\nRaises:\n* **ValueError** – When a mobject tries to add itself.\n* **TypeError** – When trying to add an object that is not an instance of [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobjects** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nNotes\nA mobject cannot contain itself, and it cannot contain a submobject\nmore than once. If the parent mobject is displayed, the newly\\-added\nsubmobjects will also be displayed (i.e. they are automatically added\nto the parent Scene).\nSee also\n[`remove()`](#manim.mobject.mobject.Mobject.remove \"manim.mobject.mobject.Mobject.remove\"), [`add()`](#manim.mobject.mobject.Mobject.add \"manim.mobject.mobject.Mobject.add\")\nadd\\_updater(*update\\_function*, *index\\=None*, *call\\_updater\\=False*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.add_updater)[¶](#manim.mobject.mobject.Mobject.add_updater \"Link to this definition\")\nAdd an update function to this mobject.\nUpdate functions, or updaters in short, are functions that are applied to the\nMobject in every frame.\nParameters:\n* **update\\_function** ([*Updater*](manim.mobject.mobject.html#manim.mobject.mobject.Updater \"manim.mobject.mobject.Updater\")) – The update function to be added.\nWhenever [`update()`](#manim.mobject.mobject.Mobject.update \"manim.mobject.mobject.Mobject.update\") is called, this update function gets called using\n`self` as the first parameter.\nThe updater can have a second parameter `dt`. If it uses this parameter,\nit gets called using a second value `dt`, usually representing the time\nin seconds since the last call of [`update()`](#manim.mobject.mobject.Mobject.update \"manim.mobject.mobject.Mobject.update\").\n* **index** (*int* *\\|* *None*) – The index at which the new updater should be added in `self.updaters`.\nIn case `index` is `None` the updater will be added at the end.\n* **call\\_updater** (*bool*) – Whether or not to call the updater initially. If `True`, the updater will\nbe called using `dt=0`.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\nExample: NextToUpdater [¶](#nexttoupdater)\n```\nfrom manim import *\nclass NextToUpdater(Scene):\n    def construct(self):\n        def update_label(mobject):\n            mobject.set_value(dot.get_center()[0])\n            mobject.next_to(dot)\n        dot = Dot(RIGHT*3)\n        label = DecimalNumber()\n        label.add_updater(update_label)\n        self.add(dot, label)\n        self.play(Rotating(dot, angle=TAU, about_point=ORIGIN, run_time=TAU, rate_func=linear))\n```\n```\nclass NextToUpdater(Scene):\n    def construct(self):\n        def update_label(mobject):\n            mobject.set_value(dot.get_center()[0])\n            mobject.next_to(dot)\n        dot = Dot(RIGHT*3)\n        label = DecimalNumber()\n        label.add_updater(update_label)\n        self.add(dot, label)\n        self.play(Rotating(dot, angle=TAU, about_point=ORIGIN, run_time=TAU, rate_func=linear))\n```\nExample: DtUpdater [¶](#dtupdater)\n```\nfrom manim import *\nclass DtUpdater(Scene):\n    def construct(self):\n        square = Square()\n        #Let the square rotate 90° per second\n        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))\n        self.add(square)\n        self.wait(2)\n```\n```\nclass DtUpdater(Scene):\n    def construct(self):\n        square = Square()\n        #Let the square rotate 90° per second\n        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))\n        self.add(square)\n        self.wait(2)\n```\nSee also\n[`get_updaters()`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\"), [`remove_updater()`](#manim.mobject.mobject.Mobject.remove_updater \"manim.mobject.mobject.Mobject.remove_updater\"), [`UpdateFromFunc`](manim.animation.updaters.update.UpdateFromFunc.html#manim.animation.updaters.update.UpdateFromFunc \"manim.animation.updaters.update.UpdateFromFunc\"), [`Rotating`](manim.animation.rotation.Rotating.html#manim.animation.rotation.Rotating \"manim.animation.rotation.Rotating\"), [`rotate()`](#manim.mobject.mobject.Mobject.rotate \"manim.mobject.mobject.Mobject.rotate\"), [`animate`](#manim.mobject.mobject.Mobject.animate \"manim.mobject.mobject.Mobject.animate\")\nalign\\_data(*mobject*, *skip\\_point\\_alignment\\=False*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.align_data)[¶](#manim.mobject.mobject.Mobject.align_data \"Link to this definition\")\nAligns the family structure and data of this mobject with another mobject.\nAfterwards, the two mobjects will have the same number of submobjects\n(see `align_submobjects()`) and the same parent structure (see\n[`null_point_align()`](#manim.mobject.mobject.Mobject.null_point_align \"manim.mobject.mobject.Mobject.null_point_align\")). If `skip_point_alignment` is `False`,\nthey will also have the same number of points (see [`align_points()`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject.align_points \"manim.mobject.types.vectorized_mobject.VMobject.align_points\")).\nParameters:\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The other mobject this mobject should be aligned to.\n* **skip\\_point\\_alignment** (*bool*) – Controls whether or not the computationally expensive\npoint alignment is skipped (default: `False`).\nReturn type:\nNone\nNote\nThis method is primarily used internally by [`become()`](#manim.mobject.mobject.Mobject.become \"manim.mobject.mobject.Mobject.become\") and the\n[`Transform`](manim.animation.transform.Transform.html#manim.animation.transform.Transform \"manim.animation.transform.Transform\") animation to ensure that mobjects are structurally\ncompatible before transformation.\nExamples\n```\n>>> from manim import Rectangle, Line, ORIGIN, RIGHT\n>>> rect = Rectangle(width=4.0, height=2.0, grid_xstep=1.0, grid_ystep=0.5)\n>>> line = Line(start=ORIGIN,end=RIGHT)\n>>> line.align_data(rect)\n>>> len(line.get_family()) == len(rect.get_family())\nTrue\n>>> line.get_num_points() == rect.get_num_points()\nTrue\n```\nSee also\n[`Transform`](manim.animation.transform.Transform.html#manim.animation.transform.Transform \"manim.animation.transform.Transform\"), [`become()`](#manim.mobject.mobject.Mobject.become \"manim.mobject.mobject.Mobject.become\"), [`align_points()`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject.align_points \"manim.mobject.types.vectorized_mobject.VMobject.align_points\"), [`get_family()`](#manim.mobject.mobject.Mobject.get_family \"manim.mobject.mobject.Mobject.get_family\")\nalign\\_on\\_border(*direction*, *buff\\=0\\.5*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.align_on_border)[¶](#manim.mobject.mobject.Mobject.align_on_border \"Link to this definition\")\nDirection just needs to be a vector pointing towards side or\ncorner in the 2d plane.\nParameters:\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **buff** (*float*)\nReturn type:\nSelf\nalign\\_to(*mobject\\_or\\_point*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.align_to)[¶](#manim.mobject.mobject.Mobject.align_to \"Link to this definition\")\nAligns mobject to another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") in a certain direction.\nExamples:\nmob1\\.align\\_to(mob2, UP) moves mob1 vertically so that its\ntop edge lines ups with mob2’s top edge.\nParameters:\n* **mobject\\_or\\_point** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\n*property* animate*: \\_AnimationBuilder \\| Self*[¶](#manim.mobject.mobject.Mobject.animate \"Link to this definition\")\nUsed to animate the application of any method of `self`.\nAny method called on `animate` is converted to an animation of applying\nthat method on the mobject itself.\nFor example, `square.set_fill(WHITE)` sets the fill color of a square,\nwhile `square.animate.set_fill(WHITE)` animates this action.\nMultiple methods can be put in a single animation once via chaining:\n```\nself.play(my_mobject.animate.shift(RIGHT).rotate(PI))\n```\nWarning\nPassing multiple animations for the same [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") in one\ncall to [`play()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\") is discouraged and will most likely\nnot work properly. Instead of writing an animation like\n```\nself.play(\n    my_mobject.animate.shift(RIGHT), my_mobject.animate.rotate(PI)\n)\n```\nmake use of method chaining.\nKeyword arguments that can be passed to [`Scene.play()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\") can be passed\ndirectly after accessing `.animate`, like so:\n```\nself.play(my_mobject.animate(rate_func=linear).shift(RIGHT))\n```\nThis is especially useful when animating simultaneous `.animate` calls that\nyou want to behave differently:\n```\nself.play(\n    mobject1.animate(run_time=2).rotate(PI),\n    mobject2.animate(rate_func=there_and_back).shift(RIGHT),\n)\n```\nSee also\n[`override_animate()`](manim.mobject.mobject.html#manim.mobject.mobject.override_animate \"manim.mobject.mobject.override_animate\")\nExamples\nExample: AnimateExample [¶](#animateexample)\n```\nfrom manim import *\nclass AnimateExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT))\n        self.play(s.animate.scale(2))\n        self.play(s.animate.rotate(PI / 2))\n        self.play(Uncreate(s))\n```\n```\nclass AnimateExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT))\n        self.play(s.animate.scale(2))\n        self.play(s.animate.rotate(PI / 2))\n        self.play(Uncreate(s))\n```\nExample: AnimateChainExample [¶](#animatechainexample)\n```\nfrom manim import *\nclass AnimateChainExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT).scale(2).rotate(PI / 2))\n        self.play(Uncreate(s))\n```\n```\nclass AnimateChainExample(Scene):\n    def construct(self):\n        s = Square()\n        self.play(Create(s))\n        self.play(s.animate.shift(RIGHT).scale(2).rotate(PI / 2))\n        self.play(Uncreate(s))\n```\nExample: AnimateWithArgsExample [¶](#animatewithargsexample)\n```\nfrom manim import *\nclass AnimateWithArgsExample(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n        VGroup(s, c).arrange(RIGHT, buff=2)\n        self.add(s, c)\n        self.play(\n            s.animate(run_time=2).rotate(PI / 2),\n            c.animate(rate_func=there_and_back).shift(RIGHT),\n        )\n```\n```\nclass AnimateWithArgsExample(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n        VGroup(s, c).arrange(RIGHT, buff=2)\n        self.add(s, c)\n        self.play(\n            s.animate(run_time=2).rotate(PI / 2),\n            c.animate(rate_func=there_and_back).shift(RIGHT),\n        )\n```\nWarning\n`.animate`will interpolate the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") between its points prior to\n`.animate` and its points after applying `.animate` to it. This may\nresult in unexpected behavior when attempting to interpolate along paths,\nor rotations (see [`rotate()`](#manim.mobject.mobject.Mobject.rotate \"manim.mobject.mobject.Mobject.rotate\")).\nIf you want animations to consider the points between, consider using\n[`ValueTracker`](manim.mobject.value_tracker.ValueTracker.html#manim.mobject.value_tracker.ValueTracker \"manim.mobject.value_tracker.ValueTracker\") with updaters instead (see [`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\")).\n*classmethod* animation\\_override\\_for(*animation\\_class*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.animation_override_for)[¶](#manim.mobject.mobject.Mobject.animation_override_for \"Link to this definition\")\nReturns the function defining a specific animation override for this class.\nParameters:\n**animation\\_class** (*type**\\[*[*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The animation class for which the override function should be returned.\nReturns:\nThe function returning the override animation or `None` if no such animation\noverride is defined.\nReturn type:\nOptional\\[Callable\\[\\[[Mobject](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), …], [Animation](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")]]\napply\\_complex\\_function(*function*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.apply_complex_function)[¶](#manim.mobject.mobject.Mobject.apply_complex_function \"Link to this definition\")\nApplies a complex function to a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nThe x and y Point3Ds correspond to the real and imaginary parts respectively.\nExample\nExample: ApplyFuncExample [¶](#applyfuncexample)\n```\nfrom manim import *\nclass ApplyFuncExample(Scene):\n    def construct(self):\n        circ = Circle().scale(1.5)\n        circ_ref = circ.copy()\n        circ.apply_complex_function(\n            lambda x: np.exp(x*1j)\n        )\n        t = ValueTracker(0)\n        circ.add_updater(\n            lambda x: x.become(circ_ref.copy().apply_complex_function(\n                lambda x: np.exp(x+t.get_value()*1j)\n            )).set_color(BLUE)\n        )\n        self.add(circ_ref)\n        self.play(TransformFromCopy(circ_ref, circ))\n        self.play(t.animate.set_value(TAU), run_time=3)\n```\n```\nclass ApplyFuncExample(Scene):\n    def construct(self):\n        circ = Circle().scale(1.5)\n        circ_ref = circ.copy()\n        circ.apply_complex_function(\n            lambda x: np.exp(x*1j)\n        )\n        t = ValueTracker(0)\n        circ.add_updater(\n            lambda x: x.become(circ_ref.copy().apply_complex_function(\n                lambda x: np.exp(x+t.get_value()*1j)\n            )).set_color(BLUE)\n        )\n        self.add(circ_ref)\n        self.play(TransformFromCopy(circ_ref, circ))\n        self.play(t.animate.set_value(TAU), run_time=3)\n```\nParameters:\n**function** (*Callable**\\[**\\[**complex**]**,* *complex**]*)\nReturn type:\nSelf\napply\\_to\\_family(*func*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.apply_to_family)[¶](#manim.mobject.mobject.Mobject.apply_to_family \"Link to this definition\")\nApply a function to `self` and every submobject with points recursively.\nParameters:\n**func** (*Callable**\\[**\\[*[*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]**,* *None**]*) – The function to apply to each mobject. `func` gets passed the respective\n(sub)mobject as parameter.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`family_members_with_points()`](#manim.mobject.mobject.Mobject.family_members_with_points \"manim.mobject.mobject.Mobject.family_members_with_points\")\narrange(*direction\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0\\.25*, *center\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.arrange)[¶](#manim.mobject.mobject.Mobject.arrange \"Link to this definition\")\nSorts [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") next to each other on screen.\nExamples\nExample: Example [¶](#example)\n![../_images/Example-1.png](../_images/Example-1.png)\n```\nfrom manim import *\nclass Example(Scene):\n    def construct(self):\n        s1 = Square()\n        s2 = Square()\n        s3 = Square()\n        s4 = Square()\n        x = VGroup(s1, s2, s3, s4).set_x(0).arrange(buff=1.0)\n        self.add(x)\n```\n```\nclass Example(Scene):\n    def construct(self):\n        s1 = Square()\n        s2 = Square()\n        s3 = Square()\n        s4 = Square()\n        x = VGroup(s1, s2, s3, s4).set_x(0).arrange(buff=1.0)\n        self.add(x)\n```\nParameters:\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **buff** (*float*)\n* **center** (*bool*)\nReturn type:\nSelf\narrange\\_in\\_grid(*rows\\=None*, *cols\\=None*, *buff\\=0\\.25*, *cell\\_alignment\\=array(\\[0\\., 0\\., 0\\.])*, *row\\_alignments\\=None*, *col\\_alignments\\=None*, *row\\_heights\\=None*, *col\\_widths\\=None*, *flow\\_order\\='rd'*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.arrange_in_grid)[¶](#manim.mobject.mobject.Mobject.arrange_in_grid \"Link to this definition\")\nArrange submobjects in a grid.\nParameters:\n* **rows** (*int* *\\|* *None*) – The number of rows in the grid.\n* **cols** (*int* *\\|* *None*) – The number of columns in the grid.\n* **buff** (*float* *\\|* *tuple**\\[**float**,* *float**]*) – The gap between grid cells. To specify a different buffer in the horizontal and\nvertical directions, a tuple of two values can be given \\- `(row, col)`.\n* **cell\\_alignment** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The way each submobject is aligned in its grid cell.\n* **row\\_alignments** (*str* *\\|* *None*) – The vertical alignment for each row (top to bottom). Accepts the following characters: `\"u\"` \\-\nup, `\"c\"` \\- center, `\"d\"` \\- down.\n* **col\\_alignments** (*str* *\\|* *None*) – The horizontal alignment for each column (left to right). Accepts the following characters `\"l\"` \\- left,\n`\"c\"` \\- center, `\"r\"` \\- right.\n* **row\\_heights** (*Iterable**\\[**float* *\\|* *None**]* *\\|* *None*) – Defines a list of heights for certain rows (top to bottom). If the list contains\n`None`, the corresponding row will fit its height automatically based\non the highest element in that row.\n* **col\\_widths** (*Iterable**\\[**float* *\\|* *None**]* *\\|* *None*) – Defines a list of widths for certain columns (left to right). If the list contains `None`, the\ncorresponding column will fit its width automatically based on the widest element in that column.\n* **flow\\_order** (*str*) – The order in which submobjects fill the grid. Can be one of the following values:\n“rd”, “dr”, “ld”, “dl”, “ru”, “ur”, “lu”, “ul”. (“rd” \\-\\> fill rightwards then downwards)\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nRaises:\n* **ValueError** – If `rows` and `cols` are too small to fit all submobjects.\n* **ValueError** – If `cols`, `col_alignments` and `col_widths` or `rows`,\n `row_alignments` and `row_heights` have mismatching sizes.\nNotes\nIf only one of `cols` and `rows` is set implicitly, the other one will be chosen big\nenough to fit all submobjects. If neither is set, they will be chosen to be about the same,\ntending towards `cols` \\> `rows` (simply because videos are wider than they are high).\nIf both `cell_alignment` and `row_alignments` / `col_alignments` are\ndefined, the latter has higher priority.\nExamples\nExample: ExampleBoxes [¶](#exampleboxes)\n![../_images/ExampleBoxes-1.png](../_images/ExampleBoxes-1.png)\n```\nfrom manim import *\nclass ExampleBoxes(Scene):\n    def construct(self):\n        boxes=VGroup(*[Square() for s in range(0,6)])\n        boxes.arrange_in_grid(rows=2, buff=0.1)\n        self.add(boxes)\n```\n```\nclass ExampleBoxes(Scene):\n    def construct(self):\n        boxes=VGroup(*[Square() for s in range(0,6)])\n        boxes.arrange_in_grid(rows=2, buff=0.1)\n        self.add(boxes)\n```\nExample: ArrangeInGrid [¶](#arrangeingrid)\n![../_images/ArrangeInGrid-1.png](../_images/ArrangeInGrid-1.png)\n```\nfrom manim import *\nclass ArrangeInGrid(Scene):\n    def construct(self):\n        boxes = VGroup(*[\n            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))\n            for i in range(24)\n        ])\n        self.add(boxes)\n        boxes.arrange_in_grid(\n            buff=(0.25,0.5),\n            col_alignments=\"lccccr\",\n            row_alignments=\"uccd\",\n            col_widths=[1, *[None]*4, 1],\n            row_heights=[1, None, None, 1],\n            flow_order=\"dr\"\n        )\n```\n```\nclass ArrangeInGrid(Scene):\n    def construct(self):\n        boxes = VGroup(*[\n            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))\n            for i in range(24)\n        ])\n        self.add(boxes)\n        boxes.arrange_in_grid(\n            buff=(0.25,0.5),\n            col_alignments=\"lccccr\",\n            row_alignments=\"uccd\",\n            col_widths=[1, *[None]*4, 1],\n            row_heights=[1, None, None, 1],\n            flow_order=\"dr\"\n        )\n```\narrange\\_submobjects(*\\*args*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.arrange_submobjects)[¶](#manim.mobject.mobject.Mobject.arrange_submobjects \"Link to this definition\")\nArrange the position of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") with a small buffer.\nExamples\nExample: ArrangeSumobjectsExample [¶](#arrangesumobjectsexample)\n![../_images/ArrangeSumobjectsExample-1.png](../_images/ArrangeSumobjectsExample-1.png)\n```\nfrom manim import *\nclass ArrangeSumobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])\n        s.shift(UP).set_color(BLUE)\n        s2= s.copy().set_color(RED)\n        s2.arrange_submobjects()\n        s2.shift(DOWN)\n        self.add(s,s2)\n```\n```\nclass ArrangeSumobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])\n        s.shift(UP).set_color(BLUE)\n        s2= s.copy().set_color(RED)\n        s2.arrange_submobjects()\n        s2.shift(DOWN)\n        self.add(s,s2)\n```\nReturn type:\nSelf\nbecome(*mobject*, *match\\_height\\=False*, *match\\_width\\=False*, *match\\_depth\\=False*, *match\\_center\\=False*, *stretch\\=False*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.become)[¶](#manim.mobject.mobject.Mobject.become \"Link to this definition\")\nEdit points, colors and submobjects to be identical\nto another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\nIf both match\\_height and match\\_width are `True` then the transformed [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nwill match the height first and then the width.\nParameters:\n* **match\\_height** (*bool*) – Whether or not to preserve the height of the original\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **match\\_width** (*bool*) – Whether or not to preserve the width of the original\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **match\\_depth** (*bool*) – Whether or not to preserve the depth of the original\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **match\\_center** (*bool*) – Whether or not to preserve the center of the original\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **stretch** (*bool*) – Whether or not to stretch the target mobject to match the\nthe proportions of the original [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nExamples\nExample: BecomeScene [¶](#becomescene)\n```\nfrom manim import *\nclass BecomeScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        circ.become(square)\n        self.wait(0.5)\n```\n```\nclass BecomeScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        circ.become(square)\n        self.wait(0.5)\n```\nThe following examples illustrate how mobject measurements\nchange when using the `match_...` and `stretch` arguments.\nWe start with a rectangle that is 2 units high and 4 units wide,\nwhich we want to turn into a circle of radius 3:\n```\n>>> from manim import Rectangle, Circle\n>>> import numpy as np\n>>> rect = Rectangle(height=2, width=4)\n>>> circ = Circle(radius=3)\n```\nWith `stretch=True`, the target circle is deformed to match\nthe proportions of the rectangle, which results in the target\nmobject being an ellipse with height 2 and width 4\\. We can\ncheck that the resulting points satisfy the ellipse equation\n\\\\(x^2/a^2 \\+ y^2/b^2 \\= 1\\\\) with \\\\(a \\= 4/2\\\\) and \\\\(b \\= 2/2\\\\)\nbeing the semi\\-axes:\n```\n>>> result = rect.copy().become(circ, stretch=True)\n>>> result.height, result.width\n(np.float64(2.0), np.float64(4.0))\n>>> ellipse_points = np.array(result.get_anchors())\n>>> ellipse_eq = np.sum(ellipse_points**2 * [1/4, 1, 0], axis=1)\n>>> np.allclose(ellipse_eq, 1)\nTrue\n```\nWith `match_height=True` and `match_width=True` the circle is\nscaled such that the height or the width of the rectangle will\nbe preserved, respectively.\nThe points of the resulting mobject satisfy the circle equation\n\\\\(x^2 \\+ y^2 \\= r^2\\\\) for the corresponding radius \\\\(r\\\\):\n```\n>>> result = rect.copy().become(circ, match_height=True)\n>>> result.height, result.width\n(np.float64(2.0), np.float64(2.0))\n>>> circle_points = np.array(result.get_anchors())\n>>> circle_eq = np.sum(circle_points**2, axis=1)\n>>> np.allclose(circle_eq, 1)\nTrue\n>>> result = rect.copy().become(circ, match_width=True)\n>>> result.height, result.width\n(np.float64(4.0), np.float64(4.0))\n>>> circle_points = np.array(result.get_anchors())\n>>> circle_eq = np.sum(circle_points**2, axis=1)\n>>> np.allclose(circle_eq, 2**2)\nTrue\n```\nWith `match_center=True`, the resulting mobject is moved such that\nits center is the same as the center of the original mobject:\n```\n>>> rect = rect.shift(np.array([0, 1, 0]))\n>>> np.allclose(rect.get_center(), circ.get_center())\nFalse\n>>> result = rect.copy().become(circ, match_center=True)\n>>> np.allclose(rect.get_center(), result.get_center())\nTrue\n```\nSee also\n[`align_data()`](#manim.mobject.mobject.Mobject.align_data \"manim.mobject.mobject.Mobject.align_data\"), `interpolate_color()`\ncenter()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.center)[¶](#manim.mobject.mobject.Mobject.center \"Link to this definition\")\nMoves the center of the mobject to the center of the scene.\nReturns:\nThe centered mobject.\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nclear\\_updaters(*recursive\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.clear_updaters)[¶](#manim.mobject.mobject.Mobject.clear_updaters \"Link to this definition\")\nRemove every updater.\nParameters:\n**recursive** (*bool*) – Whether to recursively call `clear_updaters` on all submobjects.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`remove_updater()`](#manim.mobject.mobject.Mobject.remove_updater \"manim.mobject.mobject.Mobject.remove_updater\"), [`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\"), [`get_updaters()`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\")\ncopy()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.copy)[¶](#manim.mobject.mobject.Mobject.copy \"Link to this definition\")\nCreate and return an identical copy of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") including all\n[`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\").\nReturns:\nThe copy.\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\nThe clone is initially not visible in the Scene, even if the original was.\n*property* depth*: float*[¶](#manim.mobject.mobject.Mobject.depth \"Link to this definition\")\nThe depth of the mobject.\nReturn type:\n`float`\nSee also\n[`length_over_dim()`](#manim.mobject.mobject.Mobject.length_over_dim \"manim.mobject.mobject.Mobject.length_over_dim\")\nfamily\\_members\\_with\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.family_members_with_points)[¶](#manim.mobject.mobject.Mobject.family_members_with_points \"Link to this definition\")\nFilters the list of family members (generated by [`get_family()`](#manim.mobject.mobject.Mobject.get_family \"manim.mobject.mobject.Mobject.get_family\")) to include only mobjects with points.\nReturns:\nA list of mobjects that have points.\nReturn type:\nlist\\[[Mobject](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nExamples\n```\n>>> from manim import Square, Rectangle, VGroup, Group, Mobject, VMobject\n>>> s, r, m, v = Square(), Rectangle(), Mobject(), VMobject()\n>>> vg = VGroup(s, r)\n>>> gr = Group(vg, m, v)\n>>> gr.family_members_with_points()\n[Square, Rectangle]\n```\nSee also\n[`get_family()`](#manim.mobject.mobject.Mobject.get_family \"manim.mobject.mobject.Mobject.get_family\")\nflip(*axis\\=array(\\[0\\., 1\\., 0\\.])*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.flip)[¶](#manim.mobject.mobject.Mobject.flip \"Link to this definition\")\nFlips/Mirrors an mobject about its center.\nExamples\nExample: FlipExample [¶](#flipexample)\n![../_images/FlipExample-1.png](../_images/FlipExample-1.png)\n```\nfrom manim import *\nclass FlipExample(Scene):\n    def construct(self):\n        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)\n        self.add(s)\n        s2= s.copy().flip()\n        self.add(s2)\n```\n```\nclass FlipExample(Scene):\n    def construct(self):\n        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)\n        self.add(s)\n        s2= s.copy().flip()\n        self.add(s2)\n```\nParameters:\n**axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\ngenerate\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.generate_points)[¶](#manim.mobject.mobject.Mobject.generate_points \"Link to this definition\")\nInitializes [`points`](#manim.mobject.mobject.Mobject.points \"manim.mobject.mobject.Mobject.points\") and therefore the shape.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nobject\nget\\_all\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_all_points)[¶](#manim.mobject.mobject.Mobject.get_all_points \"Link to this definition\")\nReturn all points from this mobject and all submobjects.\nMay contain duplicates; the order is in a depth\\-first (pre\\-order)\ntraversal of the submobjects.\nReturn type:\n[*Point3D\\_Array*](manim.typing.html#manim.typing.Point3D_Array \"manim.typing.Point3D_Array\")\nget\\_bottom()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_bottom)[¶](#manim.mobject.mobject.Mobject.get_bottom \"Link to this definition\")\nGet bottom Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_center()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_center)[¶](#manim.mobject.mobject.Mobject.get_center \"Link to this definition\")\nGet center Point3Ds\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_color()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_color)[¶](#manim.mobject.mobject.Mobject.get_color \"Link to this definition\")\nReturns the color of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\n```\n>>> from manim import Square, RED\n>>> Square(color=RED).get_color() == RED\nTrue\n```\nReturn type:\n[*ManimColor*](manim.utils.color.core.ManimColor.html#manim.utils.color.core.ManimColor \"manim.utils.color.core.ManimColor\")\nget\\_coord(*dim*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_coord)[¶](#manim.mobject.mobject.Mobject.get_coord \"Link to this definition\")\nMeant to generalize `get_x`, `get_y` and `get_z`\nParameters:\n* **dim** (*int*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nget\\_corner(*direction*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_corner)[¶](#manim.mobject.mobject.Mobject.get_corner \"Link to this definition\")\nGet corner Point3Ds for certain direction.\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_critical\\_point(*direction*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_critical_point)[¶](#manim.mobject.mobject.Mobject.get_critical_point \"Link to this definition\")\nPicture a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"). Such a box has\n9 ‘critical points’: 4 corners, 4 edge center, the\ncenter. This returns one of them, along the given direction.\n```\nsample = Arc(start_angle=PI / 7, angle=PI / 5)\n# These are all equivalent\nmax_y_1 = sample.get_top()[1]\nmax_y_2 = sample.get_critical_point(UP)[1]\nmax_y_3 = sample.get_extremum_along_dim(dim=1, key=1)\n```\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_edge\\_center(*direction*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_edge_center)[¶](#manim.mobject.mobject.Mobject.get_edge_center \"Link to this definition\")\nGet edge Point3Ds for certain direction.\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_end()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_end)[¶](#manim.mobject.mobject.Mobject.get_end \"Link to this definition\")\nReturns the point, where the stroke that surrounds the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") ends.\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_family(*recurse\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_family)[¶](#manim.mobject.mobject.Mobject.get_family \"Link to this definition\")\nLists all mobjects in the hierarchy (family) of the given mobject,\nincluding the mobject itself and all its submobjects recursively.\nParameters:\n**recurse** (*bool*) – Just for consistency with get\\_family method in OpenGLMobject.\nReturns:\nA list of mobjects in the family of the given mobject.\nReturn type:\nlist\\[[Mobject](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nExamples\n```\n>>> from manim import Square, Rectangle, VGroup, Group, Mobject, VMobject\n>>> s, r, m, v = Square(), Rectangle(), Mobject(), VMobject()\n>>> vg = VGroup(s, r)\n>>> gr = Group(vg, m, v)\n>>> gr.get_family()\n[Group, VGroup(Square, Rectangle), Square, Rectangle, Mobject, VMobject]\n```\nSee also\n[`family_members_with_points()`](#manim.mobject.mobject.Mobject.family_members_with_points \"manim.mobject.mobject.Mobject.family_members_with_points\"), [`align_data()`](#manim.mobject.mobject.Mobject.align_data \"manim.mobject.mobject.Mobject.align_data\")\nget\\_left()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_left)[¶](#manim.mobject.mobject.Mobject.get_left \"Link to this definition\")\nGet left Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_merged\\_array(*array\\_attr*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_merged_array)[¶](#manim.mobject.mobject.Mobject.get_merged_array \"Link to this definition\")\nReturn all of a given attribute from this mobject and all submobjects.\nMay contain duplicates; the order is in a depth\\-first (pre\\-order)\ntraversal of the submobjects.\nParameters:\n**array\\_attr** (*str*)\nReturn type:\n*ndarray*\nget\\_midpoint()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_midpoint)[¶](#manim.mobject.mobject.Mobject.get_midpoint \"Link to this definition\")\nGet Point3Ds of the middle of the path that forms the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nExamples\nExample: AngleMidPoint [¶](#anglemidpoint)\n![../_images/AngleMidPoint-1.png](../_images/AngleMidPoint-1.png)\n```\nfrom manim import *\nclass AngleMidPoint(Scene):\n    def construct(self):\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)\n        a = Angle(line1, line2, radius=1.5, other_angle=False)\n        d = Dot(a.get_midpoint()).set_color(RED)\n        self.add(line1, line2, a, d)\n        self.wait()\n```\n```\nclass AngleMidPoint(Scene):\n    def construct(self):\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)\n        a = Angle(line1, line2, radius=1.5, other_angle=False)\n        d = Dot(a.get_midpoint()).set_color(RED)\n        self.add(line1, line2, a, d)\n        self.wait()\n```\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\n*static* get\\_mobject\\_type\\_class()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_mobject_type_class)[¶](#manim.mobject.mobject.Mobject.get_mobject_type_class \"Link to this definition\")\nReturn the base class of this mobject type.\nReturn type:\ntype\\[[*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]\nget\\_nadir()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_nadir)[¶](#manim.mobject.mobject.Mobject.get_nadir \"Link to this definition\")\nGet nadir (opposite the zenith) Point3Ds of a box bounding a 3D [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_point\\_mobject(*center\\=None*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_point_mobject)[¶](#manim.mobject.mobject.Mobject.get_point_mobject \"Link to this definition\")\nThe simplest [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to be transformed to or from self.\nShould by a point of the appropriate type\nget\\_right()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_right)[¶](#manim.mobject.mobject.Mobject.get_right \"Link to this definition\")\nGet right Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_start()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_start)[¶](#manim.mobject.mobject.Mobject.get_start \"Link to this definition\")\nReturns the point, where the stroke that surrounds the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") starts.\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_start\\_and\\_end()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_start_and_end)[¶](#manim.mobject.mobject.Mobject.get_start_and_end \"Link to this definition\")\nReturns starting and ending point of a stroke as a `tuple`.\nReturn type:\ntuple\\[TypeAliasForwardRef(‘\\~manim.typing.Point3D’), TypeAliasForwardRef(‘\\~manim.typing.Point3D’)]\nget\\_time\\_based\\_updaters()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_time_based_updaters)[¶](#manim.mobject.mobject.Mobject.get_time_based_updaters \"Link to this definition\")\nReturn all updaters using the `dt` parameter.\nThe updaters use this parameter as the input for difference in time.\nReturns:\nThe list of time based updaters.\nReturn type:\nList\\[`Callable`]\nSee also\n[`get_updaters()`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\"), [`has_time_based_updater()`](#manim.mobject.mobject.Mobject.has_time_based_updater \"manim.mobject.mobject.Mobject.has_time_based_updater\")\nget\\_top()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_top)[¶](#manim.mobject.mobject.Mobject.get_top \"Link to this definition\")\nGet top Point3Ds of a box bounding the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nget\\_updaters()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_updaters)[¶](#manim.mobject.mobject.Mobject.get_updaters \"Link to this definition\")\nReturn all updaters.\nReturns:\nThe list of updaters.\nReturn type:\nList\\[`Callable`]\nSee also\n[`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\"), [`get_time_based_updaters()`](#manim.mobject.mobject.Mobject.get_time_based_updaters \"manim.mobject.mobject.Mobject.get_time_based_updaters\")\nget\\_x(*direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_x)[¶](#manim.mobject.mobject.Mobject.get_x \"Link to this definition\")\nReturns x Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float`\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nfloat\nget\\_y(*direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_y)[¶](#manim.mobject.mobject.Mobject.get_y \"Link to this definition\")\nReturns y Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float`\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nfloat\nget\\_z(*direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_z)[¶](#manim.mobject.mobject.Mobject.get_z \"Link to this definition\")\nReturns z Point3D of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") as `float`\nParameters:\n**direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nfloat\nget\\_zenith()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.get_zenith)[¶](#manim.mobject.mobject.Mobject.get_zenith \"Link to this definition\")\nGet zenith Point3Ds of a box bounding a 3D [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nReturn type:\n[*Point3D*](manim.typing.html#manim.typing.Point3D \"manim.typing.Point3D\")\nhas\\_no\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.has_no_points)[¶](#manim.mobject.mobject.Mobject.has_no_points \"Link to this definition\")\nCheck if [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *does not* contains points.\nReturn type:\nbool\nhas\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.has_points)[¶](#manim.mobject.mobject.Mobject.has_points \"Link to this definition\")\nCheck if [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") contains points.\nReturn type:\nbool\nhas\\_time\\_based\\_updater()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.has_time_based_updater)[¶](#manim.mobject.mobject.Mobject.has_time_based_updater \"Link to this definition\")\nTest if `self` has a time based updater.\nReturns:\n`True` if at least one updater uses the `dt` parameter, `False`\notherwise.\nReturn type:\n`bool`\nSee also\n[`get_time_based_updaters()`](#manim.mobject.mobject.Mobject.get_time_based_updaters \"manim.mobject.mobject.Mobject.get_time_based_updaters\")\n*property* height*: float*[¶](#manim.mobject.mobject.Mobject.height \"Link to this definition\")\nThe height of the mobject.\nReturn type:\n`float`\nExamples\nExample: HeightExample [¶](#heightexample)\n```\nfrom manim import *\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```\n```\nclass HeightExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.height))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(height=5))\n        self.wait()\n```\nSee also\n[`length_over_dim()`](#manim.mobject.mobject.Mobject.length_over_dim \"manim.mobject.mobject.Mobject.length_over_dim\")\ninit\\_colors()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.init_colors)[¶](#manim.mobject.mobject.Mobject.init_colors \"Link to this definition\")\nInitializes the colors.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nobject\ninsert(*index*, *mobject*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.insert)[¶](#manim.mobject.mobject.Mobject.insert \"Link to this definition\")\nInserts a mobject at a specific position into self.submobjects\nEffectively just calls `self.submobjects.insert(index, mobject)`,\nwhere `self.submobjects` is a list.\nHighly adapted from `Mobject.add`.\nParameters:\n* **index** (*int*) – The index at which\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject to be inserted.\nReturn type:\nNone\ninterpolate(*mobject1*, *mobject2*, *alpha*, *path\\_func\\=\\<function interpolate\\>*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.interpolate)[¶](#manim.mobject.mobject.Mobject.interpolate \"Link to this definition\")\nTurns this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") into an interpolation between `mobject1`\nand `mobject2`.\nThe interpolation is applied to the points and color of the mobject.\nParameters:\n* **mobject1** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The starting Mobject.\n* **mobject2** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The target Mobject.\n* **alpha** (*float*) – Interpolation factor between 0 (at `mobject1`) and 1 (at `mobject2`).\n* **path\\_func** ([*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")) – The function defining the interpolation path. Defaults to a straight path.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\n* Both mobjects must have the same number of points. If not, this will raise an error.\nUse [`align_points()`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject.align_points \"manim.mobject.types.vectorized_mobject.VMobject.align_points\") to match point counts beforehand if needed.\n* This method is used internally by the [`Transform`](manim.animation.transform.Transform.html#manim.animation.transform.Transform \"manim.animation.transform.Transform\") animation\nto interpolate between two mobjects during a transformation.\nExamples\nExample: InterpolateExample [¶](#interpolateexample)\n![../_images/InterpolateExample-1.png](../_images/InterpolateExample-1.png)\n```\nfrom manim import *\nclass InterpolateExample(Scene):\n    def construct(self):\n        # No need for point alignment:\n        dotL = Dot(color=DARK_GREY).to_edge(LEFT)\n        dotR = Dot(color=YELLOW).scale(10).to_edge(RIGHT)\n        dotMid1 = VMobject().interpolate(dotL, dotR, alpha=0.1)\n        dotMid2 = VMobject().interpolate(dotL, dotR, alpha=0.25)\n        dotMid3 = VMobject().interpolate(dotL, dotR, alpha=0.5)\n        dotMid4 = VMobject().interpolate(dotL, dotR, alpha=0.75)\n        dots = VGroup(dotL, dotR, dotMid1, dotMid2, dotMid3, dotMid4)\n        # Needs point alignment:\n        line = Line(ORIGIN, UP).to_edge(LEFT)\n        sq = Square(color=RED, fill_opacity=1, stroke_color=BLUE).to_edge(RIGHT)\n        line.align_points(sq)\n        mid1 = VMobject().interpolate(line, sq, alpha=0.1)\n        mid2 = VMobject().interpolate(line, sq, alpha=0.25)\n        mid3 = VMobject().interpolate(line, sq, alpha=0.5)\n        mid4 = VMobject().interpolate(line, sq, alpha=0.75)\n        linesquares = VGroup(line, sq, mid1, mid2, mid3, mid4)\n        self.add(VGroup(dots, linesquares).arrange(DOWN, buff=1))\n```\n```\nclass InterpolateExample(Scene):\n    def construct(self):\n        # No need for point alignment:\n        dotL = Dot(color=DARK_GREY).to_edge(LEFT)\n        dotR = Dot(color=YELLOW).scale(10).to_edge(RIGHT)\n        dotMid1 = VMobject().interpolate(dotL, dotR, alpha=0.1)\n        dotMid2 = VMobject().interpolate(dotL, dotR, alpha=0.25)\n        dotMid3 = VMobject().interpolate(dotL, dotR, alpha=0.5)\n        dotMid4 = VMobject().interpolate(dotL, dotR, alpha=0.75)\n        dots = VGroup(dotL, dotR, dotMid1, dotMid2, dotMid3, dotMid4)\n        # Needs point alignment:\n        line = Line(ORIGIN, UP).to_edge(LEFT)\n        sq = Square(color=RED, fill_opacity=1, stroke_color=BLUE).to_edge(RIGHT)\n        line.align_points(sq)\n        mid1 = VMobject().interpolate(line, sq, alpha=0.1)\n        mid2 = VMobject().interpolate(line, sq, alpha=0.25)\n        mid3 = VMobject().interpolate(line, sq, alpha=0.5)\n        mid4 = VMobject().interpolate(line, sq, alpha=0.75)\n        linesquares = VGroup(line, sq, mid1, mid2, mid3, mid4)\n        self.add(VGroup(dots, linesquares).arrange(DOWN, buff=1))\n```\nSee also\n[`Transform`](manim.animation.transform.Transform.html#manim.animation.transform.Transform \"manim.animation.transform.Transform\"), [`align_points()`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject.align_points \"manim.mobject.types.vectorized_mobject.VMobject.align_points\"), `interpolate_color()`\ninvert(*recursive\\=False*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.invert)[¶](#manim.mobject.mobject.Mobject.invert \"Link to this definition\")\nInverts the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\").\nParameters:\n**recursive** (*bool*) – If `True`, all submobject lists of this mobject’s family are inverted.\nReturn type:\nNone\nExamples\nExample: InvertSumobjectsExample [¶](#invertsumobjectsexample)\n```\nfrom manim import *\nclass InvertSumobjectsExample(Scene):\n    def construct(self):\n        s = VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2 = s.copy()\n        s2.invert()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```\n```\nclass InvertSumobjectsExample(Scene):\n    def construct(self):\n        s = VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2 = s.copy()\n        s2.invert()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```\nlength\\_over\\_dim(*dim*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.length_over_dim)[¶](#manim.mobject.mobject.Mobject.length_over_dim \"Link to this definition\")\nMeasure the length of an [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") in a certain direction.\nParameters:\n**dim** (*int*)\nReturn type:\nfloat\nmatch\\_color(*mobject*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_color)[¶](#manim.mobject.mobject.Mobject.match_color \"Link to this definition\")\nMatch the color with the color of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_coord(*mobject*, *dim*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_coord)[¶](#manim.mobject.mobject.Mobject.match_coord \"Link to this definition\")\nMatch the Point3Ds with the Point3Ds of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **dim** (*int*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nmatch\\_depth(*mobject*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_depth)[¶](#manim.mobject.mobject.Mobject.match_depth \"Link to this definition\")\nMatch the depth with the depth of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_dim\\_size(*mobject*, *dim*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_dim_size)[¶](#manim.mobject.mobject.Mobject.match_dim_size \"Link to this definition\")\nMatch the specified dimension with the dimension of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **dim** (*int*)\nReturn type:\nSelf\nmatch\\_height(*mobject*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_height)[¶](#manim.mobject.mobject.Mobject.match_height \"Link to this definition\")\nMatch the height with the height of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_points(*mobject*, *copy\\_submobjects\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_points)[¶](#manim.mobject.mobject.Mobject.match_points \"Link to this definition\")\nEdit points, positions, and submobjects to be identical\nto another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), while keeping the style unchanged.\nExamples\nExample: MatchPointsScene [¶](#matchpointsscene)\n```\nfrom manim import *\nclass MatchPointsScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        self.play(circ.animate.match_points(square))\n        self.wait(0.5)\n```\n```\nclass MatchPointsScene(Scene):\n    def construct(self):\n        circ = Circle(fill_color=RED, fill_opacity=0.8)\n        square = Square(fill_color=BLUE, fill_opacity=0.2)\n        self.add(circ)\n        self.wait(0.5)\n        self.play(circ.animate.match_points(square))\n        self.wait(0.5)\n```\nParameters:\n* **mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **copy\\_submobjects** (*bool*)\nReturn type:\nSelf\nmatch\\_updaters(*mobject*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_updaters)[¶](#manim.mobject.mobject.Mobject.match_updaters \"Link to this definition\")\nMatch the updaters of the given mobject.\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject whose updaters get matched.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\nAll updaters from submobjects are removed, but only updaters of the given\nmobject are matched, not those of it’s submobjects.\nSee also\n[`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\"), [`clear_updaters()`](#manim.mobject.mobject.Mobject.clear_updaters \"manim.mobject.mobject.Mobject.clear_updaters\")\nmatch\\_width(*mobject*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_width)[¶](#manim.mobject.mobject.Mobject.match_width \"Link to this definition\")\nMatch the width with the width of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_x(*mobject*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_x)[¶](#manim.mobject.mobject.Mobject.match_x \"Link to this definition\")\nMatch x coord. to the x coord. of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_y(*mobject*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_y)[¶](#manim.mobject.mobject.Mobject.match_y \"Link to this definition\")\nMatch y coord. to the x coord. of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmatch\\_z(*mobject*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.match_z)[¶](#manim.mobject.mobject.Mobject.match_z \"Link to this definition\")\nMatch z coord. to the x coord. of another [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\").\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nReturn type:\nSelf\nmove\\_to(*point\\_or\\_mobject*, *aligned\\_edge\\=array(\\[0\\., 0\\., 0\\.])*, *coor\\_mask\\=array(\\[1, 1, 1])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.move_to)[¶](#manim.mobject.mobject.Mobject.move_to \"Link to this definition\")\nMove center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to certain Point3D.\nParameters:\n* **point\\_or\\_mobject** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* [*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **aligned\\_edge** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **coor\\_mask** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nnext\\_to(*mobject\\_or\\_point*, *direction\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0\\.25*, *aligned\\_edge\\=array(\\[0\\., 0\\., 0\\.])*, *submobject\\_to\\_align\\=None*, *index\\_of\\_submobject\\_to\\_align\\=None*, *coor\\_mask\\=array(\\[1, 1, 1])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.next_to)[¶](#manim.mobject.mobject.Mobject.next_to \"Link to this definition\")\nMove this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") next to another’s [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") or Point3D.\nExamples\nExample: GeometricShapes [¶](#geometricshapes)\n![../_images/GeometricShapes-1.png](../_images/GeometricShapes-1.png)\n```\nfrom manim import *\nclass GeometricShapes(Scene):\n    def construct(self):\n        d = Dot()\n        c = Circle()\n        s = Square()\n        t = Triangle()\n        d.next_to(c, RIGHT)\n        s.next_to(c, LEFT)\n        t.next_to(c, DOWN)\n        self.add(d, c, s, t)\n```\n```\nclass GeometricShapes(Scene):\n    def construct(self):\n        d = Dot()\n        c = Circle()\n        s = Square()\n        t = Triangle()\n        d.next_to(c, RIGHT)\n        s.next_to(c, LEFT)\n        t.next_to(c, DOWN)\n        self.add(d, c, s, t)\n```\nParameters:\n* **mobject\\_or\\_point** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **buff** (*float*)\n* **aligned\\_edge** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **submobject\\_to\\_align** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*)\n* **index\\_of\\_submobject\\_to\\_align** (*int* *\\|* *None*)\n* **coor\\_mask** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nnull\\_point\\_align(*mobject*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.null_point_align)[¶](#manim.mobject.mobject.Mobject.null_point_align \"Link to this definition\")\nIf a [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") with points is being aligned to\none without, treat both as groups, and push\nthe one with points into its own submobjects\nlist.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n**mobject** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\nreduce\\_across\\_dimension(*reduce\\_func*, *dim*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.reduce_across_dimension)[¶](#manim.mobject.mobject.Mobject.reduce_across_dimension \"Link to this definition\")\nFind the min or max value from a dimension across all points in this and submobjects.\nParameters:\n* **reduce\\_func** (*Callable*)\n* **dim** (*int*)\nremove(*\\*mobjects*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.remove)[¶](#manim.mobject.mobject.Mobject.remove \"Link to this definition\")\nRemove [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\").\nThe mobjects are removed from [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\"), if they exist.\nSubclasses of mobject may implement `-` and `-=` dunder methods.\nParameters:\n**mobjects** ([*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to remove.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`add()`](#manim.mobject.mobject.Mobject.add \"manim.mobject.mobject.Mobject.add\")\nremove\\_updater(*update\\_function*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.remove_updater)[¶](#manim.mobject.mobject.Mobject.remove_updater \"Link to this definition\")\nRemove an updater.\nIf the same updater is applied multiple times, every instance gets removed.\nParameters:\n**update\\_function** ([*Updater*](manim.mobject.mobject.html#manim.mobject.mobject.Updater \"manim.mobject.mobject.Updater\")) – The update function to be removed.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`clear_updaters()`](#manim.mobject.mobject.Mobject.clear_updaters \"manim.mobject.mobject.Mobject.clear_updaters\"), [`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\"), [`get_updaters()`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\")\nrepeat(*count*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.repeat)[¶](#manim.mobject.mobject.Mobject.repeat \"Link to this definition\")\nThis can make transition animations nicer\nParameters:\n**count** (*int*)\nReturn type:\nSelf\nreset\\_points()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.reset_points)[¶](#manim.mobject.mobject.Mobject.reset_points \"Link to this definition\")\nSets [`points`](#manim.mobject.mobject.Mobject.points \"manim.mobject.mobject.Mobject.points\") to be an empty array.\nReturn type:\nNone\nrestore()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.restore)[¶](#manim.mobject.mobject.Mobject.restore \"Link to this definition\")\nRestores the state that was previously saved with [`save_state()`](#manim.mobject.mobject.Mobject.save_state \"manim.mobject.mobject.Mobject.save_state\").\nReturn type:\nSelf\nresume\\_updating(*recursive\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.resume_updating)[¶](#manim.mobject.mobject.Mobject.resume_updating \"Link to this definition\")\nEnable updating from updaters and animations.\nParameters:\n**recursive** (*bool*) – Whether to recursively enable updating on all submobjects.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`suspend_updating()`](#manim.mobject.mobject.Mobject.suspend_updating \"manim.mobject.mobject.Mobject.suspend_updating\"), [`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\")\nrotate(*angle*, *axis\\=array(\\[0\\., 0\\., 1\\.])*, *about\\_point\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.rotate)[¶](#manim.mobject.mobject.Mobject.rotate \"Link to this definition\")\nRotates the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") around a specified axis and point.\nParameters:\n* **angle** (*float*) – The angle of rotation in radians. Predefined constants such as `DEGREES`\ncan also be used to specify the angle in degrees.\n* **axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The rotation axis (see [`Rotating`](manim.animation.rotation.Rotating.html#manim.animation.rotation.Rotating \"manim.animation.rotation.Rotating\") for more).\n* **about\\_point** ([*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\") *\\|* *None*) – The point about which the mobject rotates. If `None`, rotation occurs around\nthe center of the mobject.\n* **\\*\\*kwargs** – Additional keyword arguments passed to `apply_points_function_about_point()`,\nsuch as `about_edge`.\nReturns:\n`self` (for method chaining)\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nNote\nTo animate a rotation, use [`Rotating`](manim.animation.rotation.Rotating.html#manim.animation.rotation.Rotating \"manim.animation.rotation.Rotating\") or [`Rotate`](manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate \"manim.animation.rotation.Rotate\")\ninstead of `.animate.rotate(...)`.\nThe `.animate.rotate(...)` syntax only applies a transformation\nfrom the initial state to the final rotated state\n(interpolation between the two states), without showing proper rotational motion\nbased on the angle (from 0 to the given angle).\nExamples\nExample: RotateMethodExample [¶](#rotatemethodexample)\n![../_images/RotateMethodExample-1.png](../_images/RotateMethodExample-1.png)\n```\nfrom manim import *\nclass RotateMethodExample(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        line = Line(start=ORIGIN, end=RIGHT)\n        arrow1 = Arrow(start=ORIGIN, end=RIGHT, buff=0, color=GOLD)\n        group1 = VGroup(circle, line, arrow1)\n        group2 = group1.copy()\n        arrow2 = group2[2]\n        arrow2.rotate(angle=PI / 4, about_point=arrow2.get_start())\n        group3 = group1.copy()\n        arrow3 = group3[2]\n        arrow3.rotate(angle=120 * DEGREES, about_point=arrow3.get_start())\n        self.add(VGroup(group1, group2, group3).arrange(RIGHT, buff=1))\n```\n```\nclass RotateMethodExample(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        line = Line(start=ORIGIN, end=RIGHT)\n        arrow1 = Arrow(start=ORIGIN, end=RIGHT, buff=0, color=GOLD)\n        group1 = VGroup(circle, line, arrow1)\n        group2 = group1.copy()\n        arrow2 = group2[2]\n        arrow2.rotate(angle=PI / 4, about_point=arrow2.get_start())\n        group3 = group1.copy()\n        arrow3 = group3[2]\n        arrow3.rotate(angle=120 * DEGREES, about_point=arrow3.get_start())\n        self.add(VGroup(group1, group2, group3).arrange(RIGHT, buff=1))\n```\nSee also\n[`Rotating`](manim.animation.rotation.Rotating.html#manim.animation.rotation.Rotating \"manim.animation.rotation.Rotating\"), [`Rotate`](manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate \"manim.animation.rotation.Rotate\"), [`animate`](#manim.mobject.mobject.Mobject.animate \"manim.mobject.mobject.Mobject.animate\"), `apply_points_function_about_point()`\nrotate\\_about\\_origin(*angle*, *axis\\=array(\\[0\\., 0\\., 1\\.])*, *axes\\=\\[]*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.rotate_about_origin)[¶](#manim.mobject.mobject.Mobject.rotate_about_origin \"Link to this definition\")\nRotates the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") about the ORIGIN, which is at \\[0,0,0].\nParameters:\n* **angle** (*float*)\n* **axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nsave\\_image(*name\\=None*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.save_image)[¶](#manim.mobject.mobject.Mobject.save_image \"Link to this definition\")\nSaves an image of only this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") at its position to a png\nfile.\nParameters:\n**name** (*str* *\\|* *None*)\nReturn type:\nNone\nsave\\_state()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.save_state)[¶](#manim.mobject.mobject.Mobject.save_state \"Link to this definition\")\nSave the current state (position, color \\& size). Can be restored with [`restore()`](#manim.mobject.mobject.Mobject.restore \"manim.mobject.mobject.Mobject.restore\").\nReturn type:\nSelf\nscale(*scale\\_factor*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.scale)[¶](#manim.mobject.mobject.Mobject.scale \"Link to this definition\")\nScale the size by a factor.\nDefault behavior is to scale about the center of the mobject.\nParameters:\n* **scale\\_factor** (*float*) – The scaling factor \\\\(\\\\alpha\\\\). If \\\\(0 \\< \\|\\\\alpha\\| \\< 1\\\\), the mobject\nwill shrink, and for \\\\(\\|\\\\alpha\\| \\> 1\\\\) it will grow. Furthermore,\nif \\\\(\\\\alpha \\< 0\\\\), the mobject is also flipped.\n* **kwargs** – Additional keyword arguments passed to\n`apply_points_function_about_point()`.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\nExample: MobjectScaleExample [¶](#mobjectscaleexample)\n![../_images/MobjectScaleExample-1.png](../_images/MobjectScaleExample-1.png)\n```\nfrom manim import *\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        f1 = Text(\"F\")\n        f2 = Text(\"F\").scale(2)\n        f3 = Text(\"F\").scale(0.5)\n        f4 = Text(\"F\").scale(-1)\n        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)\n        self.add(vgroup)\n```\n```\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        f1 = Text(\"F\")\n        f2 = Text(\"F\").scale(2)\n        f3 = Text(\"F\").scale(0.5)\n        f4 = Text(\"F\").scale(-1)\n        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)\n        self.add(vgroup)\n```\nSee also\n[`move_to()`](#manim.mobject.mobject.Mobject.move_to \"manim.mobject.mobject.Mobject.move_to\")\nscale\\_to\\_fit\\_depth(*depth*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.scale_to_fit_depth)[¶](#manim.mobject.mobject.Mobject.scale_to_fit_depth \"Link to this definition\")\nScales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a depth while keeping width/height proportional.\nParameters:\n**depth** (*float*)\nReturn type:\nSelf\nscale\\_to\\_fit\\_height(*height*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.scale_to_fit_height)[¶](#manim.mobject.mobject.Mobject.scale_to_fit_height \"Link to this definition\")\nScales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a height while keeping width/depth proportional.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n**height** (*float*)\nExamples\n```\n>>> from manim import *\n>>> sq = Square()\n>>> sq.width\nnp.float64(2.0)\n>>> sq.scale_to_fit_height(5)\nSquare\n>>> sq.height\nnp.float64(5.0)\n>>> sq.width\nnp.float64(5.0)\n```\nscale\\_to\\_fit\\_width(*width*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.scale_to_fit_width)[¶](#manim.mobject.mobject.Mobject.scale_to_fit_width \"Link to this definition\")\nScales the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a width while keeping height/depth proportional.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n**width** (*float*)\nExamples\n```\n>>> from manim import *\n>>> sq = Square()\n>>> sq.height\nnp.float64(2.0)\n>>> sq.scale_to_fit_width(5)\nSquare\n>>> sq.width\nnp.float64(5.0)\n>>> sq.height\nnp.float64(5.0)\n```\nset(*\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set)[¶](#manim.mobject.mobject.Mobject.set \"Link to this definition\")\nSets attributes.\nI.e. `my_mobject.set(foo=1)` applies `my_mobject.foo = 1`.\nThis is a convenience to be used along with [`animate`](#manim.mobject.mobject.Mobject.animate \"manim.mobject.mobject.Mobject.animate\") to\nanimate setting attributes.\nIn addition to this method, there is a compatibility\nlayer that allows `get_*` and `set_*` methods to\nget and set generic attributes. For instance:\n```\n>>> mob = Mobject()\n>>> mob.set_foo(0)\nMobject\n>>> mob.get_foo()\n0\n>>> mob.foo\n0\n```\nThis compatibility layer does not interfere with any\n`get_*` or `set_*` methods that are explicitly\ndefined.\nWarning\nThis compatibility layer is for backwards compatibility\nand is not guaranteed to stay around. Where applicable,\nplease prefer getting/setting attributes normally or with\nthe [`set()`](#manim.mobject.mobject.Mobject.set \"manim.mobject.mobject.Mobject.set\") method.\nParameters:\n**\\*\\*kwargs** – The attributes and corresponding values to set.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\n```\n>>> mob = Mobject()\n>>> mob.set(foo=0)\nMobject\n>>> mob.foo\n0\n```\nset\\_color(*color\\=ManimColor('\\#FFFF00')*, *family\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_color)[¶](#manim.mobject.mobject.Mobject.set_color \"Link to this definition\")\nCondition is function which takes in one arguments, (x, y, z).\nHere it just recurses to submobjects, but in subclasses this\nshould be further implemented based on the the inner workings\nof color\nParameters:\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **family** (*bool*)\nReturn type:\nSelf\nset\\_color\\_by\\_gradient(*\\*colors*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_color_by_gradient)[¶](#manim.mobject.mobject.Mobject.set_color_by_gradient \"Link to this definition\")\nParameters:\n* **colors** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The colors to use for the gradient. Use like set\\_color\\_by\\_gradient(RED, BLUE, GREEN).\n* **ManimColor.parse****(****color****)** (*self.color \\=*)\n* **self** (*return*)\nReturn type:\nSelf\n*classmethod* set\\_default(*\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_default)[¶](#manim.mobject.mobject.Mobject.set_default \"Link to this definition\")\nSets the default values of keyword arguments.\nIf this method is called without any additional keyword\narguments, the original default values of the initialization\nmethod of this class are restored.\nParameters:\n**kwargs** – Passing any keyword argument will update the default\nvalues of the keyword arguments of the initialization\nfunction of this class.\nReturn type:\nNone\nExamples\n```\n>>> from manim import Square, GREEN\n>>> Square.set_default(color=GREEN, fill_opacity=0.25)\n>>> s = Square(); s.color, s.fill_opacity\n(ManimColor('#83C167'), 0.25)\n>>> Square.set_default()\n>>> s = Square(); s.color, s.fill_opacity\n(ManimColor('#FFFFFF'), 0.0)\n```\nExample: ChangedDefaultTextcolor [¶](#changeddefaulttextcolor)\n![../_images/ChangedDefaultTextcolor-1.png](../_images/ChangedDefaultTextcolor-1.png)\n```\nfrom manim import *\nconfig.background_color = WHITE\nclass ChangedDefaultTextcolor(Scene):\n    def construct(self):\n        Text.set_default(color=BLACK)\n        self.add(Text(\"Changing default values is easy!\"))\n        # we revert the colour back to the default to prevent a bug in the docs.\n        Text.set_default(color=WHITE)\n```\n```\nconfig.background_color = WHITE\nclass ChangedDefaultTextcolor(Scene):\n    def construct(self):\n        Text.set_default(color=BLACK)\n        self.add(Text(\"Changing default values is easy!\"))\n        # we revert the colour back to the default to prevent a bug in the docs.\n        Text.set_default(color=WHITE)\n```\nset\\_x(*x*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_x)[¶](#manim.mobject.mobject.Mobject.set_x \"Link to this definition\")\nSet x value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`)\nParameters:\n* **x** (*float*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nset\\_y(*y*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_y)[¶](#manim.mobject.mobject.Mobject.set_y \"Link to this definition\")\nSet y value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`)\nParameters:\n* **y** (*float*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nset\\_z(*z*, *direction\\=array(\\[0\\., 0\\., 0\\.])*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_z)[¶](#manim.mobject.mobject.Mobject.set_z \"Link to this definition\")\nSet z value of the center of the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") (`int` or `float`)\nParameters:\n* **z** (*float*)\n* **direction** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\nReturn type:\nSelf\nset\\_z\\_index(*z\\_index\\_value*, *family\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_z_index)[¶](#manim.mobject.mobject.Mobject.set_z_index \"Link to this definition\")\nSets the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")’s `z_index` to the value specified in z\\_index\\_value.\nParameters:\n* **z\\_index\\_value** (*float*) – The new value of `z_index` set.\n* **family** (*bool*) – If `True`, the `z_index` value of all submobjects is also set.\nReturns:\nThe Mobject itself, after `z_index` is set. For chaining purposes. (Returns self.)\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nExamples\nExample: SetZIndex [¶](#setzindex)\n![../_images/SetZIndex-1.png](../_images/SetZIndex-1.png)\n```\nfrom manim import *\nclass SetZIndex(Scene):\n    def construct(self):\n        text = Text('z_index = 3', color = PURE_RED).shift(UP).set_z_index(3)\n        square = Square(2, fill_opacity=1).set_z_index(2)\n        tex = Tex(r'zIndex = 1', color = PURE_BLUE).shift(DOWN).set_z_index(1)\n        circle = Circle(radius = 1.7, color = GREEN, fill_opacity = 1) # z_index = 0\n        # Displaying order is now defined by z_index values\n        self.add(text)\n        self.add(square)\n        self.add(tex)\n        self.add(circle)\n```\n```\nclass SetZIndex(Scene):\n    def construct(self):\n        text = Text('z_index = 3', color = PURE_RED).shift(UP).set_z_index(3)\n        square = Square(2, fill_opacity=1).set_z_index(2)\n        tex = Tex(r'zIndex = 1', color = PURE_BLUE).shift(DOWN).set_z_index(1)\n        circle = Circle(radius = 1.7, color = GREEN, fill_opacity = 1) # z_index = 0\n        # Displaying order is now defined by z_index values\n        self.add(text)\n        self.add(square)\n        self.add(tex)\n        self.add(circle)\n```\nset\\_z\\_index\\_by\\_z\\_Point3D()[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.set_z_index_by_z_Point3D)[¶](#manim.mobject.mobject.Mobject.set_z_index_by_z_Point3D \"Link to this definition\")\nSets the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")’s z Point3D to the value of `z_index`.\nReturns:\nThe Mobject itself, after `z_index` is set. (Returns self.)\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nshift(*\\*vectors*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.shift)[¶](#manim.mobject.mobject.Mobject.shift \"Link to this definition\")\nShift by the given vectors.\nParameters:\n**vectors** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – Vectors to shift by. If multiple vectors are given, they are added\ntogether.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`move_to()`](#manim.mobject.mobject.Mobject.move_to \"manim.mobject.mobject.Mobject.move_to\")\nshuffle(*recursive\\=False*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.shuffle)[¶](#manim.mobject.mobject.Mobject.shuffle \"Link to this definition\")\nShuffles the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\").\nParameters:\n**recursive** (*bool*)\nReturn type:\nNone\nshuffle\\_submobjects(*\\*args*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.shuffle_submobjects)[¶](#manim.mobject.mobject.Mobject.shuffle_submobjects \"Link to this definition\")\nShuffles the order of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\")\nExamples\nExample: ShuffleSubmobjectsExample [¶](#shufflesubmobjectsexample)\n```\nfrom manim import *\nclass ShuffleSubmobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2= s.copy()\n        s2.shuffle_submobjects()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```\n```\nclass ShuffleSubmobjectsExample(Scene):\n    def construct(self):\n        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])\n        s2= s.copy()\n        s2.shuffle_submobjects()\n        s2.shift(DOWN)\n        self.play(Write(s), Write(s2))\n```\nReturn type:\nNone\nsort(*point\\_to\\_num\\_func\\=\\<function Mobject.\\<lambda\\>\\>*, *submob\\_func\\=None*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.sort)[¶](#manim.mobject.mobject.Mobject.sort \"Link to this definition\")\nSorts the list of [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\") by a function defined by `submob_func`.\nParameters:\n* **point\\_to\\_num\\_func** (*Callable**\\[**\\[*[*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")*]**,* *float**]*)\n* **submob\\_func** (*Callable**\\[**\\[*[*Mobject*](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]**,* *Any**]* *\\|* *None*)\nReturn type:\nSelf\nsort\\_submobjects(*\\*args*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.sort_submobjects)[¶](#manim.mobject.mobject.Mobject.sort_submobjects \"Link to this definition\")\nSort the [`submobjects`](#manim.mobject.mobject.Mobject.submobjects \"manim.mobject.mobject.Mobject.submobjects\")\nReturn type:\nSelf\nstretch\\_to\\_fit\\_depth(*depth*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.stretch_to_fit_depth)[¶](#manim.mobject.mobject.Mobject.stretch_to_fit_depth \"Link to this definition\")\nStretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a depth, not keeping width/height proportional.\nParameters:\n**depth** (*float*)\nReturn type:\nSelf\nstretch\\_to\\_fit\\_height(*height*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.stretch_to_fit_height)[¶](#manim.mobject.mobject.Mobject.stretch_to_fit_height \"Link to this definition\")\nStretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a height, not keeping width/depth proportional.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n**height** (*float*)\nExamples\n```\n>>> from manim import *\n>>> sq = Square()\n>>> sq.width\nnp.float64(2.0)\n>>> sq.stretch_to_fit_height(5)\nSquare\n>>> sq.height\nnp.float64(5.0)\n>>> sq.width\nnp.float64(2.0)\n```\nstretch\\_to\\_fit\\_width(*width*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.stretch_to_fit_width)[¶](#manim.mobject.mobject.Mobject.stretch_to_fit_width \"Link to this definition\")\nStretches the [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to fit a width, not keeping height/depth proportional.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n**width** (*float*)\nExamples\n```\n>>> from manim import *\n>>> sq = Square()\n>>> sq.height\nnp.float64(2.0)\n>>> sq.stretch_to_fit_width(5)\nSquare\n>>> sq.width\nnp.float64(5.0)\n>>> sq.height\nnp.float64(2.0)\n```\nsuspend\\_updating(*recursive\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.suspend_updating)[¶](#manim.mobject.mobject.Mobject.suspend_updating \"Link to this definition\")\nDisable updating from updaters and animations.\nParameters:\n**recursive** (*bool*) – Whether to recursively suspend updating on all submobjects.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`resume_updating()`](#manim.mobject.mobject.Mobject.resume_updating \"manim.mobject.mobject.Mobject.resume_updating\"), [`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\")\nto\\_corner(*corner\\=array(\\[\\-1\\., \\-1\\., 0\\.])*, *buff\\=0\\.5*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.to_corner)[¶](#manim.mobject.mobject.Mobject.to_corner \"Link to this definition\")\nMoves this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to the given corner of the screen.\nReturns:\nThe newly positioned mobject.\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n* **corner** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **buff** (*float*)\nExamples\nExample: ToCornerExample [¶](#tocornerexample)\n![../_images/ToCornerExample-1.png](../_images/ToCornerExample-1.png)\n```\nfrom manim import *\nclass ToCornerExample(Scene):\n    def construct(self):\n        c = Circle()\n        c.to_corner(UR)\n        t = Tex(\"To the corner!\")\n        t2 = MathTex(\"x^3\").shift(DOWN)\n        self.add(c,t,t2)\n        t.to_corner(DL, buff=0)\n        t2.to_corner(UL, buff=1.5)\n```\n```\nclass ToCornerExample(Scene):\n    def construct(self):\n        c = Circle()\n        c.to_corner(UR)\n        t = Tex(\"To the corner!\")\n        t2 = MathTex(\"x^3\").shift(DOWN)\n        self.add(c,t,t2)\n        t.to_corner(DL, buff=0)\n        t2.to_corner(UL, buff=1.5)\n```\nto\\_edge(*edge\\=array(\\[\\-1\\., 0\\., 0\\.])*, *buff\\=0\\.5*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.to_edge)[¶](#manim.mobject.mobject.Mobject.to_edge \"Link to this definition\")\nMoves this [`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to the given edge of the screen,\nwithout affecting its position in the other dimension.\nReturns:\nThe newly positioned mobject.\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nParameters:\n* **edge** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\"))\n* **buff** (*float*)\nExamples\nExample: ToEdgeExample [¶](#toedgeexample)\n![../_images/ToEdgeExample-1.png](../_images/ToEdgeExample-1.png)\n```\nfrom manim import *\nclass ToEdgeExample(Scene):\n    def construct(self):\n        tex_top = Tex(\"I am at the top!\")\n        tex_top.to_edge(UP)\n        tex_side = Tex(\"I am moving to the side!\")\n        c = Circle().shift(2*DOWN)\n        self.add(tex_top, tex_side, c)\n        tex_side.to_edge(LEFT)\n        c.to_edge(RIGHT, buff=0)\n```\n```\nclass ToEdgeExample(Scene):\n    def construct(self):\n        tex_top = Tex(\"I am at the top!\")\n        tex_top.to_edge(UP)\n        tex_side = Tex(\"I am moving to the side!\")\n        c = Circle().shift(2*DOWN)\n        self.add(tex_top, tex_side, c)\n        tex_side.to_edge(LEFT)\n        c.to_edge(RIGHT, buff=0)\n```\nupdate(*dt\\=0*, *recursive\\=True*)[\\[source]](../_modules/manim/mobject/mobject.html#Mobject.update)[¶](#manim.mobject.mobject.Mobject.update \"Link to this definition\")\nApply all updaters.\nDoes nothing if updating is suspended.\nParameters:\n* **dt** (*float*) – The parameter `dt` to pass to the update functions. Usually this is the\ntime in seconds since the last call of `update`.\n* **recursive** (*bool*) – Whether to recursively update all submobjects.\nReturns:\n`self`\nReturn type:\n[`Mobject`](#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")\nSee also\n[`add_updater()`](#manim.mobject.mobject.Mobject.add_updater \"manim.mobject.mobject.Mobject.add_updater\"), [`get_updaters()`](#manim.mobject.mobject.Mobject.get_updaters \"manim.mobject.mobject.Mobject.get_updaters\")\n*property* width*: float*[¶](#manim.mobject.mobject.Mobject.width \"Link to this definition\")\nThe width of the mobject.\nReturn type:\n`float`\nExamples\nExample: WidthExample [¶](#widthexample)\n```\nfrom manim import *\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```\n```\nclass WidthExample(Scene):\n    def construct(self):\n        decimal = DecimalNumber().to_edge(UP)\n        rect = Rectangle(color=BLUE)\n        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)\n        decimal.add_updater(lambda d: d.set_value(rect.width))\n        self.add(rect_copy, rect, decimal)\n        self.play(rect.animate.set(width=7))\n        self.wait()\n```\nSee also\n[`length_over_dim()`](#manim.mobject.mobject.Mobject.length_over_dim \"manim.mobject.mobject.Mobject.length_over_dim\")",
  "scraped_at": "2025-06-24T17:56:14.606577",
  "content_length": 122795,
  "domain": "docs.manim.community",
  "word_count": 9190,
  "inspection_status": "pending",
  "filename": "Mobject - Manim Community v0.19.0_20250624_175614.json",
  "saved_at": "2025-06-24T17:56:14.607054"
}