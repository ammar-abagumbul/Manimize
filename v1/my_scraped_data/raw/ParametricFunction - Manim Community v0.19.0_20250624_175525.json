{
  "doc_id": "e4c5378e3ec646d08b8945a162bd4863",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.graphing.functions.ParametricFunction.html",
  "title": "ParametricFunction - Manim Community v0.19.0",
  "content": "ParametricFunction[¶](#parametricfunction \"Link to this heading\")\n=================================================================\nQualified name: `manim.mobject.graphing.functions.ParametricFunction`\n*class* ParametricFunction(*function*, *t\\_range\\=(0*, *1\\)*, *scaling\\=\\<manim.mobject.graphing.scale.LinearBase object\\>*, *dt\\=1e\\-08*, *discontinuities\\=None*, *use\\_smoothing\\=True*, *use\\_vectorized\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/graphing/functions.html#ParametricFunction)[¶](#manim.mobject.graphing.functions.ParametricFunction \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA parametric curve.\nParameters:\n* **function** (*Callable**\\[**\\[**float**]**,* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")*]*) – The function to be plotted in the form of `(lambda t: (x(t), y(t), z(t)))`\n* **t\\_range** (*tuple**\\[**float**,* *float**]* *\\|* *tuple**\\[**float**,* *float**,* *float**]*) – Determines the length that the function spans in the form of (t\\_min, t\\_max, step\\=0\\.01\\). By default `[0, 1]`\n* **scaling** (*\\_ScaleBase*) – Scaling class applied to the points of the function. Default of [`LinearBase`](manim.mobject.graphing.scale.LinearBase.html#manim.mobject.graphing.scale.LinearBase \"manim.mobject.graphing.scale.LinearBase\").\n* **use\\_smoothing** (*bool*) – Whether to interpolate between the points of the function after they have been created.\n(Will have odd behaviour with a low number of points)\n* **use\\_vectorized** (*bool*) – Whether to pass in the generated t value array to the function as `[t_0, t_1, ...]`.\nOnly use this if your function supports it. Output should be a numpy array\nof shape `[[x_0, x_1, ...], [y_0, y_1, ...], [z_0, z_1, ...]]` but `z` can\nalso be 0 if the Axes is 2D\n* **discontinuities** (*Iterable**\\[**float**]* *\\|* *None*) – Values of t at which the function experiences discontinuity.\n* **dt** (*float*) – The left and right tolerance for the discontinuities.\nExamples\nExample: PlotParametricFunction [¶](#plotparametricfunction)\n![../_images/PlotParametricFunction-1.png](../_images/PlotParametricFunction-1.png)\n```\nfrom manim import *\nclass PlotParametricFunction(Scene):\n    def func(self, t):\n        return (np.sin(2 * t), np.sin(3 * t), 0)\n    def construct(self):\n        func = ParametricFunction(self.func, t_range = (0, TAU), fill_opacity=0).set_color(RED)\n        self.add(func.scale(3))\n```\n```\nclass PlotParametricFunction(Scene):\n    def func(self, t):\n        return (np.sin(2 * t), np.sin(3 * t), 0)\n    def construct(self):\n        func = ParametricFunction(self.func, t_range = (0, TAU), fill_opacity=0).set_color(RED)\n        self.add(func.scale(3))\n```\nExample: ThreeDParametricSpring [¶](#threedparametricspring)\n![../_images/ThreeDParametricSpring-1.png](../_images/ThreeDParametricSpring-1.png)\n```\nfrom manim import *\nclass ThreeDParametricSpring(ThreeDScene):\n    def construct(self):\n        curve1 = ParametricFunction(\n            lambda u: (\n                1.2 * np.cos(u),\n                1.2 * np.sin(u),\n                u * 0.05\n            ), color=RED, t_range = (-3*TAU, 5*TAU, 0.01)\n        ).set_shade_in_3d(True)\n        axes = ThreeDAxes()\n        self.add(axes, curve1)\n        self.set_camera_orientation(phi=80 * DEGREES, theta=-60 * DEGREES)\n        self.wait()\n```\n```\nclass ThreeDParametricSpring(ThreeDScene):\n    def construct(self):\n        curve1 = ParametricFunction(\n            lambda u: (\n                1.2 * np.cos(u),\n                1.2 * np.sin(u),\n                u * 0.05\n            ), color=RED, t_range = (-3*TAU, 5*TAU, 0.01)\n        ).set_shade_in_3d(True)\n        axes = ThreeDAxes()\n        self.add(axes, curve1)\n        self.set_camera_orientation(phi=80 * DEGREES, theta=-60 * DEGREES)\n        self.wait()\n```\nAttention\nIf your function has discontinuities, you’ll have to specify the location\nof the discontinuities manually. See the following example for guidance.\nExample: DiscontinuousExample [¶](#discontinuousexample)\n![../_images/DiscontinuousExample-1.png](../_images/DiscontinuousExample-1.png)\n```\nfrom manim import *\nclass DiscontinuousExample(Scene):\n    def construct(self):\n        ax1 = NumberPlane((-3, 3), (-4, 4))\n        ax2 = NumberPlane((-3, 3), (-4, 4))\n        VGroup(ax1, ax2).arrange()\n        discontinuous_function = lambda x: (x ** 2 - 2) / (x ** 2 - 4)\n        incorrect = ax1.plot(discontinuous_function, color=RED)\n        correct = ax2.plot(\n            discontinuous_function,\n            discontinuities=[-2, 2],  # discontinuous points\n            dt=0.1,  # left and right tolerance of discontinuity\n            color=GREEN,\n        )\n        self.add(ax1, ax2, incorrect, correct)\n```\n```\nclass DiscontinuousExample(Scene):\n    def construct(self):\n        ax1 = NumberPlane((-3, 3), (-4, 4))\n        ax2 = NumberPlane((-3, 3), (-4, 4))\n        VGroup(ax1, ax2).arrange()\n        discontinuous_function = lambda x: (x ** 2 - 2) / (x ** 2 - 4)\n        incorrect = ax1.plot(discontinuous_function, color=RED)\n        correct = ax2.plot(\n            discontinuous_function,\n            discontinuities=[-2, 2],  # discontinuous points\n            dt=0.1,  # left and right tolerance of discontinuity\n            color=GREEN,\n        )\n        self.add(ax1, ax2, incorrect, correct)\n```\nMethods\n| [`generate_points`](#manim.mobject.graphing.functions.ParametricFunction.generate_points \"manim.mobject.graphing.functions.ParametricFunction.generate_points\") | Initializes `points` and therefore the shape. |\n| --- | --- |\n| `get_function` |  |\n| `get_point_from_function` |  |\n| [`init_points`](#manim.mobject.graphing.functions.ParametricFunction.init_points \"manim.mobject.graphing.functions.ParametricFunction.init_points\") | Initializes `points` and therefore the shape. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*function*, *t\\_range\\=(0*, *1\\)*, *scaling\\=\\<manim.mobject.graphing.scale.LinearBase object\\>*, *dt\\=1e\\-08*, *discontinuities\\=None*, *use\\_smoothing\\=True*, *use\\_vectorized\\=False*, *\\*\\*kwargs*)[¶](#manim.mobject.graphing.functions.ParametricFunction._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **function** (*Callable**\\[**\\[**float**]**,* *TypeAliasForwardRef**(**'\\~manim.typing.Point3DLike'**)**]*)\n* **t\\_range** (*tuple**\\[**float**,* *float**]* *\\|* *tuple**\\[**float**,* *float**,* *float**]*)\n* **scaling** (*\\_ScaleBase*)\n* **dt** (*float*)\n* **discontinuities** (*Iterable**\\[**float**]* *\\|* *None*)\n* **use\\_smoothing** (*bool*)\n* **use\\_vectorized** (*bool*)\ngenerate\\_points()[\\[source]](../_modules/manim/mobject/graphing/functions.html#ParametricFunction.generate_points)[¶](#manim.mobject.graphing.functions.ParametricFunction.generate_points \"Link to this definition\")\nInitializes `points` and therefore the shape.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nSelf\ninit\\_points()[¶](#manim.mobject.graphing.functions.ParametricFunction.init_points \"Link to this definition\")\nInitializes `points` and therefore the shape.\nGets called upon creation. This is an empty method that can be implemented by\nsubclasses.\nReturn type:\nSelf",
  "scraped_at": "2025-06-24T17:55:25.475796",
  "content_length": 7796,
  "domain": "docs.manim.community",
  "word_count": 739,
  "inspection_status": "pending",
  "filename": "ParametricFunction - Manim Community v0.19.0_20250624_175525.json",
  "saved_at": "2025-06-24T17:55:25.475890"
}