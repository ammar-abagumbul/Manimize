{
  "doc_id": "17125532ffd52bb9475dd153ad2ab109",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.polygram.Polygram.html",
  "title": "Polygram - Manim Community v0.19.0",
  "content": "Polygram[¶](#polygram \"Link to this heading\")\n=============================================\nQualified name: `manim.mobject.geometry.polygram.Polygram`\n*class* Polygram(*\\*vertex\\_groups*, *color\\=ManimColor('\\#58C4DD')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/polygram.html#Polygram)[¶](#manim.mobject.geometry.polygram.Polygram \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA generalized [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\"), allowing for disconnected sets of edges.\nParameters:\n* **vertex\\_groups** ([*Point3DLike\\_Array*](manim.typing.html#manim.typing.Point3DLike_Array \"manim.typing.Point3DLike_Array\")) – The groups of vertices making up the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nThe first vertex in each group is repeated to close the shape.\nEach point must be 3\\-dimensional: `[x,y,z]`\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\n* **kwargs** (*Any*) – Forwarded to the parent constructor.\nExamples\nExample: PolygramExample [¶](#polygramexample)\n```\nfrom manim import *\nimport numpy as np\nclass PolygramExample(Scene):\n    def construct(self):\n        hexagram = Polygram(\n            [[0, 2, 0], [-np.sqrt(3), -1, 0], [np.sqrt(3), -1, 0]],\n            [[-np.sqrt(3), 1, 0], [0, -2, 0], [np.sqrt(3), 1, 0]],\n        )\n        self.add(hexagram)\n        dot = Dot()\n        self.play(MoveAlongPath(dot, hexagram), run_time=5, rate_func=linear)\n        self.remove(dot)\n        self.wait()\n```\n```\nimport numpy as np\nclass PolygramExample(Scene):\n    def construct(self):\n        hexagram = Polygram(\n            [[0, 2, 0], [-np.sqrt(3), -1, 0], [np.sqrt(3), -1, 0]],\n            [[-np.sqrt(3), 1, 0], [0, -2, 0], [np.sqrt(3), 1, 0]],\n        )\n        self.add(hexagram)\n        dot = Dot()\n        self.play(MoveAlongPath(dot, hexagram), run_time=5, rate_func=linear)\n        self.remove(dot)\n        self.wait()\n```\nMethods\n| [`get_vertex_groups`](#manim.mobject.geometry.polygram.Polygram.get_vertex_groups \"manim.mobject.geometry.polygram.Polygram.get_vertex_groups\") | Gets the vertex groups of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\"). |\n| --- | --- |\n| [`get_vertices`](#manim.mobject.geometry.polygram.Polygram.get_vertices \"manim.mobject.geometry.polygram.Polygram.get_vertices\") | Gets the vertices of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\"). |\n| [`round_corners`](#manim.mobject.geometry.polygram.Polygram.round_corners \"manim.mobject.geometry.polygram.Polygram.round_corners\") | Rounds off the corners of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\"). |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*\\*vertex\\_groups*, *color\\=ManimColor('\\#58C4DD')*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.polygram.Polygram._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vertex\\_groups** ([*Point3DLike\\_Array*](manim.typing.html#manim.typing.Point3DLike_Array \"manim.typing.Point3DLike_Array\"))\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **kwargs** (*Any*)\nget\\_vertex\\_groups()[\\[source]](../_modules/manim/mobject/geometry/polygram.html#Polygram.get_vertex_groups)[¶](#manim.mobject.geometry.polygram.Polygram.get_vertex_groups \"Link to this definition\")\nGets the vertex groups of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nReturns:\nThe list of vertex groups of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nReturn type:\nlist\\[[Point3D\\_Array](manim.typing.html#manim.typing.Point3D_Array \"manim.typing.Point3D_Array\")]\nExamples\n```\n>>> poly = Polygram([ORIGIN, RIGHT, UP, LEFT + UP], [LEFT, LEFT + UP, 2 * LEFT])\n>>> groups = poly.get_vertex_groups()\n>>> len(groups)\n2\n>>> groups[0]\narray([[ 0.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [-1.,  1.,  0.]])\n>>> groups[1]\narray([[-1.,  0.,  0.],\n       [-1.,  1.,  0.],\n       [-2.,  0.,  0.]])\n```\nget\\_vertices()[\\[source]](../_modules/manim/mobject/geometry/polygram.html#Polygram.get_vertices)[¶](#manim.mobject.geometry.polygram.Polygram.get_vertices \"Link to this definition\")\nGets the vertices of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nReturns:\nThe vertices of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nReturn type:\n`numpy.ndarray`\nExamples\n```\n>>> sq = Square()\n>>> sq.get_vertices()\narray([[ 1.,  1.,  0.],\n       [-1.,  1.,  0.],\n       [-1., -1.,  0.],\n       [ 1., -1.,  0.]])\n```\nround\\_corners(*radius\\=0\\.5*, *evenly\\_distribute\\_anchors\\=False*, *components\\_per\\_rounded\\_corner\\=2*)[\\[source]](../_modules/manim/mobject/geometry/polygram.html#Polygram.round_corners)[¶](#manim.mobject.geometry.polygram.Polygram.round_corners \"Link to this definition\")\nRounds off the corners of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\nParameters:\n* **radius** (*float* *\\|* *list**\\[**float**]*) – The curvature of the corners of the [`Polygram`](#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\").\n* **evenly\\_distribute\\_anchors** (*bool*) – Break long line segments into proportionally\\-sized segments.\n* **components\\_per\\_rounded\\_corner** (*int*) – The number of points used to represent the rounded corner curve.\nReturn type:\nSelf\nSee also\n`RoundedRectangle`\nNote\nIf radius is supplied as a single value, then the same radius\nwill be applied to all corners. If radius is a list, then the\nindividual values will be applied sequentially, with the first\ncorner receiving radius\\[0], the second corner receiving\nradius\\[1], etc. The radius list will be repeated as necessary.\nThe components\\_per\\_rounded\\_corner value is provided so that the\nfidelity of the rounded corner may be fine\\-tuned as needed. 2 is\nan appropriate value for most shapes, however a larger value may be\nneed if the rounded corner is particularly large. 2 is the minimum\nnumber allowed, representing the start and end of the curve. 3 will\nresult in a start, middle, and end point, meaning 2 curves will be\ngenerated.\nThe option to evenly\\_distribute\\_anchors is provided so that the\nline segments (the part part of each line remaining after rounding\noff the corners) can be subdivided to a density similar to that of\nthe average density of the rounded corners. This may be desirable\nin situations in which an even distribution of curves is desired\nfor use in later transformation animations. Be aware, though, that\nenabling this option can result in an an object containing\nsignificantly more points than the original, especially when the\nrounded corner curves are small.\nExamples\nExample: PolygramRoundCorners [¶](#polygramroundcorners)\n![../_images/PolygramRoundCorners-1.png](../_images/PolygramRoundCorners-1.png)\n```\nfrom manim import *\nclass PolygramRoundCorners(Scene):\n    def construct(self):\n        star = Star(outer_radius=2)\n        shapes = VGroup(star)\n        shapes.add(star.copy().round_corners(radius=0.1))\n        shapes.add(star.copy().round_corners(radius=0.25))\n        shapes.arrange(RIGHT)\n        self.add(shapes)\n```\n```\nclass PolygramRoundCorners(Scene):\n    def construct(self):\n        star = Star(outer_radius=2)\n        shapes = VGroup(star)\n        shapes.add(star.copy().round_corners(radius=0.1))\n        shapes.add(star.copy().round_corners(radius=0.25))\n        shapes.arrange(RIGHT)\n        self.add(shapes)\n```",
  "scraped_at": "2025-06-24T17:50:34.452146",
  "content_length": 8694,
  "domain": "docs.manim.community",
  "word_count": 769,
  "inspection_status": "pending",
  "filename": "Polygram - Manim Community v0.19.0_20250624_175034.json",
  "saved_at": "2025-06-24T17:50:34.452235"
}