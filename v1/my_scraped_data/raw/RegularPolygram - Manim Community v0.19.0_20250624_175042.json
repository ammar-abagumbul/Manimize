{
  "doc_id": "6536d53ec90d46617c584473612894f2",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.polygram.RegularPolygram.html",
  "title": "RegularPolygram - Manim Community v0.19.0",
  "content": "RegularPolygram[¶](#regularpolygram \"Link to this heading\")\n===========================================================\nQualified name: `manim.mobject.geometry.polygram.RegularPolygram`\n*class* RegularPolygram(*num\\_vertices*, *\\**, *density\\=2*, *radius\\=1*, *start\\_angle\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/polygram.html#RegularPolygram)[¶](#manim.mobject.geometry.polygram.RegularPolygram \"Link to this definition\")\nBases: [`Polygram`](manim.mobject.geometry.polygram.Polygram.html#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\")\nA [`Polygram`](manim.mobject.geometry.polygram.Polygram.html#manim.mobject.geometry.polygram.Polygram \"manim.mobject.geometry.polygram.Polygram\") with regularly spaced vertices.\nParameters:\n* **num\\_vertices** (*int*) – The number of vertices.\n* **density** (*int*) – The density of the [`RegularPolygram`](#manim.mobject.geometry.polygram.RegularPolygram \"manim.mobject.geometry.polygram.RegularPolygram\").\nCan be thought of as how many vertices to hop\nto draw a line between them. Every `density`\\-th\nvertex is connected.\n* **radius** (*float*) – The radius of the circle that the vertices are placed on.\n* **start\\_angle** (*float* *\\|* *None*) – The angle the vertices start at; the rotation of\nthe [`RegularPolygram`](#manim.mobject.geometry.polygram.RegularPolygram \"manim.mobject.geometry.polygram.RegularPolygram\").\n* **kwargs** (*Any*) – Forwarded to the parent constructor.\nExamples\nExample: RegularPolygramExample [¶](#regularpolygramexample)\n![../_images/RegularPolygramExample-1.png](../_images/RegularPolygramExample-1.png)\n```\nfrom manim import *\nclass RegularPolygramExample(Scene):\n    def construct(self):\n        pentagram = RegularPolygram(5, radius=2)\n        self.add(pentagram)\n```\n```\nclass RegularPolygramExample(Scene):\n    def construct(self):\n        pentagram = RegularPolygram(5, radius=2)\n        self.add(pentagram)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*num\\_vertices*, *\\**, *density\\=2*, *radius\\=1*, *start\\_angle\\=None*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.polygram.RegularPolygram._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **num\\_vertices** (*int*)\n* **density** (*int*)\n* **radius** (*float*)\n* **start\\_angle** (*float* *\\|* *None*)\n* **kwargs** (*Any*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:50:42.124360",
  "content_length": 2821,
  "domain": "docs.manim.community",
  "word_count": 265,
  "inspection_status": "pending",
  "filename": "RegularPolygram - Manim Community v0.19.0_20250624_175042.json",
  "saved_at": "2025-06-24T17:50:42.124412"
}