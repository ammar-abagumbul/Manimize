{
  "doc_id": "122e247f99591301cc1729501080ba88",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.rotation.Rotating.html",
  "title": "Rotating - Manim Community v0.19.0",
  "content": "Rotating[¶](#rotating \"Link to this heading\")\n=============================================\nQualified name: `manim.animation.rotation.Rotating`\n*class* Rotating(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/rotation.html#Rotating)[¶](#manim.animation.rotation.Rotating \"Link to this definition\")\nBases: [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nAnimation that rotates a Mobject.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject to be rotated.\n* **angle** (*float*) – The rotation angle in radians. Predefined constants such as `DEGREES`\ncan also be used to specify the angle in degrees.\n* **axis** (*np.ndarray*) – The rotation axis as a numpy vector.\n* **about\\_point** (*np.ndarray* *\\|* *None*) – The rotation center.\n* **about\\_edge** (*np.ndarray* *\\|* *None*) – If `about_point` is `None`, this argument specifies\nthe direction of the bounding box point to be taken as\nthe rotation center.\n* **run\\_time** (*float*) – The duration of the animation in seconds.\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*) – The function defining the animation progress based on the relative\nruntime (see [`rate_functions`](manim.utils.rate_functions.html#module-manim.utils.rate_functions \"manim.utils.rate_functions\")) .\n* **\\*\\*kwargs** (*Any*) – Additional keyword arguments passed to [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\").\nExamples\nExample: RotatingDemo [¶](#rotatingdemo)\n```\nfrom manim import *\nclass RotatingDemo(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        line = Line(start=ORIGIN, end=RIGHT)\n        arrow = Arrow(start=ORIGIN, end=RIGHT, buff=0, color=GOLD)\n        vg = VGroup(circle,line,arrow)\n        self.add(vg)\n        anim_kw = {\"about_point\": arrow.get_start(), \"run_time\": 1}\n        self.play(Rotating(arrow, 180*DEGREES, **anim_kw))\n        self.play(Rotating(arrow, PI, **anim_kw))\n        self.play(Rotating(vg, PI, about_point=RIGHT))\n        self.play(Rotating(vg, PI, axis=UP, about_point=ORIGIN))\n        self.play(Rotating(vg, PI, axis=RIGHT, about_edge=UP))\n        self.play(vg.animate.move_to(ORIGIN))\n```\n```\nclass RotatingDemo(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        line = Line(start=ORIGIN, end=RIGHT)\n        arrow = Arrow(start=ORIGIN, end=RIGHT, buff=0, color=GOLD)\n        vg = VGroup(circle,line,arrow)\n        self.add(vg)\n        anim_kw = {\"about_point\": arrow.get_start(), \"run_time\": 1}\n        self.play(Rotating(arrow, 180*DEGREES, **anim_kw))\n        self.play(Rotating(arrow, PI, **anim_kw))\n        self.play(Rotating(vg, PI, about_point=RIGHT))\n        self.play(Rotating(vg, PI, axis=UP, about_point=ORIGIN))\n        self.play(Rotating(vg, PI, axis=RIGHT, about_edge=UP))\n        self.play(vg.animate.move_to(ORIGIN))\n```\nExample: RotatingDifferentAxis [¶](#rotatingdifferentaxis)\n```\nfrom manim import *\nclass RotatingDifferentAxis(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cube = Cube()\n        arrow2d = Arrow(start=[0, -1.2, 1], end=[0, 1.2, 1], color=YELLOW_E)\n        cube_group = VGroup(cube,arrow2d)\n        self.set_camera_orientation(gamma=0, phi=40*DEGREES, theta=40*DEGREES)\n        self.add(axes, cube_group)\n        play_kw = {\"run_time\": 1.5}\n        self.play(Rotating(cube_group, PI), **play_kw)\n        self.play(Rotating(cube_group, PI, axis=UP), **play_kw)\n        self.play(Rotating(cube_group, 180*DEGREES, axis=RIGHT), **play_kw)\n        self.wait(0.5)\n```\n```\nclass RotatingDifferentAxis(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        cube = Cube()\n        arrow2d = Arrow(start=[0, -1.2, 1], end=[0, 1.2, 1], color=YELLOW_E)\n        cube_group = VGroup(cube,arrow2d)\n        self.set_camera_orientation(gamma=0, phi=40*DEGREES, theta=40*DEGREES)\n        self.add(axes, cube_group)\n        play_kw = {\"run_time\": 1.5}\n        self.play(Rotating(cube_group, PI), **play_kw)\n        self.play(Rotating(cube_group, PI, axis=UP), **play_kw)\n        self.play(Rotating(cube_group, 180*DEGREES, axis=RIGHT), **play_kw)\n        self.wait(0.5)\n```\nSee also\n[`Rotate`](manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate \"manim.animation.rotation.Rotate\"), [`rotate()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.rotate \"manim.mobject.mobject.Mobject.rotate\")\nMethods\n| [`interpolate_mobject`](#manim.animation.rotation.Rotating.interpolate_mobject \"manim.animation.rotation.Rotating.interpolate_mobject\") | Interpolates the mobject of the `Animation` based on alpha value. |\n| --- | --- |\nAttributes\n| `run_time` |  |\n| --- | --- |\n\\_original\\_\\_init\\_\\_(*mobject*, *angle\\=6\\.283185307179586*, *axis\\=array(\\[0\\.*, *0\\.*, *1\\.])*, *about\\_point\\=None*, *about\\_edge\\=None*, *run\\_time\\=5*, *rate\\_func\\=\\<function linear\\>*, *\\*\\*kwargs*)[¶](#manim.animation.rotation.Rotating._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **angle** (*float*)\n* **axis** (*np.ndarray*)\n* **about\\_point** (*np.ndarray* *\\|* *None*)\n* **about\\_edge** (*np.ndarray* *\\|* *None*)\n* **run\\_time** (*float*)\n* **rate\\_func** (*Callable**\\[**\\[**float**]**,* *float**]*)\n* **kwargs** (*Any*)\nReturn type:\nNone\ninterpolate\\_mobject(*alpha*)[\\[source]](../_modules/manim/animation/rotation.html#Rotating.interpolate_mobject)[¶](#manim.animation.rotation.Rotating.interpolate_mobject \"Link to this definition\")\nInterpolates the mobject of the `Animation` based on alpha value.\nParameters:\n**alpha** (*float*) – A float between 0 and 1 expressing the ratio to which the animation\nis completed. For example, alpha\\-values of 0, 0\\.5, and 1 correspond\nto the animation being completed 0%, 50%, and 100%, respectively.\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:42:58.614753",
  "content_length": 6213,
  "domain": "docs.manim.community",
  "word_count": 500,
  "inspection_status": "pending",
  "filename": "Rotating - Manim Community v0.19.0_20250624_174258.json",
  "saved_at": "2025-06-24T17:42:58.614816"
}