{
  "doc_id": "da88c9a3d2f7f2f19f8757f5fcb63ea1",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.svg.svg_mobject.SVGMobject.html",
  "title": "SVGMobject - Manim Community v0.19.0",
  "content": "SVGMobject[¶](#svgmobject \"Link to this heading\")\n=================================================\nQualified name: `manim.mobject.svg.svg\\_mobject.SVGMobject`\n*class* SVGMobject(*file\\_name\\=None*, *should\\_center\\=True*, *height\\=2*, *width\\=None*, *color\\=None*, *opacity\\=None*, *fill\\_color\\=None*, *fill\\_opacity\\=None*, *stroke\\_color\\=None*, *stroke\\_opacity\\=None*, *stroke\\_width\\=None*, *svg\\_default\\=None*, *path\\_string\\_config\\=None*, *use\\_svg\\_cache\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA vectorized mobject created from importing an SVG file.\nParameters:\n* **file\\_name** (*str* *\\|* *os.PathLike* *\\|* *None*) – The path to the SVG file.\n* **should\\_center** (*bool*) – Whether or not the mobject should be centered after\nbeing imported.\n* **height** (*float* *\\|* *None*) – The target height of the mobject, set to 2 Manim units by default.\nIf the height and width are both set to `None`, the mobject\nis imported without being scaled.\n* **width** (*float* *\\|* *None*) – The target width of the mobject, set to `None` by default. If\nthe height and the width are both set to `None`, the mobject\nis imported without being scaled.\n* **color** (*str* *\\|* *None*) – The color (both fill and stroke color) of the mobject. If\n`None` (the default), the colors set in the SVG file\nare used.\n* **opacity** (*float* *\\|* *None*) – The opacity (both fill and stroke opacity) of the mobject.\nIf `None` (the default), the opacity set in the SVG file\nis used.\n* **fill\\_color** (*str* *\\|* *None*) – The fill color of the mobject. If `None` (the default),\nthe fill colors set in the SVG file are used.\n* **fill\\_opacity** (*float* *\\|* *None*) – The fill opacity of the mobject. If `None` (the default),\nthe fill opacities set in the SVG file are used.\n* **stroke\\_color** (*str* *\\|* *None*) – The stroke color of the mobject. If `None` (the default),\nthe stroke colors set in the SVG file are used.\n* **stroke\\_opacity** (*float* *\\|* *None*) – The stroke opacity of the mobject. If `None` (the default),\nthe stroke opacities set in the SVG file are used.\n* **stroke\\_width** (*float* *\\|* *None*) – The stroke width of the mobject. If `None` (the default),\nthe stroke width values set in the SVG file are used.\n* **svg\\_default** (*dict* *\\|* *None*) – A dictionary in which fallback values for unspecified\nproperties of elements in the SVG file are defined. If\n`None` (the default), `color`, `opacity`, `fill_color`\n`fill_opacity`, `stroke_color`, and `stroke_opacity`\nare set to `None`, and `stroke_width` is set to 0\\.\n* **path\\_string\\_config** (*dict* *\\|* *None*) – A dictionary with keyword arguments passed to\n[`VMobjectFromSVGPath`](manim.mobject.svg.svg_mobject.VMobjectFromSVGPath.html#manim.mobject.svg.svg_mobject.VMobjectFromSVGPath \"manim.mobject.svg.svg_mobject.VMobjectFromSVGPath\") used for importing path elements.\nIf `None` (the default), no additional arguments are passed.\n* **use\\_svg\\_cache** (*bool*) – If True (default), the svg inputs (e.g. file\\_name, settings)\nwill be used as a key and a copy of the created mobject will\nbe saved using that key to be quickly retrieved if the same\ninputs need be processed later. For large SVGs which are used\nonly once, this can be omitted to improve performance.\n* **kwargs** – Further arguments passed to the parent class.\nMethods\n| [`apply_style_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.apply_style_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.apply_style_to_mobject\") | Apply SVG style information to the converted mobject. |\n| --- | --- |\n| [`ellipse_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.ellipse_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.ellipse_to_mobject\") | Convert an ellipse or circle element to a vectorized mobject. |\n| [`generate_config_style_dict`](#manim.mobject.svg.svg_mobject.SVGMobject.generate_config_style_dict \"manim.mobject.svg.svg_mobject.SVGMobject.generate_config_style_dict\") | Generate a dictionary holding the default style information. |\n| [`generate_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.generate_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.generate_mobject\") | Parse the SVG and translate its elements to submobjects. |\n| [`get_file_path`](#manim.mobject.svg.svg_mobject.SVGMobject.get_file_path \"manim.mobject.svg.svg_mobject.SVGMobject.get_file_path\") | Search for an existing file based on the specified file name. |\n| [`get_mobjects_from`](#manim.mobject.svg.svg_mobject.SVGMobject.get_mobjects_from \"manim.mobject.svg.svg_mobject.SVGMobject.get_mobjects_from\") | Convert the elements of the SVG to a list of mobjects. |\n| [`handle_transform`](#manim.mobject.svg.svg_mobject.SVGMobject.handle_transform \"manim.mobject.svg.svg_mobject.SVGMobject.handle_transform\") | Apply SVG transformations to the converted mobject. |\n| [`init_svg_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.init_svg_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.init_svg_mobject\") | Checks whether the SVG has already been imported and generates it if not. |\n| [`line_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.line_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.line_to_mobject\") | Convert a line element to a vectorized mobject. |\n| [`modify_xml_tree`](#manim.mobject.svg.svg_mobject.SVGMobject.modify_xml_tree \"manim.mobject.svg.svg_mobject.SVGMobject.modify_xml_tree\") | Modifies the SVG element tree to include default style information. |\n| [`move_into_position`](#manim.mobject.svg.svg_mobject.SVGMobject.move_into_position \"manim.mobject.svg.svg_mobject.SVGMobject.move_into_position\") | Scale and move the generated mobject into position. |\n| [`path_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.path_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.path_to_mobject\") | Convert a path element to a vectorized mobject. |\n| [`polygon_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.polygon_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.polygon_to_mobject\") | Convert a polygon element to a vectorized mobject. |\n| [`polyline_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.polyline_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.polyline_to_mobject\") | Convert a polyline element to a vectorized mobject. |\n| [`rect_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.rect_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.rect_to_mobject\") | Convert a rectangle element to a vectorized mobject. |\n| [`text_to_mobject`](#manim.mobject.svg.svg_mobject.SVGMobject.text_to_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.text_to_mobject\") | Convert a text element to a vectorized mobject. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| [`hash_seed`](#manim.mobject.svg.svg_mobject.SVGMobject.hash_seed \"manim.mobject.svg.svg_mobject.SVGMobject.hash_seed\") | A unique hash representing the result of the generated mobject points. |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*file\\_name\\=None*, *should\\_center\\=True*, *height\\=2*, *width\\=None*, *color\\=None*, *opacity\\=None*, *fill\\_color\\=None*, *fill\\_opacity\\=None*, *stroke\\_color\\=None*, *stroke\\_opacity\\=None*, *stroke\\_width\\=None*, *svg\\_default\\=None*, *path\\_string\\_config\\=None*, *use\\_svg\\_cache\\=True*, *\\*\\*kwargs*)[¶](#manim.mobject.svg.svg_mobject.SVGMobject._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **file\\_name** (*str* *\\|* *PathLike* *\\|* *None*)\n* **should\\_center** (*bool*)\n* **height** (*float* *\\|* *None*)\n* **width** (*float* *\\|* *None*)\n* **color** (*str* *\\|* *None*)\n* **opacity** (*float* *\\|* *None*)\n* **fill\\_color** (*str* *\\|* *None*)\n* **fill\\_opacity** (*float* *\\|* *None*)\n* **stroke\\_color** (*str* *\\|* *None*)\n* **stroke\\_opacity** (*float* *\\|* *None*)\n* **stroke\\_width** (*float* *\\|* *None*)\n* **svg\\_default** (*dict* *\\|* *None*)\n* **path\\_string\\_config** (*dict* *\\|* *None*)\n* **use\\_svg\\_cache** (*bool*)\n*static* apply\\_style\\_to\\_mobject(*mob*, *shape*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.apply_style_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.apply_style_to_mobject \"Link to this definition\")\nApply SVG style information to the converted mobject.\nParameters:\n* **mob** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The converted mobject.\n* **shape** (*GraphicObject*) – The parsed SVG element.\nReturn type:\n[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\n*static* ellipse\\_to\\_mobject(*ellipse*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.ellipse_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.ellipse_to_mobject \"Link to this definition\")\nConvert an ellipse or circle element to a vectorized mobject.\nParameters:\n**ellipse** (*Ellipse* *\\|* *Circle*) – The parsed SVG ellipse or circle.\nReturn type:\n[*Circle*](manim.mobject.geometry.arc.Circle.html#manim.mobject.geometry.arc.Circle \"manim.mobject.geometry.arc.Circle\")\ngenerate\\_config\\_style\\_dict()[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.generate_config_style_dict)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.generate_config_style_dict \"Link to this definition\")\nGenerate a dictionary holding the default style information.\nReturn type:\ndict\\[str, str]\ngenerate\\_mobject()[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.generate_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.generate_mobject \"Link to this definition\")\nParse the SVG and translate its elements to submobjects.\nReturn type:\nNone\nget\\_file\\_path()[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.get_file_path)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.get_file_path \"Link to this definition\")\nSearch for an existing file based on the specified file name.\nReturn type:\n*Path*\nget\\_mobjects\\_from(*svg*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.get_mobjects_from)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.get_mobjects_from \"Link to this definition\")\nConvert the elements of the SVG to a list of mobjects.\nParameters:\n**svg** (*SVG*) – The parsed SVG file.\nReturn type:\nlist\\[[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")]\n*static* handle\\_transform(*mob*, *matrix*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.handle_transform)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.handle_transform \"Link to this definition\")\nApply SVG transformations to the converted mobject.\nParameters:\n* **mob** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The converted mobject.\n* **matrix** (*Matrix*) – The transformation matrix determined from the SVG\ntransformation.\nReturn type:\n[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\n*property* hash\\_seed*: tuple*[¶](#manim.mobject.svg.svg_mobject.SVGMobject.hash_seed \"Link to this definition\")\nA unique hash representing the result of the generated\nmobject points.\nUsed as keys in the `SVG_HASH_TO_MOB_MAP` caching dictionary.\ninit\\_svg\\_mobject(*use\\_svg\\_cache*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.init_svg_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.init_svg_mobject \"Link to this definition\")\nChecks whether the SVG has already been imported and\ngenerates it if not.\nSee also\n[`SVGMobject.generate_mobject()`](#manim.mobject.svg.svg_mobject.SVGMobject.generate_mobject \"manim.mobject.svg.svg_mobject.SVGMobject.generate_mobject\")\nParameters:\n**use\\_svg\\_cache** (*bool*)\nReturn type:\nNone\n*static* line\\_to\\_mobject(*line*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.line_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.line_to_mobject \"Link to this definition\")\nConvert a line element to a vectorized mobject.\nParameters:\n**line** (*Line*) – The parsed SVG line.\nReturn type:\n[*Line*](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")\nmodify\\_xml\\_tree(*element\\_tree*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.modify_xml_tree)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.modify_xml_tree \"Link to this definition\")\nModifies the SVG element tree to include default\nstyle information.\nParameters:\n**element\\_tree** (*ElementTree*) – The parsed element tree from the SVG file.\nReturn type:\n*ElementTree*\nmove\\_into\\_position()[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.move_into_position)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.move_into_position \"Link to this definition\")\nScale and move the generated mobject into position.\nReturn type:\nNone\npath\\_to\\_mobject(*path*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.path_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.path_to_mobject \"Link to this definition\")\nConvert a path element to a vectorized mobject.\nParameters:\n**path** (*Path*) – The parsed SVG path.\nReturn type:\n[*VMobjectFromSVGPath*](manim.mobject.svg.svg_mobject.VMobjectFromSVGPath.html#manim.mobject.svg.svg_mobject.VMobjectFromSVGPath \"manim.mobject.svg.svg_mobject.VMobjectFromSVGPath\")\n*static* polygon\\_to\\_mobject(*polygon*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.polygon_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.polygon_to_mobject \"Link to this definition\")\nConvert a polygon element to a vectorized mobject.\nParameters:\n**polygon** (*Polygon*) – The parsed SVG polygon.\nReturn type:\n[*Polygon*](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\")\npolyline\\_to\\_mobject(*polyline*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.polyline_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.polyline_to_mobject \"Link to this definition\")\nConvert a polyline element to a vectorized mobject.\nParameters:\n**polyline** (*Polyline*) – The parsed SVG polyline.\nReturn type:\n[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\n*static* rect\\_to\\_mobject(*rect*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.rect_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.rect_to_mobject \"Link to this definition\")\nConvert a rectangle element to a vectorized mobject.\nParameters:\n**rect** (*Rect*) – The parsed SVG rectangle.\nReturn type:\n[*Rectangle*](manim.mobject.geometry.polygram.Rectangle.html#manim.mobject.geometry.polygram.Rectangle \"manim.mobject.geometry.polygram.Rectangle\")\n*static* text\\_to\\_mobject(*text*)[\\[source]](../_modules/manim/mobject/svg/svg_mobject.html#SVGMobject.text_to_mobject)[¶](#manim.mobject.svg.svg_mobject.SVGMobject.text_to_mobject \"Link to this definition\")\nConvert a text element to a vectorized mobject.\nWarning\nNot yet implemented.\nParameters:\n**text** (*Text*) – The parsed SVG text.",
  "scraped_at": "2025-06-24T17:56:37.165479",
  "content_length": 16118,
  "domain": "docs.manim.community",
  "word_count": 1338,
  "inspection_status": "pending",
  "filename": "SVGMobject - Manim Community v0.19.0_20250624_175637.json",
  "saved_at": "2025-06-24T17:56:37.165566"
}