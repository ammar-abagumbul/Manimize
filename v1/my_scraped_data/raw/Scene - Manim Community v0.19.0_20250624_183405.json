{
  "doc_id": "672c4fa439f52c251ecb10876517a776",
  "url": "https://docs.manim.community/en/latest/reference/manim.scene.scene.Scene.html",
  "title": "Scene - Manim Community v0.19.0",
  "content": "Scene[¶](#scene \"Link to this heading\")\n=======================================\nQualified name: `manim.scene.scene.Scene`\n*class* Scene(*renderer\\=None*, *camera\\_class\\=\\<class 'manim.camera.camera.Camera'\\>*, *always\\_update\\_mobjects\\=False*, *random\\_seed\\=None*, *skip\\_animations\\=False*)[\\[source]](../_modules/manim/scene/scene.html#Scene)[¶](#manim.scene.scene.Scene \"Link to this definition\")\nBases: `object`\nA Scene is the canvas of your animation.\nThe primary role of [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") is to provide the user with tools to manage\nmobjects and animations. Generally speaking, a manim script consists of a class\nthat derives from [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") whose [`Scene.construct()`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\") method is overridden\nby the user’s code.\nMobjects are displayed on screen by calling [`Scene.add()`](#manim.scene.scene.Scene.add \"manim.scene.scene.Scene.add\") and removed from\nscreen by calling [`Scene.remove()`](#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\"). All mobjects currently on screen are kept\nin `Scene.mobjects`. Animations are played by calling [`Scene.play()`](#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\").\nA [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") is rendered internally by calling [`Scene.render()`](#manim.scene.scene.Scene.render \"manim.scene.scene.Scene.render\"). This in\nturn calls [`Scene.setup()`](#manim.scene.scene.Scene.setup \"manim.scene.scene.Scene.setup\"), [`Scene.construct()`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\"), and\n[`Scene.tear_down()`](#manim.scene.scene.Scene.tear_down \"manim.scene.scene.Scene.tear_down\"), in that order.\nIt is not recommended to override the `__init__` method in user Scenes. For code\nthat should be ran before a Scene is rendered, use [`Scene.setup()`](#manim.scene.scene.Scene.setup \"manim.scene.scene.Scene.setup\") instead.\nExamples\nOverride the [`Scene.construct()`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\") method with your code.\n```\nclass MyScene(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello World!\")))\n```\nMethods\n| [`add`](#manim.scene.scene.Scene.add \"manim.scene.scene.Scene.add\") | Mobjects will be displayed, from background to foreground in the order with which they are added. |\n| --- | --- |\n| [`add_foreground_mobject`](#manim.scene.scene.Scene.add_foreground_mobject \"manim.scene.scene.Scene.add_foreground_mobject\") | Adds a single mobject to the foreground, and internally to the list foreground\\_mobjects, and mobjects. |\n| [`add_foreground_mobjects`](#manim.scene.scene.Scene.add_foreground_mobjects \"manim.scene.scene.Scene.add_foreground_mobjects\") | Adds mobjects to the foreground, and internally to the list foreground\\_mobjects, and mobjects. |\n| `add_mobjects_from_animations` |  |\n| [`add_sound`](#manim.scene.scene.Scene.add_sound \"manim.scene.scene.Scene.add_sound\") | This method is used to add a sound to the animation. |\n| [`add_subcaption`](#manim.scene.scene.Scene.add_subcaption \"manim.scene.scene.Scene.add_subcaption\") | Adds an entry in the corresponding subcaption file at the current time stamp. |\n| [`add_updater`](#manim.scene.scene.Scene.add_updater \"manim.scene.scene.Scene.add_updater\") | Add an update function to the scene. |\n| [`begin_animations`](#manim.scene.scene.Scene.begin_animations \"manim.scene.scene.Scene.begin_animations\") | Start the animations of the scene. |\n| [`bring_to_back`](#manim.scene.scene.Scene.bring_to_back \"manim.scene.scene.Scene.bring_to_back\") | Removes the mobject from the scene and adds them to the back of the scene. |\n| [`bring_to_front`](#manim.scene.scene.Scene.bring_to_front \"manim.scene.scene.Scene.bring_to_front\") | Adds the passed mobjects to the scene again, pushing them to he front of the scene. |\n| `check_interactive_embed_is_valid` |  |\n| [`clear`](#manim.scene.scene.Scene.clear \"manim.scene.scene.Scene.clear\") | Removes all mobjects present in self.mobjects and self.foreground\\_mobjects from the scene. |\n| [`compile_animation_data`](#manim.scene.scene.Scene.compile_animation_data \"manim.scene.scene.Scene.compile_animation_data\") | Given a list of animations, compile the corresponding static and moving mobjects, and gather the animation durations. |\n| [`compile_animations`](#manim.scene.scene.Scene.compile_animations \"manim.scene.scene.Scene.compile_animations\") | Creates \\_MethodAnimations from any \\_AnimationBuilders and updates animation kwargs with kwargs passed to play(). |\n| [`construct`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\") | Add content to the Scene. |\n| `embed` |  |\n| [`get_attrs`](#manim.scene.scene.Scene.get_attrs \"manim.scene.scene.Scene.get_attrs\") | Gets attributes of a scene given the attribute's identifier/name. |\n| [`get_mobject_family_members`](#manim.scene.scene.Scene.get_mobject_family_members \"manim.scene.scene.Scene.get_mobject_family_members\") | Returns list of family\\-members of all mobjects in scene. |\n| `get_moving_and_static_mobjects` |  |\n| [`get_moving_mobjects`](#manim.scene.scene.Scene.get_moving_mobjects \"manim.scene.scene.Scene.get_moving_mobjects\") | Gets all moving mobjects in the passed animation(s). |\n| [`get_restructured_mobject_list`](#manim.scene.scene.Scene.get_restructured_mobject_list \"manim.scene.scene.Scene.get_restructured_mobject_list\") | Given a list of mobjects and a list of mobjects to be removed, this filters out the removable mobjects from the list of mobjects. |\n| [`get_run_time`](#manim.scene.scene.Scene.get_run_time \"manim.scene.scene.Scene.get_run_time\") | Gets the total run time for a list of animations. |\n| [`get_time_progression`](#manim.scene.scene.Scene.get_time_progression \"manim.scene.scene.Scene.get_time_progression\") | You will hardly use this when making your own animations. |\n| [`get_top_level_mobjects`](#manim.scene.scene.Scene.get_top_level_mobjects \"manim.scene.scene.Scene.get_top_level_mobjects\") | Returns all mobjects which are not submobjects. |\n| `interact` |  |\n| [`interactive_embed`](#manim.scene.scene.Scene.interactive_embed \"manim.scene.scene.Scene.interactive_embed\") | Like embed(), but allows for screen interaction. |\n| [`is_current_animation_frozen_frame`](#manim.scene.scene.Scene.is_current_animation_frozen_frame \"manim.scene.scene.Scene.is_current_animation_frozen_frame\") | Returns whether the current animation produces a static frame (generally a Wait). |\n| `mouse_drag_orbit_controls` |  |\n| `mouse_scroll_orbit_controls` |  |\n| [`next_section`](#manim.scene.scene.Scene.next_section \"manim.scene.scene.Scene.next_section\") | Create separation here; the last section gets finished and a new one gets created. |\n| `on_key_press` |  |\n| `on_key_release` |  |\n| `on_mouse_drag` |  |\n| `on_mouse_motion` |  |\n| `on_mouse_press` |  |\n| `on_mouse_scroll` |  |\n| [`pause`](#manim.scene.scene.Scene.pause \"manim.scene.scene.Scene.pause\") | Pauses the scene (i.e., displays a frozen frame). |\n| [`play`](#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\") | Plays an animation in this scene. |\n| [`play_internal`](#manim.scene.scene.Scene.play_internal \"manim.scene.scene.Scene.play_internal\") | This method is used to prep the animations for rendering, apply the arguments and parameters required to them, render them, and write them to the video file. |\n| [`remove`](#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\") | Removes mobjects in the passed list of mobjects from the scene and the foreground, by removing them from \"mobjects\" and \"foreground\\_mobjects\" |\n| [`remove_foreground_mobject`](#manim.scene.scene.Scene.remove_foreground_mobject \"manim.scene.scene.Scene.remove_foreground_mobject\") | Removes a single mobject from the foreground, and internally from the list foreground\\_mobjects. |\n| [`remove_foreground_mobjects`](#manim.scene.scene.Scene.remove_foreground_mobjects \"manim.scene.scene.Scene.remove_foreground_mobjects\") | Removes mobjects from the foreground, and internally from the list foreground\\_mobjects. |\n| [`remove_updater`](#manim.scene.scene.Scene.remove_updater \"manim.scene.scene.Scene.remove_updater\") | Remove an update function from the scene. |\n| [`render`](#manim.scene.scene.Scene.render \"manim.scene.scene.Scene.render\") | Renders this Scene. |\n| [`replace`](#manim.scene.scene.Scene.replace \"manim.scene.scene.Scene.replace\") | Replace one mobject in the scene with another, preserving draw order. |\n| [`restructure_mobjects`](#manim.scene.scene.Scene.restructure_mobjects \"manim.scene.scene.Scene.restructure_mobjects\") | tl:wr |\n| `set_key_function` |  |\n| [`setup`](#manim.scene.scene.Scene.setup \"manim.scene.scene.Scene.setup\") | This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called. |\n| [`should_update_mobjects`](#manim.scene.scene.Scene.should_update_mobjects \"manim.scene.scene.Scene.should_update_mobjects\") | Returns True if the mobjects of this scene should be updated. |\n| [`tear_down`](#manim.scene.scene.Scene.tear_down \"manim.scene.scene.Scene.tear_down\") | This is meant to be implemented by any scenes which are commonly subclassed, and have some common method to be invoked before the scene ends. |\n| `update_meshes` |  |\n| [`update_mobjects`](#manim.scene.scene.Scene.update_mobjects \"manim.scene.scene.Scene.update_mobjects\") | Begins updating all mobjects in the Scene. |\n| [`update_self`](#manim.scene.scene.Scene.update_self \"manim.scene.scene.Scene.update_self\") | Run all scene updater functions. |\n| `update_to_time` |  |\n| `validate_run_time` |  |\n| [`wait`](#manim.scene.scene.Scene.wait \"manim.scene.scene.Scene.wait\") | Plays a \"no operation\" animation. |\n| [`wait_until`](#manim.scene.scene.Scene.wait_until \"manim.scene.scene.Scene.wait_until\") | Wait until a condition is satisfied, up to a given maximum duration. |\nAttributes\n| `camera` |  |\n| --- | --- |\n| [`time`](#manim.scene.scene.Scene.time \"manim.scene.scene.Scene.time\") | The time since the start of the scene. |\nParameters:\n* **renderer** (*CairoRenderer* *\\|* *OpenGLRenderer* *\\|* *None*)\n* **camera\\_class** (*type**\\[*[*Camera*](manim.camera.camera.Camera.html#manim.camera.camera.Camera \"manim.camera.camera.Camera\")*]*)\n* **always\\_update\\_mobjects** (*bool*)\n* **random\\_seed** (*int* *\\|* *None*)\n* **skip\\_animations** (*bool*)\n\\_get\\_animation\\_time\\_progression(*animations*, *duration*)[\\[source]](../_modules/manim/scene/scene.html#Scene._get_animation_time_progression)[¶](#manim.scene.scene.Scene._get_animation_time_progression \"Link to this definition\")\nYou will hardly use this when making your own animations.\nThis method is for Manim’s internal use.\nUses `get_time_progression()` to obtain a\nCommandLine ProgressBar whose `fill_time` is\ndependent on the qualities of the passed Animation,\nParameters:\n* **animations** (*list**\\[*[*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The list of animations to get\nthe time progression for.\n* **duration** (*float*) – duration of wait time\nReturns:\nThe CommandLine Progress Bar.\nReturn type:\ntime\\_progression\nadd(*\\*mobjects*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add)[¶](#manim.scene.scene.Scene.add \"Link to this definition\")\nMobjects will be displayed, from background to\nforeground in the order with which they are added.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – Mobjects to add.\nReturns:\nThe same scene after adding the Mobjects in.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nadd\\_foreground\\_mobject(*mobject*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add_foreground_mobject)[¶](#manim.scene.scene.Scene.add_foreground_mobject \"Link to this definition\")\nAdds a single mobject to the foreground, and internally to the list\nforeground\\_mobjects, and mobjects.\nParameters:\n**mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The Mobject to add to the foreground.\nReturns:\nThe Scene, with the foreground mobject added.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nadd\\_foreground\\_mobjects(*\\*mobjects*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add_foreground_mobjects)[¶](#manim.scene.scene.Scene.add_foreground_mobjects \"Link to this definition\")\nAdds mobjects to the foreground, and internally to the list\nforeground\\_mobjects, and mobjects.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The Mobjects to add to the foreground.\nReturns:\nThe Scene, with the foreground mobjects added.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nadd\\_sound(*sound\\_file*, *time\\_offset\\=0*, *gain\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add_sound)[¶](#manim.scene.scene.Scene.add_sound \"Link to this definition\")\nThis method is used to add a sound to the animation.\nParameters:\n* **sound\\_file** (*str*) – The path to the sound file.\n* **time\\_offset** (*float*) – The offset in the sound file after which\nthe sound can be played.\n* **gain** (*float* *\\|* *None*) – Amplification of the sound.\nExamples\nExample: SoundExample [¶](#soundexample)\n```\nfrom manim import *\nclass SoundExample(Scene):\n    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add_sound(\"click.wav\")\n        self.add(dot)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(BLUE)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(RED)\n        self.wait()\n```\n```\nclass SoundExample(Scene):\n    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add_sound(\"click.wav\")\n        self.add(dot)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(BLUE)\n        self.wait()\n        self.add_sound(\"click.wav\")\n        dot.set_color(RED)\n        self.wait()\n```\nDownload the resource for the previous example [here](https://github.com/ManimCommunity/manim/blob/main/docs/source/_static/click.wav) .\nadd\\_subcaption(*content*, *duration\\=1*, *offset\\=0*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add_subcaption)[¶](#manim.scene.scene.Scene.add_subcaption \"Link to this definition\")\nAdds an entry in the corresponding subcaption file\nat the current time stamp.\nThe current time stamp is obtained from `Scene.time`.\nParameters:\n* **content** (*str*) – The subcaption content.\n* **duration** (*float*) – The duration (in seconds) for which the subcaption is shown.\n* **offset** (*float*) – This offset (in seconds) is added to the starting time stamp\nof the subcaption.\nReturn type:\nNone\nExamples\nThis example illustrates both possibilities for adding\nsubcaptions to Manimations:\n```\nclass SubcaptionExample(Scene):\n    def construct(self):\n        square = Square()\n        circle = Circle()\n        # first option: via the add_subcaption method\n        self.add_subcaption(\"Hello square!\", duration=1)\n        self.play(Create(square))\n        # second option: within the call to Scene.play\n        self.play(\n            Transform(square, circle), subcaption=\"The square transforms.\"\n        )\n```\nadd\\_updater(*func*)[\\[source]](../_modules/manim/scene/scene.html#Scene.add_updater)[¶](#manim.scene.scene.Scene.add_updater \"Link to this definition\")\nAdd an update function to the scene.\nThe scene updater functions are run every frame,\nand they are the last type of updaters to run.\nWarning\nWhen using the Cairo renderer, scene updaters that\nmodify mobjects are not detected in the same way\nthat mobject updaters are. To be more concrete,\na mobject only modified via a scene updater will\nnot necessarily be added to the list of *moving\nmobjects* and thus might not be updated every frame.\nTL;DR: Use mobject updaters to update mobjects.\nParameters:\n**func** (*Callable**\\[**\\[**float**]**,* *None**]*) – The updater function. It takes a float, which is the\ntime difference since the last update (usually equal\nto the frame rate).\nReturn type:\nNone\nSee also\n[`Scene.remove_updater()`](#manim.scene.scene.Scene.remove_updater \"manim.scene.scene.Scene.remove_updater\"), [`Scene.update_self()`](#manim.scene.scene.Scene.update_self \"manim.scene.scene.Scene.update_self\")\nbegin\\_animations()[\\[source]](../_modules/manim/scene/scene.html#Scene.begin_animations)[¶](#manim.scene.scene.Scene.begin_animations \"Link to this definition\")\nStart the animations of the scene.\nReturn type:\nNone\nbring\\_to\\_back(*\\*mobjects*)[\\[source]](../_modules/manim/scene/scene.html#Scene.bring_to_back)[¶](#manim.scene.scene.Scene.bring_to_back \"Link to this definition\")\nRemoves the mobject from the scene and\nadds them to the back of the scene.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject(s) to push to the back of the scene.\nReturns:\nThe Scene, with the mobjects pushed to the back\nof the scene.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nbring\\_to\\_front(*\\*mobjects*)[\\[source]](../_modules/manim/scene/scene.html#Scene.bring_to_front)[¶](#manim.scene.scene.Scene.bring_to_front \"Link to this definition\")\nAdds the passed mobjects to the scene again,\npushing them to he front of the scene.\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject(s) to bring to the front of the scene.\nReturns:\nThe Scene, with the mobjects brought to the front\nof the scene.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nclear()[\\[source]](../_modules/manim/scene/scene.html#Scene.clear)[¶](#manim.scene.scene.Scene.clear \"Link to this definition\")\nRemoves all mobjects present in self.mobjects\nand self.foreground\\_mobjects from the scene.\nReturns:\nThe Scene, with all of its mobjects in\nself.mobjects and self.foreground\\_mobjects\nremoved.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\ncompile\\_animation\\_data(*\\*animations*, *\\*\\*play\\_kwargs*)[\\[source]](../_modules/manim/scene/scene.html#Scene.compile_animation_data)[¶](#manim.scene.scene.Scene.compile_animation_data \"Link to this definition\")\nGiven a list of animations, compile the corresponding\nstatic and moving mobjects, and gather the animation durations.\nThis also begins the animations.\nParameters:\n* **animations** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *\\_AnimationBuilder*) – Animation or mobject with mobject method and params\n* **play\\_kwargs** – Named parameters affecting what was passed in `animations`,\ne.g. `run_time`, `lag_ratio` and so on.\nReturns:\nNone if there is nothing to play, or self otherwise.\nReturn type:\nself, None\ncompile\\_animations(*\\*args*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/scene.html#Scene.compile_animations)[¶](#manim.scene.scene.Scene.compile_animations \"Link to this definition\")\nCreates \\_MethodAnimations from any \\_AnimationBuilders and updates animation\nkwargs with kwargs passed to play().\nParameters:\n* **\\*args** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *\\_AnimationBuilder*) – Animations to be played.\n* **\\*\\*kwargs** – Configuration for the call to play().\nReturns:\nAnimations to be played.\nReturn type:\nTuple\\[`Animation`]\nconstruct()[\\[source]](../_modules/manim/scene/scene.html#Scene.construct)[¶](#manim.scene.scene.Scene.construct \"Link to this definition\")\nAdd content to the Scene.\nFrom within [`Scene.construct()`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\"), display mobjects on screen by calling\n[`Scene.add()`](#manim.scene.scene.Scene.add \"manim.scene.scene.Scene.add\") and remove them from screen by calling [`Scene.remove()`](#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\").\nAll mobjects currently on screen are kept in `Scene.mobjects`. Play\nanimations by calling [`Scene.play()`](#manim.scene.scene.Scene.play \"manim.scene.scene.Scene.play\").\nNotes\nInitialization code should go in [`Scene.setup()`](#manim.scene.scene.Scene.setup \"manim.scene.scene.Scene.setup\"). Termination code should\ngo in [`Scene.tear_down()`](#manim.scene.scene.Scene.tear_down \"manim.scene.scene.Scene.tear_down\").\nExamples\nA typical manim script includes a class derived from [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") with an\noverridden [`Scene.construct()`](#manim.scene.scene.Scene.construct \"manim.scene.scene.Scene.construct\") method:\n```\nclass MyScene(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello World!\")))\n```\nSee also\n[`Scene.setup()`](#manim.scene.scene.Scene.setup \"manim.scene.scene.Scene.setup\"), [`Scene.render()`](#manim.scene.scene.Scene.render \"manim.scene.scene.Scene.render\"), [`Scene.tear_down()`](#manim.scene.scene.Scene.tear_down \"manim.scene.scene.Scene.tear_down\")\nget\\_attrs(*\\*keys*)[\\[source]](../_modules/manim/scene/scene.html#Scene.get_attrs)[¶](#manim.scene.scene.Scene.get_attrs \"Link to this definition\")\nGets attributes of a scene given the attribute’s identifier/name.\nParameters:\n**\\*keys** (*str*) – Name(s) of the argument(s) to return the attribute of.\nReturns:\nList of attributes of the passed identifiers.\nReturn type:\nlist\nget\\_mobject\\_family\\_members()[\\[source]](../_modules/manim/scene/scene.html#Scene.get_mobject_family_members)[¶](#manim.scene.scene.Scene.get_mobject_family_members \"Link to this definition\")\nReturns list of family\\-members of all mobjects in scene.\nIf a Circle() and a VGroup(Rectangle(),Triangle()) were added,\nit returns not only the Circle(), Rectangle() and Triangle(), but\nalso the VGroup() object.\nReturns:\nList of mobject family members.\nReturn type:\nlist\nget\\_moving\\_mobjects(*\\*animations*)[\\[source]](../_modules/manim/scene/scene.html#Scene.get_moving_mobjects)[¶](#manim.scene.scene.Scene.get_moving_mobjects \"Link to this definition\")\nGets all moving mobjects in the passed animation(s).\nParameters:\n**\\*animations** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")) – The animations to check for moving mobjects.\nReturns:\nThe list of mobjects that could be moving in\nthe Animation(s)\nReturn type:\nlist\nget\\_restructured\\_mobject\\_list(*mobjects*, *to\\_remove*)[\\[source]](../_modules/manim/scene/scene.html#Scene.get_restructured_mobject_list)[¶](#manim.scene.scene.Scene.get_restructured_mobject_list \"Link to this definition\")\nGiven a list of mobjects and a list of mobjects to be removed, this\nfilters out the removable mobjects from the list of mobjects.\nParameters:\n* **mobjects** (*list*) – The Mobjects to check.\n* **to\\_remove** (*list*) – The list of mobjects to remove.\nReturns:\nThe list of mobjects with the mobjects to remove removed.\nReturn type:\nlist\nget\\_run\\_time(*animations*)[\\[source]](../_modules/manim/scene/scene.html#Scene.get_run_time)[¶](#manim.scene.scene.Scene.get_run_time \"Link to this definition\")\nGets the total run time for a list of animations.\nParameters:\n**animations** (*list**\\[*[*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – A list of the animations whose total\n`run_time` is to be calculated.\nReturns:\nThe total `run_time` of all of the animations in the list.\nReturn type:\nfloat\nget\\_time\\_progression(*run\\_time*, *description*, *n\\_iterations\\=None*, *override\\_skip\\_animations\\=False*)[\\[source]](../_modules/manim/scene/scene.html#Scene.get_time_progression)[¶](#manim.scene.scene.Scene.get_time_progression \"Link to this definition\")\nYou will hardly use this when making your own animations.\nThis method is for Manim’s internal use.\nReturns a CommandLine ProgressBar whose `fill_time`\nis dependent on the `run_time` of an animation,\nthe iterations to perform in that animation\nand a bool saying whether or not to consider\nthe skipped animations.\nParameters:\n* **run\\_time** (*float*) – The `run_time` of the animation.\n* **n\\_iterations** (*int* *\\|* *None*) – The number of iterations in the animation.\n* **override\\_skip\\_animations** (*bool*) – Whether or not to show skipped animations in the progress bar.\nReturns:\nThe CommandLine Progress Bar.\nReturn type:\ntime\\_progression\nget\\_top\\_level\\_mobjects()[\\[source]](../_modules/manim/scene/scene.html#Scene.get_top_level_mobjects)[¶](#manim.scene.scene.Scene.get_top_level_mobjects \"Link to this definition\")\nReturns all mobjects which are not submobjects.\nReturns:\nList of top level mobjects.\nReturn type:\nlist\ninteractive\\_embed()[\\[source]](../_modules/manim/scene/scene.html#Scene.interactive_embed)[¶](#manim.scene.scene.Scene.interactive_embed \"Link to this definition\")\nLike embed(), but allows for screen interaction.\nis\\_current\\_animation\\_frozen\\_frame()[\\[source]](../_modules/manim/scene/scene.html#Scene.is_current_animation_frozen_frame)[¶](#manim.scene.scene.Scene.is_current_animation_frozen_frame \"Link to this definition\")\nReturns whether the current animation produces a static frame (generally a Wait).\nReturn type:\nbool\nnext\\_section(*name\\='unnamed'*, *section\\_type\\=DefaultSectionType.NORMAL*, *skip\\_animations\\=False*)[\\[source]](../_modules/manim/scene/scene.html#Scene.next_section)[¶](#manim.scene.scene.Scene.next_section \"Link to this definition\")\nCreate separation here; the last section gets finished and a new one gets created.\n`skip_animations` skips the rendering of all animations in this section.\nRefer to [the documentation](../tutorials/output_and_config.html) on how to use sections.\nParameters:\n* **name** (*str*)\n* **section\\_type** (*str*)\n* **skip\\_animations** (*bool*)\nReturn type:\nNone\npause(*duration\\=1\\.0*)[\\[source]](../_modules/manim/scene/scene.html#Scene.pause)[¶](#manim.scene.scene.Scene.pause \"Link to this definition\")\nPauses the scene (i.e., displays a frozen frame).\nThis is an alias for [`wait()`](#manim.scene.scene.Scene.wait \"manim.scene.scene.Scene.wait\") with `frozen_frame`\nset to `True`.\nParameters:\n**duration** (*float*) – The duration of the pause.\nSee also\n[`wait()`](#manim.scene.scene.Scene.wait \"manim.scene.scene.Scene.wait\"), [`Wait`](manim.animation.animation.Wait.html#manim.animation.animation.Wait \"manim.animation.animation.Wait\")\nplay(*\\*args*, *subcaption\\=None*, *subcaption\\_duration\\=None*, *subcaption\\_offset\\=0*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/scene/scene.html#Scene.play)[¶](#manim.scene.scene.Scene.play \"Link to this definition\")\nPlays an animation in this scene.\nParameters:\n* **args** ([*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\") *\\|* [*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *\\_AnimationBuilder*) – Animations to be played.\n* **subcaption** – The content of the external subcaption that should\nbe added during the animation.\n* **subcaption\\_duration** – The duration for which the specified subcaption is\nadded. If `None` (the default), the run time of the\nanimation is taken.\n* **subcaption\\_offset** – An offset (in seconds) for the start time of the\nadded subcaption.\n* **kwargs** – All other keywords are passed to the renderer.\nplay\\_internal(*skip\\_rendering\\=False*)[\\[source]](../_modules/manim/scene/scene.html#Scene.play_internal)[¶](#manim.scene.scene.Scene.play_internal \"Link to this definition\")\nThis method is used to prep the animations for rendering,\napply the arguments and parameters required to them,\nrender them, and write them to the video file.\nParameters:\n**skip\\_rendering** (*bool*) – Whether the rendering should be skipped, by default False\nremove(*\\*mobjects*)[\\[source]](../_modules/manim/scene/scene.html#Scene.remove)[¶](#manim.scene.scene.Scene.remove \"Link to this definition\")\nRemoves mobjects in the passed list of mobjects\nfrom the scene and the foreground, by removing them\nfrom “mobjects” and “foreground\\_mobjects”\nParameters:\n**\\*mobjects** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobjects to remove.\nremove\\_foreground\\_mobject(*mobject*)[\\[source]](../_modules/manim/scene/scene.html#Scene.remove_foreground_mobject)[¶](#manim.scene.scene.Scene.remove_foreground_mobject \"Link to this definition\")\nRemoves a single mobject from the foreground, and internally from the list\nforeground\\_mobjects.\nParameters:\n**mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject to remove from the foreground.\nReturns:\nThe Scene, with the foreground mobject removed.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nremove\\_foreground\\_mobjects(*\\*to\\_remove*)[\\[source]](../_modules/manim/scene/scene.html#Scene.remove_foreground_mobjects)[¶](#manim.scene.scene.Scene.remove_foreground_mobjects \"Link to this definition\")\nRemoves mobjects from the foreground, and internally from the list\nforeground\\_mobjects.\nParameters:\n**\\*to\\_remove** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject(s) to remove from the foreground.\nReturns:\nThe Scene, with the foreground mobjects removed.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nremove\\_updater(*func*)[\\[source]](../_modules/manim/scene/scene.html#Scene.remove_updater)[¶](#manim.scene.scene.Scene.remove_updater \"Link to this definition\")\nRemove an update function from the scene.\nParameters:\n**func** (*Callable**\\[**\\[**float**]**,* *None**]*) – The updater function to be removed.\nReturn type:\nNone\nSee also\n[`Scene.add_updater()`](#manim.scene.scene.Scene.add_updater \"manim.scene.scene.Scene.add_updater\"), [`Scene.update_self()`](#manim.scene.scene.Scene.update_self \"manim.scene.scene.Scene.update_self\")\nrender(*preview\\=False*)[\\[source]](../_modules/manim/scene/scene.html#Scene.render)[¶](#manim.scene.scene.Scene.render \"Link to this definition\")\nRenders this Scene.\nParameters:\n**preview** (*bool*) – If true, opens scene in a file viewer.\nreplace(*old\\_mobject*, *new\\_mobject*)[\\[source]](../_modules/manim/scene/scene.html#Scene.replace)[¶](#manim.scene.scene.Scene.replace \"Link to this definition\")\nReplace one mobject in the scene with another, preserving draw order.\nIf `old_mobject` is a submobject of some other Mobject (e.g. a\n[`Group`](manim.mobject.mobject.Group.html#manim.mobject.mobject.Group \"manim.mobject.mobject.Group\")), the new\\_mobject will replace it inside the group,\nwithout otherwise changing the parent mobject.\nParameters:\n* **old\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The mobject to be replaced. Must be present in the scene.\n* **new\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – A mobject which must not already be in the scene.\nReturn type:\nNone\nrestructure\\_mobjects(*to\\_remove*, *mobject\\_list\\_name\\='mobjects'*, *extract\\_families\\=True*)[\\[source]](../_modules/manim/scene/scene.html#Scene.restructure_mobjects)[¶](#manim.scene.scene.Scene.restructure_mobjects \"Link to this definition\")\ntl:wrIf your scene has a Group(), and you removed a mobject from the Group,\nthis dissolves the group and puts the rest of the mobjects directly\nin self.mobjects or self.foreground\\_mobjects.\nIn cases where the scene contains a group, e.g. Group(m1, m2, m3\\), but one\nof its submobjects is removed, e.g. scene.remove(m1\\), the list of mobjects\nwill be edited to contain other submobjects, but not m1, e.g. it will now\ninsert m2 and m3 to where the group once was.\nParameters:\n* **to\\_remove** (*Sequence**\\[*[*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")*]*) – The Mobject to remove.\n* **mobject\\_list\\_name** (*str*) – The list of mobjects (“mobjects”, “foreground\\_mobjects” etc) to remove from.\n* **extract\\_families** (*bool*) – Whether the mobject’s families should be recursively extracted.\nReturns:\nThe Scene mobject with restructured Mobjects.\nReturn type:\n[Scene](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nsetup()[\\[source]](../_modules/manim/scene/scene.html#Scene.setup)[¶](#manim.scene.scene.Scene.setup \"Link to this definition\")\nThis is meant to be implemented by any scenes which\nare commonly subclassed, and have some common setup\ninvolved before the construct method is called.\nshould\\_update\\_mobjects()[\\[source]](../_modules/manim/scene/scene.html#Scene.should_update_mobjects)[¶](#manim.scene.scene.Scene.should_update_mobjects \"Link to this definition\")\nReturns True if the mobjects of this scene should be updated.\nIn particular, this checks whether\n* the `always_update_mobjects` attribute of [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\")\nis set to `True`,\n* the [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") itself has time\\-based updaters attached,\n* any mobject in this [`Scene`](#manim.scene.scene.Scene \"manim.scene.scene.Scene\") has time\\-based updaters attached.\nThis is only called when a single Wait animation is played.\nReturn type:\nbool\ntear\\_down()[\\[source]](../_modules/manim/scene/scene.html#Scene.tear_down)[¶](#manim.scene.scene.Scene.tear_down \"Link to this definition\")\nThis is meant to be implemented by any scenes which\nare commonly subclassed, and have some common method\nto be invoked before the scene ends.\n*property* time*: float*[¶](#manim.scene.scene.Scene.time \"Link to this definition\")\nThe time since the start of the scene.\nupdate\\_mobjects(*dt*)[\\[source]](../_modules/manim/scene/scene.html#Scene.update_mobjects)[¶](#manim.scene.scene.Scene.update_mobjects \"Link to this definition\")\nBegins updating all mobjects in the Scene.\nParameters:\n**dt** (*float*) – Change in time between updates. Defaults (mostly) to 1/frames\\_per\\_second\nupdate\\_self(*dt*)[\\[source]](../_modules/manim/scene/scene.html#Scene.update_self)[¶](#manim.scene.scene.Scene.update_self \"Link to this definition\")\nRun all scene updater functions.\nAmong all types of update functions (mobject updaters, mesh updaters,\nscene updaters), scene update functions are called last.\nParameters:\n**dt** (*float*) – Scene time since last update.\nSee also\n[`Scene.add_updater()`](#manim.scene.scene.Scene.add_updater \"manim.scene.scene.Scene.add_updater\"), [`Scene.remove_updater()`](#manim.scene.scene.Scene.remove_updater \"manim.scene.scene.Scene.remove_updater\")\nwait(*duration\\=1\\.0*, *stop\\_condition\\=None*, *frozen\\_frame\\=None*)[\\[source]](../_modules/manim/scene/scene.html#Scene.wait)[¶](#manim.scene.scene.Scene.wait \"Link to this definition\")\nPlays a “no operation” animation.\nParameters:\n* **duration** (*float*) – The run time of the animation.\n* **stop\\_condition** (*Callable**\\[**\\[**]**,* *bool**]* *\\|* *None*) – A function without positional arguments that is evaluated every time\na frame is rendered. The animation only stops when the return value\nof the function is truthy, or when the time specified in `duration`\npasses.\n* **frozen\\_frame** (*bool* *\\|* *None*) – If True, updater functions are not evaluated, and the animation outputs\na frozen frame. If False, updater functions are called and frames\nare rendered as usual. If None (the default), the scene tries to\ndetermine whether or not the frame is frozen on its own.\nSee also\n[`Wait`](manim.animation.animation.Wait.html#manim.animation.animation.Wait \"manim.animation.animation.Wait\"), `should_mobjects_update()`\nwait\\_until(*stop\\_condition*, *max\\_time\\=60*)[\\[source]](../_modules/manim/scene/scene.html#Scene.wait_until)[¶](#manim.scene.scene.Scene.wait_until \"Link to this definition\")\nWait until a condition is satisfied, up to a given maximum duration.\nParameters:\n* **stop\\_condition** (*Callable**\\[**\\[**]**,* *bool**]*) – A function with no arguments that determines whether or not the\nscene should keep waiting.\n* **max\\_time** (*float*) – The maximum wait time in seconds.",
  "scraped_at": "2025-06-24T18:34:05.628003",
  "content_length": 37022,
  "domain": "docs.manim.community",
  "word_count": 3299,
  "inspection_status": "pending",
  "filename": "Scene - Manim Community v0.19.0_20250624_183405.json",
  "saved_at": "2025-06-24T18:34:05.628160"
}