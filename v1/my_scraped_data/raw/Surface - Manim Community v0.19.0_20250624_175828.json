{
  "doc_id": "177350dc7a195f88ffd6fb1d6d7da3d7",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.three_d.three_dimensions.Surface.html",
  "title": "Surface - Manim Community v0.19.0",
  "content": "Surface[¶](#surface \"Link to this heading\")\n===========================================\nQualified name: `manim.mobject.three\\_d.three\\_dimensions.Surface`\n*class* Surface(*func*, *u\\_range\\=\\[0, 1]*, *v\\_range\\=\\[0, 1]*, *resolution\\=32*, *surface\\_piece\\_config\\={}*, *fill\\_color\\=ManimColor('\\#29ABCA')*, *fill\\_opacity\\=1\\.0*, *checkerboard\\_colors\\=\\[ManimColor('\\#29ABCA'), ManimColor('\\#236B8E')]*, *stroke\\_color\\=ManimColor('\\#BBBBBB')*, *stroke\\_width\\=0\\.5*, *should\\_make\\_jagged\\=False*, *pre\\_function\\_handle\\_to\\_anchor\\_scale\\_factor\\=1e\\-05*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Surface)[¶](#manim.mobject.three_d.three_dimensions.Surface \"Link to this definition\")\nBases: [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nCreates a Parametric Surface using a checkerboard pattern.\nParameters:\n* **func** (*Callable**\\[**\\[**float**,* *float**]**,* *np.ndarray**]*) – The function defining the [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\").\n* **u\\_range** (*Sequence**\\[**float**]*) – The range of the `u` variable: `(u_min, u_max)`.\n* **v\\_range** (*Sequence**\\[**float**]*) – The range of the `v` variable: `(v_min, v_max)`.\n* **resolution** (*Sequence**\\[**int**]*) – The number of samples taken of the [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\"). A tuple can be\nused to define different resolutions for `u` and `v` respectively.\n* **fill\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color of the [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\"). Ignored if `checkerboard_colors`\nis set.\n* **fill\\_opacity** (*float*) – The opacity of the [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\"), from 0 being fully transparent\nto 1 being fully opaque. Defaults to 1\\.\n* **checkerboard\\_colors** (*Sequence**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]* *\\|* *bool*) – ng individual faces alternating colors. Overrides `fill_color`.\n* **stroke\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – Color of the stroke surrounding each face of [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\").\n* **stroke\\_width** (*float*) – Width of the stroke surrounding each face of [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\").\nDefaults to 0\\.5\\.\n* **should\\_make\\_jagged** (*bool*) – Changes the anchor mode of the Bézier curves from smooth to jagged.\nDefaults to `False`.\n* **surface\\_piece\\_config** (*dict*)\n* **pre\\_function\\_handle\\_to\\_anchor\\_scale\\_factor** (*float*)\n* **kwargs** (*Any*)\nExamples\nExample: ParaSurface [¶](#parasurface)\n![../_images/ParaSurface-1.png](../_images/ParaSurface-1.png)\n```\nfrom manim import *\nclass ParaSurface(ThreeDScene):\n    def func(self, u, v):\n        return np.array([np.cos(u) * np.cos(v), np.cos(u) * np.sin(v), u])\n    def construct(self):\n        axes = ThreeDAxes(x_range=[-4,4], x_length=8)\n        surface = Surface(\n            lambda u, v: axes.c2p(*self.func(u, v)),\n            u_range=[-PI, PI],\n            v_range=[0, TAU],\n            resolution=8,\n        )\n        self.set_camera_orientation(theta=70 * DEGREES, phi=75 * DEGREES)\n        self.add(axes, surface)\n```\n```\nclass ParaSurface(ThreeDScene):\n    def func(self, u, v):\n        return np.array([np.cos(u) * np.cos(v), np.cos(u) * np.sin(v), u])\n    def construct(self):\n        axes = ThreeDAxes(x_range=[-4,4], x_length=8)\n        surface = Surface(\n            lambda u, v: axes.c2p(*self.func(u, v)),\n            u_range=[-PI, PI],\n            v_range=[0, TAU],\n            resolution=8,\n        )\n        self.set_camera_orientation(theta=70 * DEGREES, phi=75 * DEGREES)\n        self.add(axes, surface)\n```\nMethods\n| `func` |  |\n| --- | --- |\n| [`set_fill_by_checkerboard`](#manim.mobject.three_d.three_dimensions.Surface.set_fill_by_checkerboard \"manim.mobject.three_d.three_dimensions.Surface.set_fill_by_checkerboard\") | Sets the fill\\_color of each face of [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\") in an alternating pattern. |\n| [`set_fill_by_value`](#manim.mobject.three_d.three_dimensions.Surface.set_fill_by_value \"manim.mobject.three_d.three_dimensions.Surface.set_fill_by_value\") | Sets the color of each mobject of a parametric surface to a color relative to its axis\\-value. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*func*, *u\\_range\\=\\[0, 1]*, *v\\_range\\=\\[0, 1]*, *resolution\\=32*, *surface\\_piece\\_config\\={}*, *fill\\_color\\=ManimColor('\\#29ABCA')*, *fill\\_opacity\\=1\\.0*, *checkerboard\\_colors\\=\\[ManimColor('\\#29ABCA'), ManimColor('\\#236B8E')]*, *stroke\\_color\\=ManimColor('\\#BBBBBB')*, *stroke\\_width\\=0\\.5*, *should\\_make\\_jagged\\=False*, *pre\\_function\\_handle\\_to\\_anchor\\_scale\\_factor\\=1e\\-05*, *\\*\\*kwargs*)[¶](#manim.mobject.three_d.three_dimensions.Surface._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **func** (*Callable**\\[**\\[**float**,* *float**]**,* *ndarray**]*)\n* **u\\_range** (*Sequence**\\[**float**]*)\n* **v\\_range** (*Sequence**\\[**float**]*)\n* **resolution** (*Sequence**\\[**int**]*)\n* **surface\\_piece\\_config** (*dict*)\n* **fill\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **fill\\_opacity** (*float*)\n* **checkerboard\\_colors** (*Sequence**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**]* *\\|* *bool*)\n* **stroke\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **stroke\\_width** (*float*)\n* **should\\_make\\_jagged** (*bool*)\n* **pre\\_function\\_handle\\_to\\_anchor\\_scale\\_factor** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone\nset\\_fill\\_by\\_checkerboard(*\\*colors*, *opacity\\=None*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Surface.set_fill_by_checkerboard)[¶](#manim.mobject.three_d.three_dimensions.Surface.set_fill_by_checkerboard \"Link to this definition\")\nSets the fill\\_color of each face of [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\") in\nan alternating pattern.\nParameters:\n* **colors** (*Iterable**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**]*) – List of colors for alternating pattern.\n* **opacity** (*float* *\\|* *None*) – The fill\\_opacity of [`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\"), from 0 being fully transparent\nto 1 being fully opaque.\nReturns:\nThe parametric surface with an alternating pattern.\nReturn type:\n[`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\")\nset\\_fill\\_by\\_value(*axes*, *colorscale\\=None*, *axis\\=2*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/three_d/three_dimensions.html#Surface.set_fill_by_value)[¶](#manim.mobject.three_d.three_dimensions.Surface.set_fill_by_value \"Link to this definition\")\nSets the color of each mobject of a parametric surface to a color\nrelative to its axis\\-value.\nParameters:\n* **axes** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")) – The axes for the parametric surface, which will be used to map\naxis\\-values to colors.\n* **colorscale** (*list**\\[*[*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")*]* *\\|* [*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – A list of colors, ordered from lower axis\\-values to higher axis\\-values.\nIf a list of tuples is passed containing colors paired with numbers,\nthen those numbers will be used as the pivots.\n* **axis** (*int*) – The chosen axis to use for the color mapping. (0 \\= x, 1 \\= y, 2 \\= z)\nReturns:\nThe parametric surface with a gradient applied by value. For chaining.\nReturn type:\n[`Surface`](#manim.mobject.three_d.three_dimensions.Surface \"manim.mobject.three_d.three_dimensions.Surface\")\nExamples\nExample: FillByValueExample [¶](#fillbyvalueexample)\n![../_images/FillByValueExample-1.png](../_images/FillByValueExample-1.png)\n```\nfrom manim import *\nclass FillByValueExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 8\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-160 * DEGREES)\n        axes = ThreeDAxes(x_range=(0, 5, 1), y_range=(0, 5, 1), z_range=(-1, 1, 0.5))\n        def param_surface(u, v):\n            x = u\n            y = v\n            z = np.sin(x) * np.cos(y)\n            return z\n        surface_plane = Surface(\n            lambda u, v: axes.c2p(u, v, param_surface(u, v)),\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[0, 5],\n            u_range=[0, 5],\n            )\n        surface_plane.set_style(fill_opacity=1)\n        surface_plane.set_fill_by_value(axes=axes, colorscale=[(RED, -0.5), (YELLOW, 0), (GREEN, 0.5)], axis=2)\n        self.add(axes, surface_plane)\n```\n```\nclass FillByValueExample(ThreeDScene):\n    def construct(self):\n        resolution_fa = 8\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-160 * DEGREES)\n        axes = ThreeDAxes(x_range=(0, 5, 1), y_range=(0, 5, 1), z_range=(-1, 1, 0.5))\n        def param_surface(u, v):\n            x = u\n            y = v\n            z = np.sin(x) * np.cos(y)\n            return z\n        surface_plane = Surface(\n            lambda u, v: axes.c2p(u, v, param_surface(u, v)),\n            resolution=(resolution_fa, resolution_fa),\n            v_range=[0, 5],\n            u_range=[0, 5],\n            )\n        surface_plane.set_style(fill_opacity=1)\n        surface_plane.set_fill_by_value(axes=axes, colorscale=[(RED, -0.5), (YELLOW, 0), (GREEN, 0.5)], axis=2)\n        self.add(axes, surface_plane)\n```",
  "scraped_at": "2025-06-24T17:58:28.801719",
  "content_length": 11097,
  "domain": "docs.manim.community",
  "word_count": 862,
  "inspection_status": "pending",
  "filename": "Surface - Manim Community v0.19.0_20250624_175828.json",
  "saved_at": "2025-06-24T17:58:28.801798"
}