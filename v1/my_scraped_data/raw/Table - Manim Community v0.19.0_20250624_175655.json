{
  "doc_id": "b46179ce99aa13cf029ab58104405dcf",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.table.Table.html",
  "title": "Table - Manim Community v0.19.0",
  "content": "Table[¶](#table \"Link to this heading\")\n=======================================\nQualified name: `manim.mobject.table.Table`\n*class* Table(*table*, *row\\_labels\\=None*, *col\\_labels\\=None*, *top\\_left\\_entry\\=None*, *v\\_buff\\=0\\.8*, *h\\_buff\\=1\\.3*, *include\\_outer\\_lines\\=False*, *add\\_background\\_rectangles\\_to\\_entries\\=False*, *entries\\_background\\_color\\=ManimColor('\\#000000')*, *include\\_background\\_rectangle\\=False*, *background\\_rectangle\\_color\\=ManimColor('\\#000000')*, *element\\_to\\_mobject\\=\\<class 'manim.mobject.text.text\\_mobject.Paragraph'\\>*, *element\\_to\\_mobject\\_config\\={}*, *arrange\\_in\\_grid\\_config\\={}*, *line\\_config\\={}*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table)[¶](#manim.mobject.table.Table \"Link to this definition\")\nBases: [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nA mobject that displays a table on the screen.\nParameters:\n* **table** (*Iterable**\\[**Iterable**\\[**float* *\\|* *str* *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*) – A 2D array or list of lists. Content of the table has to be a valid input\nfor the callable set in `element_to_mobject`.\n* **row\\_labels** (*Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *None*) – List of [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") representing the labels of each row.\n* **col\\_labels** (*Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *None*) – List of [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") representing the labels of each column.\n* **top\\_left\\_entry** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* *None*) – The top\\-left entry of the table, can only be specified if row and\ncolumn labels are given.\n* **v\\_buff** (*float*) – Vertical buffer passed to [`arrange_in_grid()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.arrange_in_grid \"manim.mobject.mobject.Mobject.arrange_in_grid\"), by default 0\\.8\\.\n* **h\\_buff** (*float*) – Horizontal buffer passed to [`arrange_in_grid()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.arrange_in_grid \"manim.mobject.mobject.Mobject.arrange_in_grid\"), by default 1\\.3\\.\n* **include\\_outer\\_lines** (*bool*) – `True` if the table should include outer lines, by default False.\n* **add\\_background\\_rectangles\\_to\\_entries** (*bool*) – `True` if background rectangles should be added to entries, by default `False`.\n* **entries\\_background\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – Background color of entries if `add_background_rectangles_to_entries` is `True`.\n* **include\\_background\\_rectangle** (*bool*) – `True` if the table should have a background rectangle, by default `False`.\n* **background\\_rectangle\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – Background color of table if `include_background_rectangle` is `True`.\n* **element\\_to\\_mobject** (*Callable**\\[**\\[**float* *\\|* *str* *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*) – The [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") class applied to the table entries. by default [`Paragraph`](manim.mobject.text.text_mobject.Paragraph.html#manim.mobject.text.text_mobject.Paragraph \"manim.mobject.text.text_mobject.Paragraph\"). For common choices, see [`text_mobject`](manim.mobject.text.text_mobject.html#module-manim.mobject.text.text_mobject \"manim.mobject.text.text_mobject\")/[`tex_mobject`](manim.mobject.text.tex_mobject.html#module-manim.mobject.text.tex_mobject \"manim.mobject.text.tex_mobject\").\n* **element\\_to\\_mobject\\_config** (*dict*) – Custom configuration passed to `element_to_mobject`, by default {}.\n* **arrange\\_in\\_grid\\_config** (*dict*) – Dict passed to [`arrange_in_grid()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.arrange_in_grid \"manim.mobject.mobject.Mobject.arrange_in_grid\"), customizes the arrangement of the table.\n* **line\\_config** (*dict*) – Dict passed to [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\"), customizes the lines of the table.\n* **kwargs** – Additional arguments to be passed to [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nExamples\nExample: TableExamples [¶](#tableexamples)\n![../_images/TableExamples-2.png](../_images/TableExamples-2.png)\n```\nfrom manim import *\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table in \\\\n Manim.\"]])\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        t1.add_highlighted_cell((2,2), color=YELLOW)\n        t2 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            arrange_in_grid_config={\"cell_alignment\": RIGHT})\n        t2.add(t2.get_cell((2,2), color=RED))\n        t3 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            line_config={\"stroke_width\": 1, \"color\": YELLOW})\n        t3.remove(*t3.get_vertical_lines())\n        g = Group(\n            t0,t1,t2,t3\n        ).scale(0.7).arrange_in_grid(buff=1)\n        self.add(g)\n```\n```\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table in \\\\n Manim.\"]])\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        t1.add_highlighted_cell((2,2), color=YELLOW)\n        t2 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            arrange_in_grid_config={\"cell_alignment\": RIGHT})\n        t2.add(t2.get_cell((2,2), color=RED))\n        t3 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            line_config={\"stroke_width\": 1, \"color\": YELLOW})\n        t3.remove(*t3.get_vertical_lines())\n        g = Group(\n            t0,t1,t2,t3\n        ).scale(0.7).arrange_in_grid(buff=1)\n        self.add(g)\n```\nExample: BackgroundRectanglesExample [¶](#backgroundrectanglesexample)\n![../_images/BackgroundRectanglesExample-2.png](../_images/BackgroundRectanglesExample-2.png)\n```\nfrom manim import *\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background = Rectangle(height=6.5, width=13)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            add_background_rectangles_to_entries=True)\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            include_background_rectangle=True)\n        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)\n        self.add(g)\n```\n```\nclass BackgroundRectanglesExample(Scene):\n    def construct(self):\n        background = Rectangle(height=6.5, width=13)\n        background.set_fill(opacity=.5)\n        background.set_color([TEAL, RED, YELLOW])\n        self.add(background)\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            add_background_rectangles_to_entries=True)\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            include_background_rectangle=True)\n        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)\n        self.add(g)\n```\nMethods\n| [`add_background_to_entries`](#manim.mobject.table.Table.add_background_to_entries \"manim.mobject.table.Table.add_background_to_entries\") | Adds a black [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\") to each entry of the table. |\n| --- | --- |\n| [`add_highlighted_cell`](#manim.mobject.table.Table.add_highlighted_cell \"manim.mobject.table.Table.add_highlighted_cell\") | Highlights one cell at a specific position on the table by adding a [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\"). |\n| [`create`](#manim.mobject.table.Table.create \"manim.mobject.table.Table.create\") | Customized create\\-type function for tables. |\n| [`get_cell`](#manim.mobject.table.Table.get_cell \"manim.mobject.table.Table.get_cell\") | Returns one specific cell as a rectangular [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\") without the entry. |\n| [`get_col_labels`](#manim.mobject.table.Table.get_col_labels \"manim.mobject.table.Table.get_col_labels\") | Return the column labels of the table. |\n| [`get_columns`](#manim.mobject.table.Table.get_columns \"manim.mobject.table.Table.get_columns\") | Return columns of the table as a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\"). |\n| [`get_entries`](#manim.mobject.table.Table.get_entries \"manim.mobject.table.Table.get_entries\") | Return the individual entries of the table (including labels) or one specific entry if the parameter, `pos`, is set. |\n| [`get_entries_without_labels`](#manim.mobject.table.Table.get_entries_without_labels \"manim.mobject.table.Table.get_entries_without_labels\") | Return the individual entries of the table (without labels) or one specific entry if the parameter, `pos`, is set. |\n| [`get_highlighted_cell`](#manim.mobject.table.Table.get_highlighted_cell \"manim.mobject.table.Table.get_highlighted_cell\") | Returns a [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\") of the cell at the given position. |\n| [`get_horizontal_lines`](#manim.mobject.table.Table.get_horizontal_lines \"manim.mobject.table.Table.get_horizontal_lines\") | Return the horizontal lines of the table. |\n| [`get_labels`](#manim.mobject.table.Table.get_labels \"manim.mobject.table.Table.get_labels\") | Returns the labels of the table. |\n| [`get_row_labels`](#manim.mobject.table.Table.get_row_labels \"manim.mobject.table.Table.get_row_labels\") | Return the row labels of the table. |\n| [`get_rows`](#manim.mobject.table.Table.get_rows \"manim.mobject.table.Table.get_rows\") | Return the rows of the table as a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\"). |\n| [`get_vertical_lines`](#manim.mobject.table.Table.get_vertical_lines \"manim.mobject.table.Table.get_vertical_lines\") | Return the vertical lines of the table. |\n| [`scale`](#manim.mobject.table.Table.scale \"manim.mobject.table.Table.scale\") | Scale the size by a factor. |\n| [`set_column_colors`](#manim.mobject.table.Table.set_column_colors \"manim.mobject.table.Table.set_column_colors\") | Set individual colors for each column of the table. |\n| [`set_row_colors`](#manim.mobject.table.Table.set_row_colors \"manim.mobject.table.Table.set_row_colors\") | Set individual colors for each row of the table. |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_add\\_horizontal\\_lines()[\\[source]](../_modules/manim/mobject/table.html#Table._add_horizontal_lines)[¶](#manim.mobject.table.Table._add_horizontal_lines \"Link to this definition\")\nAdds the horizontal lines to the table.\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\n\\_add\\_labels(*mob\\_table*)[\\[source]](../_modules/manim/mobject/table.html#Table._add_labels)[¶](#manim.mobject.table.Table._add_labels \"Link to this definition\")\nAdds labels to an in a grid arranged [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nParameters:\n**mob\\_table** ([*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")) – An in a grid organized class:\\~.VGroup.\nReturns:\nReturns the `mob_table` with added labels.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\n\\_add\\_vertical\\_lines()[\\[source]](../_modules/manim/mobject/table.html#Table._add_vertical_lines)[¶](#manim.mobject.table.Table._add_vertical_lines \"Link to this definition\")\nAdds the vertical lines to the table\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\n\\_organize\\_mob\\_table(*table*)[\\[source]](../_modules/manim/mobject/table.html#Table._organize_mob_table)[¶](#manim.mobject.table.Table._organize_mob_table \"Link to this definition\")\nArranges the [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") of `table` in a grid.\nParameters:\n**table** (*Iterable**\\[**Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*) – A 2D iterable object with [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") entries.\nReturns:\nThe [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") of the `table` in a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") already\narranged in a table\\-like grid.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\n\\_original\\_\\_init\\_\\_(*table*, *row\\_labels\\=None*, *col\\_labels\\=None*, *top\\_left\\_entry\\=None*, *v\\_buff\\=0\\.8*, *h\\_buff\\=1\\.3*, *include\\_outer\\_lines\\=False*, *add\\_background\\_rectangles\\_to\\_entries\\=False*, *entries\\_background\\_color\\=ManimColor('\\#000000')*, *include\\_background\\_rectangle\\=False*, *background\\_rectangle\\_color\\=ManimColor('\\#000000')*, *element\\_to\\_mobject\\=\\<class 'manim.mobject.text.text\\_mobject.Paragraph'\\>*, *element\\_to\\_mobject\\_config\\={}*, *arrange\\_in\\_grid\\_config\\={}*, *line\\_config\\={}*, *\\*\\*kwargs*)[¶](#manim.mobject.table.Table._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **table** (*Iterable**\\[**Iterable**\\[**float* *\\|* *str* *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*)\n* **row\\_labels** (*Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *None*)\n* **col\\_labels** (*Iterable**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *None*)\n* **top\\_left\\_entry** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* *None*)\n* **v\\_buff** (*float*)\n* **h\\_buff** (*float*)\n* **include\\_outer\\_lines** (*bool*)\n* **add\\_background\\_rectangles\\_to\\_entries** (*bool*)\n* **entries\\_background\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **include\\_background\\_rectangle** (*bool*)\n* **background\\_rectangle\\_color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\n* **element\\_to\\_mobject** (*Callable**\\[**\\[**float* *\\|* *str* *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]*)\n* **element\\_to\\_mobject\\_config** (*dict*)\n* **arrange\\_in\\_grid\\_config** (*dict*)\n* **line\\_config** (*dict*)\n\\_table\\_to\\_mob\\_table(*table*)[\\[source]](../_modules/manim/mobject/table.html#Table._table_to_mob_table)[¶](#manim.mobject.table.Table._table_to_mob_table \"Link to this definition\")\nInitializes the entries of `table` as [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\").\nParameters:\n**table** (*Iterable**\\[**Iterable**\\[**float* *\\|* *str* *\\|* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*) – A 2D array or list of lists. Content of the table has to be a valid input\nfor the callable set in `element_to_mobject`.\nReturns:\nList of [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") from the entries of `table`.\nReturn type:\nList\nadd\\_background\\_to\\_entries(*color\\=ManimColor('\\#000000')*)[\\[source]](../_modules/manim/mobject/table.html#Table.add_background_to_entries)[¶](#manim.mobject.table.Table.add_background_to_entries \"Link to this definition\")\nAdds a black [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\") to each entry of the table.\nParameters:\n**color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\"))\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\nadd\\_highlighted\\_cell(*pos\\=(1, 1\\)*, *color\\=ManimColor('\\#FFFF00')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table.add_highlighted_cell)[¶](#manim.mobject.table.Table.add_highlighted_cell \"Link to this definition\")\nHighlights one cell at a specific position on the table by adding a [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\").\nParameters:\n* **pos** (*Sequence**\\[**int**]*) – The position of a specific entry on the table. `(1,1)` being the top left entry\nof the table.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color used to highlight the cell.\n* **kwargs** – Additional arguments to be passed to [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\").\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\nExamples\nExample: AddHighlightedCellExample [¶](#addhighlightedcellexample)\n![../_images/AddHighlightedCellExample-1.png](../_images/AddHighlightedCellExample-1.png)\n```\nfrom manim import *\nclass AddHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add_highlighted_cell((2,2), color=GREEN)\n        self.add(table)\n```\n```\nclass AddHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add_highlighted_cell((2,2), color=GREEN)\n        self.add(table)\n```\ncreate(*lag\\_ratio\\=1*, *line\\_animation\\=\\<class 'manim.animation.creation.Create'\\>*, *label\\_animation\\=\\<class 'manim.animation.creation.Write'\\>*, *element\\_animation\\=\\<class 'manim.animation.creation.Create'\\>*, *entry\\_animation\\=\\<class 'manim.animation.fading.FadeIn'\\>*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table.create)[¶](#manim.mobject.table.Table.create \"Link to this definition\")\nCustomized create\\-type function for tables.\nParameters:\n* **lag\\_ratio** (*float*) – The lag ratio of the animation.\n* **line\\_animation** (*Callable**\\[**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* [*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")*]**,* [*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The animation style of the table lines, see [`creation`](manim.animation.creation.html#module-manim.animation.creation \"manim.animation.creation\") for examples.\n* **label\\_animation** (*Callable**\\[**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* [*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")*]**,* [*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The animation style of the table labels, see [`creation`](manim.animation.creation.html#module-manim.animation.creation \"manim.animation.creation\") for examples.\n* **element\\_animation** (*Callable**\\[**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* [*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")*]**,* [*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The animation style of the table elements, see [`creation`](manim.animation.creation.html#module-manim.animation.creation \"manim.animation.creation\") for examples.\n* **entry\\_animation** (*Callable**\\[**\\[*[*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") *\\|* [*VGroup*](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")*]**,* [*Animation*](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")*]*) – The entry animation of the table background, see [`creation`](manim.animation.creation.html#module-manim.animation.creation \"manim.animation.creation\") for examples.\n* **kwargs** – Further arguments passed to the creation animations.\nReturns:\nAnimationGroup containing creation of the lines and of the elements.\nReturn type:\n[`AnimationGroup`](manim.animation.composition.AnimationGroup.html#manim.animation.composition.AnimationGroup \"manim.animation.composition.AnimationGroup\")\nExamples\nExample: CreateTableExample [¶](#createtableexample)\n```\nfrom manim import *\nclass CreateTableExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            include_outer_lines=True)\n        self.play(table.create())\n        self.wait()\n```\n```\nclass CreateTableExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            include_outer_lines=True)\n        self.play(table.create())\n        self.wait()\n```\nget\\_cell(*pos\\=(1, 1\\)*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table.get_cell)[¶](#manim.mobject.table.Table.get_cell \"Link to this definition\")\nReturns one specific cell as a rectangular [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\") without the entry.\nParameters:\n* **pos** (*Sequence**\\[**int**]*) – The position of a specific entry on the table. `(1,1)` being the top left entry\nof the table.\n* **kwargs** – Additional arguments to be passed to [`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\").\nReturns:\nPolygon mimicking one specific cell of the Table.\nReturn type:\n[`Polygon`](manim.mobject.geometry.polygram.Polygon.html#manim.mobject.geometry.polygram.Polygon \"manim.mobject.geometry.polygram.Polygon\")\nExamples\nExample: GetCellExample [¶](#getcellexample)\n![../_images/GetCellExample-1.png](../_images/GetCellExample-1.png)\n```\nfrom manim import *\nclass GetCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        cell = table.get_cell((2,2), color=RED)\n        self.add(table, cell)\n```\n```\nclass GetCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        cell = table.get_cell((2,2), color=RED)\n        self.add(table, cell)\n```\nget\\_col\\_labels()[\\[source]](../_modules/manim/mobject/table.html#Table.get_col_labels)[¶](#manim.mobject.table.Table.get_col_labels \"Link to this definition\")\nReturn the column labels of the table.\nReturns:\nVGroup containing the column labels of the table.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetColLabelsExample [¶](#getcollabelsexample)\n![../_images/GetColLabelsExample-1.png](../_images/GetColLabelsExample-1.png)\n```\nfrom manim import *\nclass GetColLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_col_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```\n```\nclass GetColLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_col_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```\nget\\_columns()[\\[source]](../_modules/manim/mobject/table.html#Table.get_columns)[¶](#manim.mobject.table.Table.get_columns \"Link to this definition\")\nReturn columns of the table as a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing each column in a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetColumnsExample [¶](#getcolumnsexample)\n![../_images/GetColumnsExample-2.png](../_images/GetColumnsExample-2.png)\n```\nfrom manim import *\nclass GetColumnsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_columns()[1]))\n        self.add(table)\n```\n```\nclass GetColumnsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_columns()[1]))\n        self.add(table)\n```\nget\\_entries(*pos\\=None*)[\\[source]](../_modules/manim/mobject/table.html#Table.get_entries)[¶](#manim.mobject.table.Table.get_entries \"Link to this definition\")\nReturn the individual entries of the table (including labels) or one specific entry\nif the parameter, `pos`, is set.\nParameters:\n**pos** (*Sequence**\\[**int**]* *\\|* *None*) – The position of a specific entry on the table. `(1,1)` being the top left entry\nof the table.\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing all entries of the table (including labels)\nor the [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") at the given position if `pos` is set.\nReturn type:\nUnion\\[[`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\"), [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nExamples\nExample: GetEntriesExample [¶](#getentriesexample)\n![../_images/GetEntriesExample-2.png](../_images/GetEntriesExample-2.png)\n```\nfrom manim import *\nclass GetEntriesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries()\n        for item in ent:\n            item.set_color(random_bright_color())\n        table.get_entries((2,2)).rotate(PI)\n        self.add(table)\n```\n```\nclass GetEntriesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries()\n        for item in ent:\n            item.set_color(random_bright_color())\n        table.get_entries((2,2)).rotate(PI)\n        self.add(table)\n```\nget\\_entries\\_without\\_labels(*pos\\=None*)[\\[source]](../_modules/manim/mobject/table.html#Table.get_entries_without_labels)[¶](#manim.mobject.table.Table.get_entries_without_labels \"Link to this definition\")\nReturn the individual entries of the table (without labels) or one specific entry\nif the parameter, `pos`, is set.\nParameters:\n**pos** (*Sequence**\\[**int**]* *\\|* *None*) – The position of a specific entry on the table. `(1,1)` being the top left entry\nof the table (without labels).\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing all entries of the table (without labels)\nor the [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") at the given position if `pos` is set.\nReturn type:\nUnion\\[[`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\"), [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")]\nExamples\nExample: GetEntriesWithoutLabelsExample [¶](#getentrieswithoutlabelsexample)\n![../_images/GetEntriesWithoutLabelsExample-1.png](../_images/GetEntriesWithoutLabelsExample-1.png)\n```\nfrom manim import *\nclass GetEntriesWithoutLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries_without_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        table.get_entries_without_labels((2,2)).rotate(PI)\n        self.add(table)\n```\n```\nclass GetEntriesWithoutLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        ent = table.get_entries_without_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            ent[k].set_color(colors[k])\n        table.get_entries_without_labels((2,2)).rotate(PI)\n        self.add(table)\n```\nget\\_highlighted\\_cell(*pos\\=(1, 1\\)*, *color\\=ManimColor('\\#FFFF00')*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table.get_highlighted_cell)[¶](#manim.mobject.table.Table.get_highlighted_cell \"Link to this definition\")\nReturns a [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\") of the cell at the given position.\nParameters:\n* **pos** (*Sequence**\\[**int**]*) – The position of a specific entry on the table. `(1,1)` being the top left entry\nof the table.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\")) – The color used to highlight the cell.\n* **kwargs** – Additional arguments to be passed to [`BackgroundRectangle`](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\").\nReturn type:\n[*BackgroundRectangle*](manim.mobject.geometry.shape_matchers.BackgroundRectangle.html#manim.mobject.geometry.shape_matchers.BackgroundRectangle \"manim.mobject.geometry.shape_matchers.BackgroundRectangle\")\nExamples\nExample: GetHighlightedCellExample [¶](#gethighlightedcellexample)\n![../_images/GetHighlightedCellExample-1.png](../_images/GetHighlightedCellExample-1.png)\n```\nfrom manim import *\nclass GetHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        highlight = table.get_highlighted_cell((2,2), color=GREEN)\n        table.add_to_back(highlight)\n        self.add(table)\n```\n```\nclass GetHighlightedCellExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        highlight = table.get_highlighted_cell((2,2), color=GREEN)\n        table.add_to_back(highlight)\n        self.add(table)\n```\nget\\_horizontal\\_lines()[\\[source]](../_modules/manim/mobject/table.html#Table.get_horizontal_lines)[¶](#manim.mobject.table.Table.get_horizontal_lines \"Link to this definition\")\nReturn the horizontal lines of the table.\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing all the horizontal lines of the table.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetHorizontalLinesExample [¶](#gethorizontallinesexample)\n![../_images/GetHorizontalLinesExample-1.png](../_images/GetHorizontalLinesExample-1.png)\n```\nfrom manim import *\nclass GetHorizontalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_horizontal_lines().set_color(RED)\n        self.add(table)\n```\n```\nclass GetHorizontalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_horizontal_lines().set_color(RED)\n        self.add(table)\n```\nget\\_labels()[\\[source]](../_modules/manim/mobject/table.html#Table.get_labels)[¶](#manim.mobject.table.Table.get_labels \"Link to this definition\")\nReturns the labels of the table.\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing all the labels of the table.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetLabelsExample [¶](#getlabelsexample)\n![../_images/GetLabelsExample-1.png](../_images/GetLabelsExample-1.png)\n```\nfrom manim import *\nclass GetLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            lab[k].set_color(colors[k])\n        self.add(table)\n```\n```\nclass GetLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_labels()\n        colors = [BLUE, GREEN, YELLOW, RED]\n        for k in range(len(colors)):\n            lab[k].set_color(colors[k])\n        self.add(table)\n```\nget\\_row\\_labels()[\\[source]](../_modules/manim/mobject/table.html#Table.get_row_labels)[¶](#manim.mobject.table.Table.get_row_labels \"Link to this definition\")\nReturn the row labels of the table.\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing the row labels of the table.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetRowLabelsExample [¶](#getrowlabelsexample)\n![../_images/GetRowLabelsExample-1.png](../_images/GetRowLabelsExample-1.png)\n```\nfrom manim import *\nclass GetRowLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_row_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```\n```\nclass GetRowLabelsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        lab = table.get_row_labels()\n        for item in lab:\n            item.set_color(random_bright_color())\n        self.add(table)\n```\nget\\_rows()[\\[source]](../_modules/manim/mobject/table.html#Table.get_rows)[¶](#manim.mobject.table.Table.get_rows \"Link to this definition\")\nReturn the rows of the table as a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") of [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing each row in a [`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\").\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetRowsExample [¶](#getrowsexample)\n![../_images/GetRowsExample-2.png](../_images/GetRowsExample-2.png)\n```\nfrom manim import *\nclass GetRowsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_rows()[1]))\n        self.add(table)\n```\n```\nclass GetRowsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.add(SurroundingRectangle(table.get_rows()[1]))\n        self.add(table)\n```\nget\\_vertical\\_lines()[\\[source]](../_modules/manim/mobject/table.html#Table.get_vertical_lines)[¶](#manim.mobject.table.Table.get_vertical_lines \"Link to this definition\")\nReturn the vertical lines of the table.\nReturns:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\") containing all the vertical lines of the table.\nReturn type:\n[`VGroup`](manim.mobject.types.vectorized_mobject.VGroup.html#manim.mobject.types.vectorized_mobject.VGroup \"manim.mobject.types.vectorized_mobject.VGroup\")\nExamples\nExample: GetVerticalLinesExample [¶](#getverticallinesexample)\n![../_images/GetVerticalLinesExample-1.png](../_images/GetVerticalLinesExample-1.png)\n```\nfrom manim import *\nclass GetVerticalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_vertical_lines()[0].set_color(RED)\n        self.add(table)\n```\n```\nclass GetVerticalLinesExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        table.get_vertical_lines()[0].set_color(RED)\n        self.add(table)\n```\nscale(*scale\\_factor*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/table.html#Table.scale)[¶](#manim.mobject.table.Table.scale \"Link to this definition\")\nScale the size by a factor.\nDefault behavior is to scale about the center of the vmobject.\nParameters:\n* **scale\\_factor** (*float*) – The scaling factor \\\\(\\\\alpha\\\\). If \\\\(0 \\< \\|\\\\alpha\\| \\< 1\\\\), the mobject\nwill shrink, and for \\\\(\\|\\\\alpha\\| \\> 1\\\\) it will grow. Furthermore,\nif \\\\(\\\\alpha \\< 0\\\\), the mobject is also flipped.\n* **scale\\_stroke** – Boolean determining if the object’s outline is scaled when the object is scaled.\nIf enabled, and object with 2px outline is scaled by a factor of .5, it will have an outline of 1px.\n* **kwargs** – Additional keyword arguments passed to\n[`scale()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.scale \"manim.mobject.mobject.Mobject.scale\").\nReturns:\n`self`\nReturn type:\n`VMobject`\nExamples\nExample: MobjectScaleExample [¶](#mobjectscaleexample)\n![../_images/MobjectScaleExample-2.png](../_images/MobjectScaleExample-2.png)\n```\nfrom manim import *\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        c1 = Circle(1, RED).set_x(-1)\n        c2 = Circle(1, GREEN).set_x(1)\n        vg = VGroup(c1, c2)\n        vg.set_stroke(width=50)\n        self.add(vg)\n        self.play(\n            c1.animate.scale(.25),\n            c2.animate.scale(.25,\n                scale_stroke=True)\n        )\n```\n```\nclass MobjectScaleExample(Scene):\n    def construct(self):\n        c1 = Circle(1, RED).set_x(-1)\n        c2 = Circle(1, GREEN).set_x(1)\n        vg = VGroup(c1, c2)\n        vg.set_stroke(width=50)\n        self.add(vg)\n        self.play(\n            c1.animate.scale(.25),\n            c2.animate.scale(.25,\n                scale_stroke=True)\n        )\n```\nSee also\n`move_to()`\nset\\_column\\_colors(*\\*colors*)[\\[source]](../_modules/manim/mobject/table.html#Table.set_column_colors)[¶](#manim.mobject.table.Table.set_column_colors \"Link to this definition\")\nSet individual colors for each column of the table.\nParameters:\n**colors** (*Iterable**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**]*) – An iterable of colors; each color corresponds to a column.\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\nExamples\nExample: SetColumnColorsExample [¶](#setcolumncolorsexample)\n![../_images/SetColumnColorsExample-2.png](../_images/SetColumnColorsExample-2.png)\n```\nfrom manim import *\nclass SetColumnColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_column_colors([RED,BLUE], GREEN)\n        self.add(table)\n```\n```\nclass SetColumnColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_column_colors([RED,BLUE], GREEN)\n        self.add(table)\n```\nset\\_row\\_colors(*\\*colors*)[\\[source]](../_modules/manim/mobject/table.html#Table.set_row_colors)[¶](#manim.mobject.table.Table.set_row_colors \"Link to this definition\")\nSet individual colors for each row of the table.\nParameters:\n**colors** (*Iterable**\\[**TypeAliasForwardRef**(**'\\~manim.utils.color.core.ParsableManimColor'**)**]*) – An iterable of colors; each color corresponds to a row.\nReturn type:\n[*Table*](#manim.mobject.table.Table \"manim.mobject.table.Table\")\nExamples\nExample: SetRowColorsExample [¶](#setrowcolorsexample)\n![../_images/SetRowColorsExample-2.png](../_images/SetRowColorsExample-2.png)\n```\nfrom manim import *\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(table)\n```\n```\nclass SetRowColorsExample(Scene):\n    def construct(self):\n        table = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")]\n        ).set_row_colors([RED,BLUE], GREEN)\n        self.add(table)\n```",
  "scraped_at": "2025-06-24T17:56:55.135605",
  "content_length": 51939,
  "domain": "docs.manim.community",
  "word_count": 2937,
  "inspection_status": "pending",
  "filename": "Table - Manim Community v0.19.0_20250624_175655.json",
  "saved_at": "2025-06-24T17:56:55.135761"
}