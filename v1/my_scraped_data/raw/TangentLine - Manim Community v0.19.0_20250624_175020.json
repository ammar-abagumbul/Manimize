{
  "doc_id": "f30b457dfe96f54848210bda9a70a469",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.line.TangentLine.html",
  "title": "TangentLine - Manim Community v0.19.0",
  "content": "TangentLine[¶](#tangentline \"Link to this heading\")\n===================================================\nQualified name: `manim.mobject.geometry.line.TangentLine`\n*class* TangentLine(*vmob*, *alpha*, *length\\=1*, *d\\_alpha\\=1e\\-06*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#TangentLine)[¶](#manim.mobject.geometry.line.TangentLine \"Link to this definition\")\nBases: [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")\nConstructs a line tangent to a [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\") at a specific point.\nParameters:\n* **vmob** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The VMobject on which the tangent line is drawn.\n* **alpha** (*float*) – How far along the shape that the line will be constructed. range: 0\\-1\\.\n* **length** (*float*) – Length of the tangent line.\n* **d\\_alpha** (*float*) – The `dx` value\n* **kwargs** (*Any*) – Additional arguments to be passed to [`Line`](manim.mobject.geometry.line.Line.html#manim.mobject.geometry.line.Line \"manim.mobject.geometry.line.Line\")\nSee also\n[`point_from_proportion()`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject.point_from_proportion \"manim.mobject.types.vectorized_mobject.VMobject.point_from_proportion\")\nExamples\nExample: TangentLineExample [¶](#tangentlineexample)\n![../_images/TangentLineExample-1.png](../_images/TangentLineExample-1.png)\n```\nfrom manim import *\nclass TangentLineExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2)\n        line_1 = TangentLine(circle, alpha=0.0, length=4, color=BLUE_D) # right\n        line_2 = TangentLine(circle, alpha=0.4, length=4, color=GREEN) # top left\n        self.add(circle, line_1, line_2)\n```\n```\nclass TangentLineExample(Scene):\n    def construct(self):\n        circle = Circle(radius=2)\n        line_1 = TangentLine(circle, alpha=0.0, length=4, color=BLUE_D) # right\n        line_2 = TangentLine(circle, alpha=0.4, length=4, color=GREEN) # top left\n        self.add(circle, line_1, line_2)\n```\nMethods\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*vmob*, *alpha*, *length\\=1*, *d\\_alpha\\=1e\\-06*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.line.TangentLine._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **vmob** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\"))\n* **alpha** (*float*)\n* **length** (*float*)\n* **d\\_alpha** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone",
  "scraped_at": "2025-06-24T17:50:20.054787",
  "content_length": 3302,
  "domain": "docs.manim.community",
  "word_count": 285,
  "inspection_status": "pending",
  "filename": "TangentLine - Manim Community v0.19.0_20250624_175020.json",
  "saved_at": "2025-06-24T17:50:20.054884"
}