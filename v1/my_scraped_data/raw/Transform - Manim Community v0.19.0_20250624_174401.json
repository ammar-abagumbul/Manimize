{
  "doc_id": "0adf844d2dfde9318c93c582ce6e2ec7",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.transform.Transform.html",
  "title": "Transform - Manim Community v0.19.0",
  "content": "Transform[¶](#transform \"Link to this heading\")\n===============================================\nQualified name: `manim.animation.transform.Transform`\n*class* Transform(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/transform.html#Transform)[¶](#manim.animation.transform.Transform \"Link to this definition\")\nBases: [`Animation`](manim.animation.animation.Animation.html#manim.animation.animation.Animation \"manim.animation.animation.Animation\")\nA Transform transforms a Mobject into a target Mobject.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*) – The [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") to be transformed. It will be mutated to become the `target_mobject`.\n* **target\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*) – The target of the transformation.\n* **path\\_func** (*Callable* *\\|* *None*) – A function defining the path that the points of the `mobject` are being moved\nalong until they match the points of the `target_mobject`, see [`utils.paths`](manim.utils.paths.html#module-manim.utils.paths \"manim.utils.paths\").\n* **path\\_arc** (*float*) – The arc angle (in radians) that the points of `mobject` will follow to reach\nthe points of the target if using a circular path arc, see `path_arc_centers`.\nSee also [`manim.utils.paths.path_along_arc()`](manim.utils.paths.html#manim.utils.paths.path_along_arc \"manim.utils.paths.path_along_arc\").\n* **path\\_arc\\_axis** (*np.ndarray*) – The axis to rotate along if using a circular path arc, see `path_arc_centers`.\n* **path\\_arc\\_centers** (*np.ndarray*) – The center of the circular arcs along which the points of `mobject` are\nmoved by the transformation.\nIf this is set and `path_func` is not set, then a `path_along_circles` path will be generated\nusing the `path_arc` parameters and stored in `path_func`. If `path_func` is set, this and the\nother `path_arc` fields are set as attributes, but a `path_func` is not generated from it.\n* **replace\\_mobject\\_with\\_target\\_in\\_scene** (*bool*) – Controls which mobject is replaced when the transformation is complete.\nIf set to True, `mobject` will be removed from the scene and `target_mobject` will\nreplace it. Otherwise, `target_mobject` is never added and `mobject` just takes its shape.\nExamples\nExample: TransformPathArc [¶](#transformpatharc)\n```\nfrom manim import *\nclass TransformPathArc(Scene):\n    def construct(self):\n        def make_arc_path(start, end, arc_angle):\n            points = []\n            p_fn = path_along_arc(arc_angle)\n            # alpha animates between 0.0 and 1.0, where 0.0\n            # is the beginning of the animation and 1.0 is the end.\n            for alpha in range(0, 11):\n                points.append(p_fn(start, end, alpha / 10.0))\n            path = VMobject(stroke_color=YELLOW)\n            path.set_points_smoothly(points)\n            return path\n        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)\n        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]\n        # Positive angles move counter-clockwise, negative angles move clockwise.\n        examples = [-90, 0, 30, 90, 180, 270]\n        anims = []\n        for idx, angle in enumerate(examples):\n            left_c = left.copy().shift((3 - idx) * UP)\n            left_c.fill_color = colors[idx]\n            right_c = left_c.copy().shift(4 * RIGHT)\n            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),\n                                     arc_angle=angle * DEGREES)\n            desc = Text('%d°' % examples[idx]).next_to(left_c, LEFT)\n            # Make the circles in front of the text in front of the arcs.\n            self.add(\n                path_arc.set_z_index(1),\n                desc.set_z_index(2),\n                left_c.set_z_index(3),\n            )\n            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))\n        self.play(*anims, run_time=2)\n        self.wait()\n```\n```\nclass TransformPathArc(Scene):\n    def construct(self):\n        def make_arc_path(start, end, arc_angle):\n            points = []\n            p_fn = path_along_arc(arc_angle)\n            # alpha animates between 0.0 and 1.0, where 0.0\n            # is the beginning of the animation and 1.0 is the end.\n            for alpha in range(0, 11):\n                points.append(p_fn(start, end, alpha / 10.0))\n            path = VMobject(stroke_color=YELLOW)\n            path.set_points_smoothly(points)\n            return path\n        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)\n        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]\n        # Positive angles move counter-clockwise, negative angles move clockwise.\n        examples = [-90, 0, 30, 90, 180, 270]\n        anims = []\n        for idx, angle in enumerate(examples):\n            left_c = left.copy().shift((3 - idx) * UP)\n            left_c.fill_color = colors[idx]\n            right_c = left_c.copy().shift(4 * RIGHT)\n            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),\n                                     arc_angle=angle * DEGREES)\n            desc = Text('%d°' % examples[idx]).next_to(left_c, LEFT)\n            # Make the circles in front of the text in front of the arcs.\n            self.add(\n                path_arc.set_z_index(1),\n                desc.set_z_index(2),\n                left_c.set_z_index(3),\n            )\n            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))\n        self.play(*anims, run_time=2)\n        self.wait()\n```\nSee also\n[`ReplacementTransform`](manim.animation.transform.ReplacementTransform.html#manim.animation.transform.ReplacementTransform \"manim.animation.transform.ReplacementTransform\"), [`interpolate()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.interpolate \"manim.mobject.mobject.Mobject.interpolate\"), [`align_data()`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.align_data \"manim.mobject.mobject.Mobject.align_data\")\nMethods\n| [`begin`](#manim.animation.transform.Transform.begin \"manim.animation.transform.Transform.begin\") | Begin the animation. |\n| --- | --- |\n| [`clean_up_from_scene`](#manim.animation.transform.Transform.clean_up_from_scene \"manim.animation.transform.Transform.clean_up_from_scene\") | Clean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation. |\n| `create_target` |  |\n| `get_all_families_zipped` |  |\n| [`get_all_mobjects`](#manim.animation.transform.Transform.get_all_mobjects \"manim.animation.transform.Transform.get_all_mobjects\") | Get all mobjects involved in the animation. |\n| `interpolate_submobject` |  |\nAttributes\n| `path_arc` |  |\n| --- | --- |\n| `path_func` |  |\n| `run_time` |  |\n\\_original\\_\\_init\\_\\_(*mobject*, *target\\_mobject\\=None*, *path\\_func\\=None*, *path\\_arc\\=0*, *path\\_arc\\_axis\\=array(\\[0\\., 0\\., 1\\.])*, *path\\_arc\\_centers\\=None*, *replace\\_mobject\\_with\\_target\\_in\\_scene\\=False*, *\\*\\*kwargs*)[¶](#manim.animation.transform.Transform._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*)\n* **target\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") *\\|* *None*)\n* **path\\_func** (*Callable* *\\|* *None*)\n* **path\\_arc** (*float*)\n* **path\\_arc\\_axis** (*ndarray*)\n* **path\\_arc\\_centers** (*ndarray*)\n* **replace\\_mobject\\_with\\_target\\_in\\_scene** (*bool*)\nReturn type:\nNone\nbegin()[\\[source]](../_modules/manim/animation/transform.html#Transform.begin)[¶](#manim.animation.transform.Transform.begin \"Link to this definition\")\nBegin the animation.\nThis method is called right as an animation is being played. As much\ninitialization as possible, especially any mobject copying, should live in this\nmethod.\nReturn type:\nNone\nclean\\_up\\_from\\_scene(*scene*)[\\[source]](../_modules/manim/animation/transform.html#Transform.clean_up_from_scene)[¶](#manim.animation.transform.Transform.clean_up_from_scene \"Link to this definition\")\nClean up the [`Scene`](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\") after finishing the animation.\nThis includes to [`remove()`](manim.scene.scene.Scene.html#manim.scene.scene.Scene.remove \"manim.scene.scene.Scene.remove\") the Animation’s\n[`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\") if the animation is a remover.\nParameters:\n**scene** ([*Scene*](manim.scene.scene.Scene.html#manim.scene.scene.Scene \"manim.scene.scene.Scene\")) – The scene the animation should be cleaned up from.\nReturn type:\nNone\nget\\_all\\_mobjects()[\\[source]](../_modules/manim/animation/transform.html#Transform.get_all_mobjects)[¶](#manim.animation.transform.Transform.get_all_mobjects \"Link to this definition\")\nGet all mobjects involved in the animation.\nOrdering must match the ordering of arguments to interpolate\\_submobject\nReturns:\nThe sequence of mobjects.\nReturn type:\nSequence\\[[Mobject](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\")]",
  "scraped_at": "2025-06-24T17:44:01.588461",
  "content_length": 9567,
  "domain": "docs.manim.community",
  "word_count": 804,
  "inspection_status": "pending",
  "filename": "Transform - Manim Community v0.19.0_20250624_174401.json",
  "saved_at": "2025-06-24T17:44:01.588561"
}