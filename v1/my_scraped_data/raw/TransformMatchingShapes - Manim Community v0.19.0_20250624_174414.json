{
  "doc_id": "fae9e0b0965bfaf9ee11e8165fa97e89",
  "url": "https://docs.manim.community/en/latest/reference/manim.animation.transform_matching_parts.TransformMatchingShapes.html",
  "title": "TransformMatchingShapes - Manim Community v0.19.0",
  "content": "TransformMatchingShapes[¶](#transformmatchingshapes \"Link to this heading\")\n===========================================================================\nQualified name: `manim.animation.transform\\_matching\\_parts.TransformMatchingShapes`\n*class* TransformMatchingShapes(*mobject\\=None*, *\\*args*, *use\\_override\\=True*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/animation/transform_matching_parts.html#TransformMatchingShapes)[¶](#manim.animation.transform_matching_parts.TransformMatchingShapes \"Link to this definition\")\nBases: [`TransformMatchingAbstractBase`](manim.animation.transform_matching_parts.TransformMatchingAbstractBase.html#manim.animation.transform_matching_parts.TransformMatchingAbstractBase \"manim.animation.transform_matching_parts.TransformMatchingAbstractBase\")\nAn animation trying to transform groups by matching the shape\nof their submobjects.\nTwo submobjects match if the hash of their point coordinates after\nnormalization (i.e., after translation to the origin, fixing the submobject\nheight at 1 unit, and rounding the coordinates to three decimal places)\nmatches.\nSee also\n[`TransformMatchingAbstractBase`](manim.animation.transform_matching_parts.TransformMatchingAbstractBase.html#manim.animation.transform_matching_parts.TransformMatchingAbstractBase \"manim.animation.transform_matching_parts.TransformMatchingAbstractBase\")\nExamples\nExample: Anagram [¶](#anagram)\n```\nfrom manim import *\nclass Anagram(Scene):\n    def construct(self):\n        src = Text(\"the morse code\")\n        tar = Text(\"here come dots\")\n        self.play(Write(src))\n        self.wait(0.5)\n        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))\n        self.wait(0.5)\n```\n```\nclass Anagram(Scene):\n    def construct(self):\n        src = Text(\"the morse code\")\n        tar = Text(\"here come dots\")\n        self.play(Write(src))\n        self.wait(0.5)\n        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))\n        self.wait(0.5)\n```\nMethods\n| `get_mobject_key` |  |\n| --- | --- |\n| `get_mobject_parts` |  |\nAttributes\n| `run_time` |  |\n| --- | --- |\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **target\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **transform\\_mismatches** (*bool*)\n* **fade\\_transform\\_mismatches** (*bool*)\n* **key\\_map** (*dict* *\\|* *None*)\n\\_original\\_\\_init\\_\\_(*mobject*, *target\\_mobject*, *transform\\_mismatches\\=False*, *fade\\_transform\\_mismatches\\=False*, *key\\_map\\=None*, *\\*\\*kwargs*)[¶](#manim.animation.transform_matching_parts.TransformMatchingShapes._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **target\\_mobject** ([*Mobject*](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"))\n* **transform\\_mismatches** (*bool*)\n* **fade\\_transform\\_mismatches** (*bool*)\n* **key\\_map** (*dict* *\\|* *None*)",
  "scraped_at": "2025-06-24T17:44:14.060975",
  "content_length": 3186,
  "domain": "docs.manim.community",
  "word_count": 205,
  "inspection_status": "pending",
  "filename": "TransformMatchingShapes - Manim Community v0.19.0_20250624_174414.json",
  "saved_at": "2025-06-24T17:44:14.061024"
}