{
  "doc_id": "88fb508e86814edd9fdf5e8c25828bb0",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.types.vectorized_mobject.VDict.html",
  "title": "VDict - Manim Community v0.19.0",
  "content": "VDict[¶](#vdict \"Link to this heading\")\n=======================================\nQualified name: `manim.mobject.types.vectorized\\_mobject.VDict`\n*class* VDict(*mapping\\_or\\_iterable\\={}*, *show\\_keys\\=False*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VDict)[¶](#manim.mobject.types.vectorized_mobject.VDict \"Link to this definition\")\nBases: [`VMobject`](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")\nA VGroup\\-like class, also offering submobject access by\nkey, like a python dict\nParameters:\n* **mapping\\_or\\_iterable** (*Mapping**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *Iterable**\\[**tuple**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*) – The parameter specifying the key\\-value mapping of keys and mobjects.\n* **show\\_keys** (*bool*) – Whether to also display the key associated with\nthe mobject. This might be useful when debugging,\nespecially when there are a lot of mobjects in the\n[`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\"). Defaults to False.\n* **kwargs** – Other arguments to be passed to Mobject.\nshow\\_keys[¶](#manim.mobject.types.vectorized_mobject.VDict.show_keys \"Link to this definition\")\nWhether to also display the key associated with\nthe mobject. This might be useful when debugging,\nespecially when there are a lot of mobjects in the\n[`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\"). When displayed, the key is towards\nthe left of the mobject.\nDefaults to False.\nType:\n`bool`\nsubmob\\_dict[¶](#manim.mobject.types.vectorized_mobject.VDict.submob_dict \"Link to this definition\")\nIs the actual python dictionary that is used to bind\nthe keys to the mobjects.\nType:\n`dict`\nExamples\nExample: ShapesWithVDict [¶](#shapeswithvdict)\n```\nfrom manim import *\nclass ShapesWithVDict(Scene):\n    def construct(self):\n        square = Square().set_color(RED)\n        circle = Circle().set_color(YELLOW).next_to(square, UP)\n        # create dict from list of tuples each having key-mobject pair\n        pairs = [(\"s\", square), (\"c\", circle)]\n        my_dict = VDict(pairs, show_keys=True)\n        # display it just like a VGroup\n        self.play(Create(my_dict))\n        self.wait()\n        text = Tex(\"Some text\").set_color(GREEN).next_to(square, DOWN)\n        # add a key-value pair by wrapping it in a single-element list of tuple\n        # after attrs branch is merged, it will be easier like `.add(t=text)`\n        my_dict.add([(\"t\", text)])\n        self.wait()\n        rect = Rectangle().next_to(text, DOWN)\n        # can also do key assignment like a python dict\n        my_dict[\"r\"] = rect\n        # access submobjects like a python dict\n        my_dict[\"t\"].set_color(PURPLE)\n        self.play(my_dict[\"t\"].animate.scale(3))\n        self.wait()\n        # also supports python dict styled reassignment\n        my_dict[\"t\"] = Tex(\"Some other text\").set_color(BLUE)\n        self.wait()\n        # remove submobject by key\n        my_dict.remove(\"t\")\n        self.wait()\n        self.play(Uncreate(my_dict[\"s\"]))\n        self.wait()\n        self.play(FadeOut(my_dict[\"c\"]))\n        self.wait()\n        self.play(FadeOut(my_dict[\"r\"], shift=DOWN))\n        self.wait()\n        # you can also make a VDict from an existing dict of mobjects\n        plain_dict = {\n            1: Integer(1).shift(DOWN),\n            2: Integer(2).shift(2 * DOWN),\n            3: Integer(3).shift(3 * DOWN),\n        }\n        vdict_from_plain_dict = VDict(plain_dict)\n        vdict_from_plain_dict.shift(1.5 * (UP + LEFT))\n        self.play(Create(vdict_from_plain_dict))\n        # you can even use zip\n        vdict_using_zip = VDict(zip([\"s\", \"c\", \"r\"], [Square(), Circle(), Rectangle()]))\n        vdict_using_zip.shift(1.5 * RIGHT)\n        self.play(Create(vdict_using_zip))\n        self.wait()\n```\n```\nclass ShapesWithVDict(Scene):\n    def construct(self):\n        square = Square().set_color(RED)\n        circle = Circle().set_color(YELLOW).next_to(square, UP)\n        # create dict from list of tuples each having key-mobject pair\n        pairs = [(\"s\", square), (\"c\", circle)]\n        my_dict = VDict(pairs, show_keys=True)\n        # display it just like a VGroup\n        self.play(Create(my_dict))\n        self.wait()\n        text = Tex(\"Some text\").set_color(GREEN).next_to(square, DOWN)\n        # add a key-value pair by wrapping it in a single-element list of tuple\n        # after attrs branch is merged, it will be easier like `.add(t=text)`\n        my_dict.add([(\"t\", text)])\n        self.wait()\n        rect = Rectangle().next_to(text, DOWN)\n        # can also do key assignment like a python dict\n        my_dict[\"r\"] = rect\n        # access submobjects like a python dict\n        my_dict[\"t\"].set_color(PURPLE)\n        self.play(my_dict[\"t\"].animate.scale(3))\n        self.wait()\n        # also supports python dict styled reassignment\n        my_dict[\"t\"] = Tex(\"Some other text\").set_color(BLUE)\n        self.wait()\n        # remove submobject by key\n        my_dict.remove(\"t\")\n        self.wait()\n        self.play(Uncreate(my_dict[\"s\"]))\n        self.wait()\n        self.play(FadeOut(my_dict[\"c\"]))\n        self.wait()\n        self.play(FadeOut(my_dict[\"r\"], shift=DOWN))\n        self.wait()\n        # you can also make a VDict from an existing dict of mobjects\n        plain_dict = {\n            1: Integer(1).shift(DOWN),\n            2: Integer(2).shift(2 * DOWN),\n            3: Integer(3).shift(3 * DOWN),\n        }\n        vdict_from_plain_dict = VDict(plain_dict)\n        vdict_from_plain_dict.shift(1.5 * (UP + LEFT))\n        self.play(Create(vdict_from_plain_dict))\n        # you can even use zip\n        vdict_using_zip = VDict(zip([\"s\", \"c\", \"r\"], [Square(), Circle(), Rectangle()]))\n        vdict_using_zip.shift(1.5 * RIGHT)\n        self.play(Create(vdict_using_zip))\n        self.wait()\n```\nMethods\n| [`add`](#manim.mobject.types.vectorized_mobject.VDict.add \"manim.mobject.types.vectorized_mobject.VDict.add\") | Adds the key\\-value pairs to the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object. |\n| --- | --- |\n| [`add_key_value_pair`](#manim.mobject.types.vectorized_mobject.VDict.add_key_value_pair \"manim.mobject.types.vectorized_mobject.VDict.add_key_value_pair\") | A utility function used by [`add()`](#manim.mobject.types.vectorized_mobject.VDict.add \"manim.mobject.types.vectorized_mobject.VDict.add\") to add the key\\-value pair to [`submob_dict`](#manim.mobject.types.vectorized_mobject.VDict.submob_dict \"manim.mobject.types.vectorized_mobject.VDict.submob_dict\"). |\n| [`get_all_submobjects`](#manim.mobject.types.vectorized_mobject.VDict.get_all_submobjects \"manim.mobject.types.vectorized_mobject.VDict.get_all_submobjects\") | To get all the submobjects associated with a particular [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object |\n| [`remove`](#manim.mobject.types.vectorized_mobject.VDict.remove \"manim.mobject.types.vectorized_mobject.VDict.remove\") | Removes the mobject from the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object having the key key |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*mapping\\_or\\_iterable\\={}*, *show\\_keys\\=False*, *\\*\\*kwargs*)[¶](#manim.mobject.types.vectorized_mobject.VDict._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **mapping\\_or\\_iterable** (*Mapping**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *Iterable**\\[**tuple**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*)\n* **show\\_keys** (*bool*)\nReturn type:\nNone\nadd(*mapping\\_or\\_iterable*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VDict.add)[¶](#manim.mobject.types.vectorized_mobject.VDict.add \"Link to this definition\")\nAdds the key\\-value pairs to the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object.\nAlso, it internally adds the value to the submobjects `list`\nof [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), which is responsible for actual on\\-screen display.\nParameters:\n**mapping\\_or\\_iterable** (*Mapping**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]* *\\|* *Iterable**\\[**tuple**\\[**Hashable**,* [*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")*]**]*) – The parameter specifying the key\\-value mapping of keys and mobjects.\nReturns:\nReturns the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object on which this method was called.\nReturn type:\n[`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\")\nExamples\nNormal usage:\n```\nsquare_obj = Square()\nmy_dict.add([(\"s\", square_obj)])\n```\nadd\\_key\\_value\\_pair(*key*, *value*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VDict.add_key_value_pair)[¶](#manim.mobject.types.vectorized_mobject.VDict.add_key_value_pair \"Link to this definition\")\nA utility function used by [`add()`](#manim.mobject.types.vectorized_mobject.VDict.add \"manim.mobject.types.vectorized_mobject.VDict.add\") to add the key\\-value pair\nto [`submob_dict`](#manim.mobject.types.vectorized_mobject.VDict.submob_dict \"manim.mobject.types.vectorized_mobject.VDict.submob_dict\"). Not really meant to be used externally.\nParameters:\n* **key** (*Hashable*) – The key of the submobject to be added.\n* **value** ([*VMobject*](manim.mobject.types.vectorized_mobject.VMobject.html#manim.mobject.types.vectorized_mobject.VMobject \"manim.mobject.types.vectorized_mobject.VMobject\")) – The mobject associated with the key\nReturn type:\nNone\nRaises:\n**TypeError** – If the value is not an instance of VMobject\nExamples\nNormal usage:\n```\nsquare_obj = Square()\nself.add_key_value_pair(\"s\", square_obj)\n```\nget\\_all\\_submobjects()[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VDict.get_all_submobjects)[¶](#manim.mobject.types.vectorized_mobject.VDict.get_all_submobjects \"Link to this definition\")\nTo get all the submobjects associated with a particular [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object\nReturns:\nAll the submobjects associated with the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object\nReturn type:\n`dict_values`\nExamples\nNormal usage:\n```\nfor submob in my_dict.get_all_submobjects():\n    self.play(Create(submob))\n```\nremove(*key*)[\\[source]](../_modules/manim/mobject/types/vectorized_mobject.html#VDict.remove)[¶](#manim.mobject.types.vectorized_mobject.VDict.remove \"Link to this definition\")\nRemoves the mobject from the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object having the key key\nAlso, it internally removes the mobject from the submobjects `list`\nof [`Mobject`](manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject \"manim.mobject.mobject.Mobject\"), (which is responsible for removing it from the screen)\nParameters:\n**key** (*Hashable*) – The key of the submoject to be removed.\nReturns:\nReturns the [`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\") object on which this method was called.\nReturn type:\n[`VDict`](#manim.mobject.types.vectorized_mobject.VDict \"manim.mobject.types.vectorized_mobject.VDict\")\nExamples\nNormal usage:\n```\nmy_dict.remove(\"square\")\n```",
  "scraped_at": "2025-06-24T17:59:16.241697",
  "content_length": 12946,
  "domain": "docs.manim.community",
  "word_count": 1007,
  "inspection_status": "pending",
  "filename": "VDict - Manim Community v0.19.0_20250624_175916.json",
  "saved_at": "2025-06-24T17:59:16.241775"
}