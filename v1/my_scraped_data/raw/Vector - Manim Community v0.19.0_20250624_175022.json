{
  "doc_id": "062c5e7215a7840160b8f291d9889f8e",
  "url": "https://docs.manim.community/en/latest/reference/manim.mobject.geometry.line.Vector.html",
  "title": "Vector - Manim Community v0.19.0",
  "content": "Vector[¶](#vector \"Link to this heading\")\n=========================================\nQualified name: `manim.mobject.geometry.line.Vector`\n*class* Vector(*direction\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Vector)[¶](#manim.mobject.geometry.line.Vector \"Link to this definition\")\nBases: [`Arrow`](manim.mobject.geometry.line.Arrow.html#manim.mobject.geometry.line.Arrow \"manim.mobject.geometry.line.Arrow\")\nA vector specialized for use in graphs.\nCaution\nDo not confuse with the [`Vector2D`](manim.typing.html#manim.typing.Vector2D \"manim.typing.Vector2D\"),\n[`Vector3D`](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\") or [`VectorND`](manim.typing.html#manim.typing.VectorND \"manim.typing.VectorND\") type aliases,\nwhich are not Mobjects!\nParameters:\n* **direction** ([*Point2DLike*](manim.typing.html#manim.typing.Point2DLike \"manim.typing.Point2DLike\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\")) – The direction of the arrow.\n* **buff** (*float*) – The distance of the vector from its endpoints.\n* **kwargs** (*Any*) – Additional arguments to be passed to [`Arrow`](manim.mobject.geometry.line.Arrow.html#manim.mobject.geometry.line.Arrow \"manim.mobject.geometry.line.Arrow\")\nExamples\nExample: VectorExample [¶](#vectorexample)\n![../_images/VectorExample-1.png](../_images/VectorExample-1.png)\n```\nfrom manim import *\nclass VectorExample(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vector_1 = Vector([1,2])\n        vector_2 = Vector([-5,-2])\n        self.add(plane, vector_1, vector_2)\n```\n```\nclass VectorExample(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vector_1 = Vector([1,2])\n        vector_2 = Vector([-5,-2])\n        self.add(plane, vector_1, vector_2)\n```\nMethods\n| [`coordinate_label`](#manim.mobject.geometry.line.Vector.coordinate_label \"manim.mobject.geometry.line.Vector.coordinate_label\") | Creates a label based on the coordinates of the vector. |\n| --- | --- |\nAttributes\n| `animate` | Used to animate the application of any method of `self`. |\n| --- | --- |\n| `animation_overrides` |  |\n| `color` |  |\n| `depth` | The depth of the mobject. |\n| `fill_color` | If there are multiple colors (for gradient) this returns the first one |\n| `height` | The height of the mobject. |\n| `n_points_per_curve` |  |\n| `sheen_factor` |  |\n| `stroke_color` |  |\n| `width` | The width of the mobject. |\n\\_original\\_\\_init\\_\\_(*direction\\=array(\\[1\\., 0\\., 0\\.])*, *buff\\=0*, *\\*\\*kwargs*)[¶](#manim.mobject.geometry.line.Vector._original__init__ \"Link to this definition\")\nInitialize self. See help(type(self)) for accurate signature.\nParameters:\n* **direction** ([*Point2DLike*](manim.typing.html#manim.typing.Point2DLike \"manim.typing.Point2DLike\") *\\|* [*Point3DLike*](manim.typing.html#manim.typing.Point3DLike \"manim.typing.Point3DLike\"))\n* **buff** (*float*)\n* **kwargs** (*Any*)\nReturn type:\nNone\ncoordinate\\_label(*integer\\_labels\\=True*, *n\\_dim\\=2*, *color\\=None*, *\\*\\*kwargs*)[\\[source]](../_modules/manim/mobject/geometry/line.html#Vector.coordinate_label)[¶](#manim.mobject.geometry.line.Vector.coordinate_label \"Link to this definition\")\nCreates a label based on the coordinates of the vector.\nParameters:\n* **integer\\_labels** (*bool*) – Whether or not to round the coordinates to integers.\n* **n\\_dim** (*int*) – The number of dimensions of the vector.\n* **color** ([*ParsableManimColor*](manim.utils.color.core.html#manim.utils.color.core.ParsableManimColor \"manim.utils.color.core.ParsableManimColor\") *\\|* *None*) – Sets the color of label, optional.\n* **kwargs** (*Any*) – Additional arguments to be passed to [`Matrix`](manim.mobject.matrix.Matrix.html#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\").\nReturns:\nThe label.\nReturn type:\n[`Matrix`](manim.mobject.matrix.Matrix.html#manim.mobject.matrix.Matrix \"manim.mobject.matrix.Matrix\")\nExamples\nExample: VectorCoordinateLabel [¶](#vectorcoordinatelabel)\n![../_images/VectorCoordinateLabel-1.png](../_images/VectorCoordinateLabel-1.png)\n```\nfrom manim import *\nclass VectorCoordinateLabel(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vec_1 = Vector([1, 2])\n        vec_2 = Vector([-3, -2])\n        label_1 = vec_1.coordinate_label()\n        label_2 = vec_2.coordinate_label(color=YELLOW)\n        self.add(plane, vec_1, vec_2, label_1, label_2)\n```\n```\nclass VectorCoordinateLabel(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        vec_1 = Vector([1, 2])\n        vec_2 = Vector([-3, -2])\n        label_1 = vec_1.coordinate_label()\n        label_2 = vec_2.coordinate_label(color=YELLOW)\n        self.add(plane, vec_1, vec_2, label_1, label_2)\n```",
  "scraped_at": "2025-06-24T17:50:22.315662",
  "content_length": 4763,
  "domain": "docs.manim.community",
  "word_count": 408,
  "inspection_status": "pending",
  "filename": "Vector - Manim Community v0.19.0_20250624_175022.json",
  "saved_at": "2025-06-24T17:50:22.315735"
}