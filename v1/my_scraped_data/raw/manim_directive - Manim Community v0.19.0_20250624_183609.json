{
  "doc_id": "d5db423e7a29a3be8413a45870cdccb9",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.docbuild.manim_directive.html",
  "title": "manim_directive - Manim Community v0.19.0",
  "content": "manim\\_directive[¶](#module-manim.utils.docbuild.manim_directive \"Link to this heading\")\n========================================================================================\nA directive for including Manim videos in a Sphinx document[¶](#a-directive-for-including-manim-videos-in-a-sphinx-document \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------------------\nWhen rendering the HTML documentation, the `.. manim::` directive\nimplemented here allows to include rendered videos.\nIts basic usage that allows processing **inline content**\nlooks as follows:\n```\n.. manim:: MyScene\n    class MyScene(Scene):\n        def construct(self):\n            ...\n```\nIt is required to pass the name of the class representing the\nscene to be rendered to the directive.\nAs a second application, the directive can also be used to\nrender scenes that are defined within doctests, for example:\n```\n.. manim:: DirectiveDoctestExample\n    :ref_classes: Dot\n    >>> from manim import Create, Dot, RED, Scene\n    >>> dot = Dot(color=RED)\n    >>> dot.color\n    ManimColor('#FC6255')\n    >>> class DirectiveDoctestExample(Scene):\n    ...     def construct(self):\n    ...         self.play(Create(dot))\n```\n### Options[¶](#options \"Link to this heading\")\nOptions can be passed as follows:\n```\n.. manim:: <Class name>\n    :<option name>: <value>\n```\nThe following configuration options are supported by the\ndirective:\n> hide\\_sourceIf this flag is present without argument,\n> the source code is not displayed above the rendered video.\n> \n> \n> \n> no\\_autoplayIf this flag is present without argument,\n> the video will not autoplay.\n> \n> \n> \n> quality{‘low’, ‘medium’, ‘high’, ‘fourk’}Controls render quality of the video, in analogy to\n> the corresponding command line flags.\n> \n> \n> \n> save\\_as\\_gifIf this flag is present without argument,\n> the scene is rendered as a gif.\n> \n> \n> \n> save\\_last\\_frameIf this flag is present without argument,\n> an image representing the last frame of the scene will\n> be rendered and displayed, instead of a video.\n> \n> \n> \n> ref\\_classesA list of classes, separated by spaces, that is\n> rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_functionsA list of functions, separated by spaces,\n> that is rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_methodsA list of methods, separated by spaces,\n> that is rendered in a reference block after the source code.\nClasses\n| [`ManimDirective`](manim.utils.docbuild.manim_directive.ManimDirective.html#manim.utils.docbuild.manim_directive.ManimDirective \"manim.utils.docbuild.manim_directive.ManimDirective\") | The manim directive, rendering videos while building the documentation. |\n| --- | --- |\n| [`SetupMetadata`](manim.utils.docbuild.manim_directive.SetupMetadata.html#manim.utils.docbuild.manim_directive.SetupMetadata \"manim.utils.docbuild.manim_directive.SetupMetadata\") |  |\n| [`SkipManimNode`](manim.utils.docbuild.manim_directive.SkipManimNode.html#manim.utils.docbuild.manim_directive.SkipManimNode \"manim.utils.docbuild.manim_directive.SkipManimNode\") | Auxiliary node class that is used when the `skip-manim` tag is present or `.pot` files are being built. |\nFunctions\ndepart(*self*, *node*)[\\[source]](../_modules/manim/utils/docbuild/manim_directive.html#depart)[¶](#manim.utils.docbuild.manim_directive.depart \"Link to this definition\")\nParameters:\n* **self** ([*SkipManimNode*](manim.utils.docbuild.manim_directive.SkipManimNode.html#manim.utils.docbuild.manim_directive.SkipManimNode \"manim.utils.docbuild.manim_directive.SkipManimNode\"))\n* **node** (*Element*)\nReturn type:\nNone\nprocess\\_name\\_list(*option\\_input*, *reference\\_type*)[\\[source]](../_modules/manim/utils/docbuild/manim_directive.html#process_name_list)[¶](#manim.utils.docbuild.manim_directive.process_name_list \"Link to this definition\")\nReformats a string of space separated class names\nas a list of strings containing valid Sphinx references.\nTests\n```\n>>> process_name_list(\"Tex TexTemplate\", \"class\")\n[':class:`~.Tex`', ':class:`~.TexTemplate`']\n>>> process_name_list(\"Scene.play Mobject.rotate\", \"func\")\n[':func:`~.Scene.play`', ':func:`~.Mobject.rotate`']\n```\nParameters:\n* **option\\_input** (*str*)\n* **reference\\_type** (*str*)\nReturn type:\nlist\\[str]\nsetup(*app*)[\\[source]](../_modules/manim/utils/docbuild/manim_directive.html#setup)[¶](#manim.utils.docbuild.manim_directive.setup \"Link to this definition\")\nParameters:\n**app** (*Sphinx*)\nReturn type:\n[SetupMetadata](manim.utils.docbuild.manim_directive.SetupMetadata.html#manim.utils.docbuild.manim_directive.SetupMetadata \"manim.utils.docbuild.manim_directive.SetupMetadata\")\nvisit(*self*, *node*, *name\\=''*)[\\[source]](../_modules/manim/utils/docbuild/manim_directive.html#visit)[¶](#manim.utils.docbuild.manim_directive.visit \"Link to this definition\")\nParameters:\n* **self** ([*SkipManimNode*](manim.utils.docbuild.manim_directive.SkipManimNode.html#manim.utils.docbuild.manim_directive.SkipManimNode \"manim.utils.docbuild.manim_directive.SkipManimNode\"))\n* **node** (*Element*)\n* **name** (*str*)\nReturn type:\nNone\nA directive for including Manim videos in a Sphinx document[¶](#a-directive-for-including-manim-videos-in-a-sphinx-document \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------------------\nWhen rendering the HTML documentation, the `.. manim::` directive\nimplemented here allows to include rendered videos.\nIts basic usage that allows processing **inline content**\nlooks as follows:\n```\n.. manim:: MyScene\n    class MyScene(Scene):\n        def construct(self):\n            ...\n```\nIt is required to pass the name of the class representing the\nscene to be rendered to the directive.\nAs a second application, the directive can also be used to\nrender scenes that are defined within doctests, for example:\n```\n.. manim:: DirectiveDoctestExample\n    :ref_classes: Dot\n    >>> from manim import Create, Dot, RED, Scene\n    >>> dot = Dot(color=RED)\n    >>> dot.color\n    ManimColor('#FC6255')\n    >>> class DirectiveDoctestExample(Scene):\n    ...     def construct(self):\n    ...         self.play(Create(dot))\n```\n### Options[¶](#options \"Link to this heading\")\nOptions can be passed as follows:\n```\n.. manim:: <Class name>\n    :<option name>: <value>\n```\nThe following configuration options are supported by the\ndirective:\n> hide\\_sourceIf this flag is present without argument,\n> the source code is not displayed above the rendered video.\n> \n> \n> \n> no\\_autoplayIf this flag is present without argument,\n> the video will not autoplay.\n> \n> \n> \n> quality{‘low’, ‘medium’, ‘high’, ‘fourk’}Controls render quality of the video, in analogy to\n> the corresponding command line flags.\n> \n> \n> \n> save\\_as\\_gifIf this flag is present without argument,\n> the scene is rendered as a gif.\n> \n> \n> \n> save\\_last\\_frameIf this flag is present without argument,\n> an image representing the last frame of the scene will\n> be rendered and displayed, instead of a video.\n> \n> \n> \n> ref\\_classesA list of classes, separated by spaces, that is\n> rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_functionsA list of functions, separated by spaces,\n> that is rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_methodsA list of methods, separated by spaces,\n> that is rendered in a reference block after the source code.\n### Options[¶](#options \"Link to this heading\")\nOptions can be passed as follows:\n```\n.. manim:: <Class name>\n    :<option name>: <value>\n```\nThe following configuration options are supported by the\ndirective:\n> hide\\_sourceIf this flag is present without argument,\n> the source code is not displayed above the rendered video.\n> \n> \n> \n> no\\_autoplayIf this flag is present without argument,\n> the video will not autoplay.\n> \n> \n> \n> quality{‘low’, ‘medium’, ‘high’, ‘fourk’}Controls render quality of the video, in analogy to\n> the corresponding command line flags.\n> \n> \n> \n> save\\_as\\_gifIf this flag is present without argument,\n> the scene is rendered as a gif.\n> \n> \n> \n> save\\_last\\_frameIf this flag is present without argument,\n> an image representing the last frame of the scene will\n> be rendered and displayed, instead of a video.\n> \n> \n> \n> ref\\_classesA list of classes, separated by spaces, that is\n> rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_functionsA list of functions, separated by spaces,\n> that is rendered in a reference block after the source code.\n> \n> \n> \n> ref\\_methodsA list of methods, separated by spaces,\n> that is rendered in a reference block after the source code.",
  "scraped_at": "2025-06-24T18:36:09.703073",
  "content_length": 8738,
  "domain": "docs.manim.community",
  "word_count": 1016,
  "inspection_status": "pending",
  "filename": "manim_directive - Manim Community v0.19.0_20250624_183609.json",
  "saved_at": "2025-06-24T18:36:09.703147"
}