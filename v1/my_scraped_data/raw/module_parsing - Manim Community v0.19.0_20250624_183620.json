{
  "doc_id": "26bbb97c0a25db29709640f8fdfd6ab6",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.docbuild.module_parsing.html",
  "title": "module_parsing - Manim Community v0.19.0",
  "content": "module\\_parsing[¶](#module-manim.utils.docbuild.module_parsing \"Link to this heading\")\n======================================================================================\nRead and parse all the Manim modules and extract documentation from them.\nType Aliases\n*class* AliasInfo[¶](#manim.utils.docbuild.module_parsing.AliasInfo \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary with a definition key containing the definition of\na `TypeAlias` as a string, and optionally a doc key containing\nthe documentation for that alias, if it exists.\n*class* AliasCategoryDict[¶](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"Link to this definition\")\n```\ndict[str, [AliasInfo](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\")]\n```\nDictionary which holds an [`AliasInfo`](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\") for every alias name in a same\ncategory.\n*class* ModuleLevelAliasDict[¶](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"Link to this definition\")\n```\ndict[str, [AliasCategoryDict](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\")]\n```\nDictionary containing every `TypeAlias` defined in a module,\nclassified by category in different [`AliasCategoryDict`](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\") objects.\n*class* ModuleTypeVarDict[¶](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary containing every `TypeVar` defined in a module.\n*class* AliasDocsDict[¶](#manim.utils.docbuild.module_parsing.AliasDocsDict \"Link to this definition\")\n```\ndict[str, [ModuleLevelAliasDict](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"manim.utils.docbuild.module_parsing.ModuleLevelAliasDict\")]\n```\nDictionary which, for every module in Manim, contains documentation\nabout their module\\-level attributes which are explicitly defined as\n`TypeAlias`, separating them from the rest of attributes.\n*class* DataDict[¶](#manim.utils.docbuild.module_parsing.DataDict \"Link to this definition\")\n```\ndict[str, list[str]]\n```\nType for a dictionary which, for every module, contains a list with\nthe names of all their DOCUMENTED module\\-level attributes (identified\nby Sphinx via the `data` role, hence the name) which are NOT\nexplicitly defined as `TypeAlias`.\n*class* TypeVarDict[¶](#manim.utils.docbuild.module_parsing.TypeVarDict \"Link to this definition\")\n```\ndict[str, [ModuleTypeVarDict](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"manim.utils.docbuild.module_parsing.ModuleTypeVarDict\")]\n```\nA dictionary mapping module names to dictionaries of `TypeVar` objects.\nFunctions\nparse\\_module\\_attributes()[\\[source]](../_modules/manim/utils/docbuild/module_parsing.html#parse_module_attributes)[¶](#manim.utils.docbuild.module_parsing.parse_module_attributes \"Link to this definition\")\nRead all files, generate Abstract Syntax Trees from them, and\nextract useful information about the type aliases defined in the\nfiles: the category they belong to, their definition and their\ndescription, separating them from the “regular” module attributes.\nReturns:\n* **ALIAS\\_DOCS\\_DICT** ([`AliasDocsDict`](#manim.utils.docbuild.module_parsing.AliasDocsDict \"manim.utils.docbuild.module_parsing.AliasDocsDict\")) – A dictionary containing the information from all the type\naliases in Manim. See [`AliasDocsDict`](#manim.utils.docbuild.module_parsing.AliasDocsDict \"manim.utils.docbuild.module_parsing.AliasDocsDict\") for more information.\n* **DATA\\_DICT** ([`DataDict`](#manim.utils.docbuild.module_parsing.DataDict \"manim.utils.docbuild.module_parsing.DataDict\")) – A dictionary containing the names of all DOCUMENTED\nmodule\\-level attributes which are not a `TypeAlias`.\n* **TYPEVAR\\_DICT** ([`TypeVarDict`](#manim.utils.docbuild.module_parsing.TypeVarDict \"manim.utils.docbuild.module_parsing.TypeVarDict\")) – A dictionary containing the definitions of `TypeVar` objects,\norganized by modules.\nReturn type:\ntuple\\[TypeAliasForwardRef(‘\\~manim.utils.docbuild.module\\_parsing.AliasDocsDict’), TypeAliasForwardRef(‘\\~manim.utils.docbuild.module\\_parsing.DataDict’), TypeAliasForwardRef(‘\\~manim.utils.docbuild.module\\_parsing.TypeVarDict’)]\nType Aliases\n*class* AliasInfo[¶](#manim.utils.docbuild.module_parsing.AliasInfo \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary with a definition key containing the definition of\na `TypeAlias` as a string, and optionally a doc key containing\nthe documentation for that alias, if it exists.\n*class* AliasCategoryDict[¶](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"Link to this definition\")\n```\ndict[str, [AliasInfo](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\")]\n```\nDictionary which holds an [`AliasInfo`](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\") for every alias name in a same\ncategory.\n*class* ModuleLevelAliasDict[¶](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"Link to this definition\")\n```\ndict[str, [AliasCategoryDict](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\")]\n```\nDictionary containing every `TypeAlias` defined in a module,\nclassified by category in different [`AliasCategoryDict`](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\") objects.\n*class* ModuleTypeVarDict[¶](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary containing every `TypeVar` defined in a module.\n*class* AliasDocsDict[¶](#manim.utils.docbuild.module_parsing.AliasDocsDict \"Link to this definition\")\n```\ndict[str, [ModuleLevelAliasDict](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"manim.utils.docbuild.module_parsing.ModuleLevelAliasDict\")]\n```\nDictionary which, for every module in Manim, contains documentation\nabout their module\\-level attributes which are explicitly defined as\n`TypeAlias`, separating them from the rest of attributes.\n*class* DataDict[¶](#manim.utils.docbuild.module_parsing.DataDict \"Link to this definition\")\n```\ndict[str, list[str]]\n```\nType for a dictionary which, for every module, contains a list with\nthe names of all their DOCUMENTED module\\-level attributes (identified\nby Sphinx via the `data` role, hence the name) which are NOT\nexplicitly defined as `TypeAlias`.\n*class* TypeVarDict[¶](#manim.utils.docbuild.module_parsing.TypeVarDict \"Link to this definition\")\n```\ndict[str, [ModuleTypeVarDict](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"manim.utils.docbuild.module_parsing.ModuleTypeVarDict\")]\n```\nA dictionary mapping module names to dictionaries of `TypeVar` objects.\n*class* AliasInfo[¶](#manim.utils.docbuild.module_parsing.AliasInfo \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary with a definition key containing the definition of\na `TypeAlias` as a string, and optionally a doc key containing\nthe documentation for that alias, if it exists.\n*class* AliasCategoryDict[¶](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"Link to this definition\")\n```\ndict[str, [AliasInfo](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\")]\n```\nDictionary which holds an [`AliasInfo`](#manim.utils.docbuild.module_parsing.AliasInfo \"manim.utils.docbuild.module_parsing.AliasInfo\") for every alias name in a same\ncategory.\n*class* ModuleLevelAliasDict[¶](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"Link to this definition\")\n```\ndict[str, [AliasCategoryDict](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\")]\n```\nDictionary containing every `TypeAlias` defined in a module,\nclassified by category in different [`AliasCategoryDict`](#manim.utils.docbuild.module_parsing.AliasCategoryDict \"manim.utils.docbuild.module_parsing.AliasCategoryDict\") objects.\n*class* ModuleTypeVarDict[¶](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"Link to this definition\")\n```\ndict[str, str]\n```\nDictionary containing every `TypeVar` defined in a module.\n*class* AliasDocsDict[¶](#manim.utils.docbuild.module_parsing.AliasDocsDict \"Link to this definition\")\n```\ndict[str, [ModuleLevelAliasDict](#manim.utils.docbuild.module_parsing.ModuleLevelAliasDict \"manim.utils.docbuild.module_parsing.ModuleLevelAliasDict\")]\n```\nDictionary which, for every module in Manim, contains documentation\nabout their module\\-level attributes which are explicitly defined as\n`TypeAlias`, separating them from the rest of attributes.\n*class* DataDict[¶](#manim.utils.docbuild.module_parsing.DataDict \"Link to this definition\")\n```\ndict[str, list[str]]\n```\nType for a dictionary which, for every module, contains a list with\nthe names of all their DOCUMENTED module\\-level attributes (identified\nby Sphinx via the `data` role, hence the name) which are NOT\nexplicitly defined as `TypeAlias`.\n*class* TypeVarDict[¶](#manim.utils.docbuild.module_parsing.TypeVarDict \"Link to this definition\")\n```\ndict[str, [ModuleTypeVarDict](#manim.utils.docbuild.module_parsing.ModuleTypeVarDict \"manim.utils.docbuild.module_parsing.ModuleTypeVarDict\")]\n```\nA dictionary mapping module names to dictionaries of `TypeVar` objects.",
  "scraped_at": "2025-06-24T18:36:20.178803",
  "content_length": 9465,
  "domain": "docs.manim.community",
  "word_count": 770,
  "inspection_status": "pending",
  "filename": "module_parsing - Manim Community v0.19.0_20250624_183620.json",
  "saved_at": "2025-06-24T18:36:20.179011"
}