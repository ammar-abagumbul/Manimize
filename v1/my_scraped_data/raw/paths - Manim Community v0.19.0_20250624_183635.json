{
  "doc_id": "26d29c4a45c4143c977e61f6b9943269",
  "url": "https://docs.manim.community/en/latest/reference/manim.utils.paths.html",
  "title": "paths - Manim Community v0.19.0",
  "content": "paths[¶](#module-manim.utils.paths \"Link to this heading\")\n==========================================================\nFunctions determining transformation paths between sets of points.\nFunctions\nclockwise\\_path()[\\[source]](../_modules/manim/utils/paths.html#clockwise_path)[¶](#manim.utils.paths.clockwise_path \"Link to this definition\")\nThis function transforms each point by moving clockwise around a half circle.\nExamples\nExample: ClockwisePathExample [¶](#clockwisepathexample)\n```\nfrom manim import *\nclass ClockwisePathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.clockwise_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\n```\nclass ClockwisePathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.clockwise_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")\ncounterclockwise\\_path()[\\[source]](../_modules/manim/utils/paths.html#counterclockwise_path)[¶](#manim.utils.paths.counterclockwise_path \"Link to this definition\")\nThis function transforms each point by moving counterclockwise around a half circle.\nExamples\nExample: CounterclockwisePathExample [¶](#counterclockwisepathexample)\n```\nfrom manim import *\nclass CounterclockwisePathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.counterclockwise_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\n```\nclass CounterclockwisePathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.counterclockwise_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")\npath\\_along\\_arc(*arc\\_angle*, *axis\\=array(\\[0\\., 0\\., 1\\.])*)[\\[source]](../_modules/manim/utils/paths.html#path_along_arc)[¶](#manim.utils.paths.path_along_arc \"Link to this definition\")\nThis function transforms each point by moving it along a circular arc.\nParameters:\n* **arc\\_angle** (*float*) – The angle each point traverses around a circular arc.\n* **axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The axis of rotation.\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")\nExamples\nExample: PathAlongArcExample [¶](#pathalongarcexample)\n```\nfrom manim import *\nclass PathAlongArcExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.path_along_arc(TAU * 2 / 3),\n                run_time=3,\n            )\n        )\n        self.wait()\n```\n```\nclass PathAlongArcExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.path_along_arc(TAU * 2 / 3),\n                run_time=3,\n            )\n        )\n        self.wait()\n```\npath\\_along\\_circles(*arc\\_angle*, *circles\\_centers*, *axis\\=array(\\[0\\., 0\\., 1\\.])*)[\\[source]](../_modules/manim/utils/paths.html#path_along_circles)[¶](#manim.utils.paths.path_along_circles \"Link to this definition\")\nThis function transforms each point by moving it roughly along a circle, each with its own specified center.\nThe path may be seen as each point smoothly changing its orbit from its starting position to its destination.\nParameters:\n* **arc\\_angle** (*float*) – The angle each point traverses around the quasicircle.\n* **circles\\_centers** (*ndarray*) – The centers of each point’s quasicircle to rotate around.\n* **axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The axis of rotation.\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")\nExamples\nExample: PathAlongCirclesExample [¶](#pathalongcirclesexample)\n```\nfrom manim import *\nclass PathAlongCirclesExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        circle_center = Dot(3 * LEFT)\n        self.add(circle_center)\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.path_along_circles(\n                    2 * PI, circle_center.get_center()\n                ),\n                run_time=3,\n            )\n        )\n        self.wait()\n```\n```\nclass PathAlongCirclesExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        circle_center = Dot(3 * LEFT)\n        self.add(circle_center)\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.path_along_circles(\n                    2 * PI, circle_center.get_center()\n                ),\n                run_time=3,\n            )\n        )\n        self.wait()\n```\nspiral\\_path(*angle*, *axis\\=array(\\[0\\., 0\\., 1\\.])*)[\\[source]](../_modules/manim/utils/paths.html#spiral_path)[¶](#manim.utils.paths.spiral_path \"Link to this definition\")\nThis function transforms each point by moving along a spiral to its destination.\nParameters:\n* **angle** (*float*) – The angle each point traverses around a spiral.\n* **axis** ([*Vector3D*](manim.typing.html#manim.typing.Vector3D \"manim.typing.Vector3D\")) – The axis of rotation.\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")\nExamples\nExample: SpiralPathExample [¶](#spiralpathexample)\n```\nfrom manim import *\nclass SpiralPathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.spiral_path(2 * TAU),\n                run_time=5,\n            )\n        )\n        self.wait()\n```\n```\nclass SpiralPathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.spiral_path(2 * TAU),\n                run_time=5,\n            )\n        )\n        self.wait()\n```\nstraight\\_path()[\\[source]](../_modules/manim/utils/paths.html#straight_path)[¶](#manim.utils.paths.straight_path \"Link to this definition\")\nSimplest path function. Each point in a set goes in a straight path toward its destination.\nExamples\nExample: StraightPathExample [¶](#straightpathexample)\n```\nfrom manim import *\nclass StraightPathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.straight_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\n```\nclass StraightPathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.straight_path(),\n                run_time=2,\n            )\n        )\n        self.wait()\n```\nReturn type:\n[*PathFuncType*](manim.typing.html#manim.typing.PathFuncType \"manim.typing.PathFuncType\")",
  "scraped_at": "2025-06-24T18:36:35.860384",
  "content_length": 14908,
  "domain": "docs.manim.community",
  "word_count": 1123,
  "inspection_status": "pending",
  "filename": "paths - Manim Community v0.19.0_20250624_183635.json",
  "saved_at": "2025-06-24T18:36:35.860459"
}